
SIM900a_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08005150  08005150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052dc  080052dc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e4  080052e4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080052ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000074  08005360  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08005360  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f975  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d53  00000000  00000000  0002fa19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00031770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00032440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026035  00000000  00000000  00033058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcdc  00000000  00000000  0005908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0249  00000000  00000000  00068d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158fb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a14  00000000  00000000  00159004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005138 	.word	0x08005138

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005138 	.word	0x08005138

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fc8b 	bl	8000ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f9a2 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fa84 	bl	8000adc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d4:	f000 fa52 	bl	8000a7c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80005d8:	f000 fa02 	bl	80009e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart3, &response, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	49b0      	ldr	r1, [pc, #704]	; (80008a0 <main+0x2dc>)
 80005e0:	48b0      	ldr	r0, [pc, #704]	; (80008a4 <main+0x2e0>)
 80005e2:	f002 fee8 	bl	80033b6 <HAL_UART_Receive_IT>
  {
	  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(new_state)
 80005e6:	4bb0      	ldr	r3, [pc, #704]	; (80008a8 <main+0x2e4>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	2b0b      	cmp	r3, #11
 80005ee:	f200 80b4 	bhi.w	800075a <main+0x196>
 80005f2:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <main+0x34>)
 80005f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f8:	08000629 	.word	0x08000629
 80005fc:	08000641 	.word	0x08000641
 8000600:	08000659 	.word	0x08000659
 8000604:	08000671 	.word	0x08000671
 8000608:	08000689 	.word	0x08000689
 800060c:	080006a1 	.word	0x080006a1
 8000610:	080006b9 	.word	0x080006b9
 8000614:	080006d1 	.word	0x080006d1
 8000618:	080006e9 	.word	0x080006e9
 800061c:	08000701 	.word	0x08000701
 8000620:	08000719 	.word	0x08000719
 8000624:	08000743 	.word	0x08000743
	  {
	   case 1:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT\r\n", 4, 1000);
 8000628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062c:	2204      	movs	r2, #4
 800062e:	499f      	ldr	r1, [pc, #636]	; (80008ac <main+0x2e8>)
 8000630:	489c      	ldr	r0, [pc, #624]	; (80008a4 <main+0x2e0>)
 8000632:	f002 fe3d 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 8000636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063a:	f000 fcaf 	bl	8000f9c <HAL_Delay>
	   break;
 800063e:	e08c      	b.n	800075a <main+0x196>
	   case 2:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CPIN?\r\n", 10, 1000);
 8000640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000644:	220a      	movs	r2, #10
 8000646:	499a      	ldr	r1, [pc, #616]	; (80008b0 <main+0x2ec>)
 8000648:	4896      	ldr	r0, [pc, #600]	; (80008a4 <main+0x2e0>)
 800064a:	f002 fe31 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 800064e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000652:	f000 fca3 	bl	8000f9c <HAL_Delay>
	   break;
 8000656:	e080      	b.n	800075a <main+0x196>
	   case 3:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CREG?\r\n", 10, 1000);
 8000658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065c:	220a      	movs	r2, #10
 800065e:	4995      	ldr	r1, [pc, #596]	; (80008b4 <main+0x2f0>)
 8000660:	4890      	ldr	r0, [pc, #576]	; (80008a4 <main+0x2e0>)
 8000662:	f002 fe25 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 8000666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066a:	f000 fc97 	bl	8000f9c <HAL_Delay>
	   break;
 800066e:	e074      	b.n	800075a <main+0x196>
	   case 4:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIPMUX=0\r\n", 13, 1000);
 8000670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000674:	220d      	movs	r2, #13
 8000676:	4990      	ldr	r1, [pc, #576]	; (80008b8 <main+0x2f4>)
 8000678:	488a      	ldr	r0, [pc, #552]	; (80008a4 <main+0x2e0>)
 800067a:	f002 fe19 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 800067e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000682:	f000 fc8b 	bl	8000f9c <HAL_Delay>
	   break;
 8000686:	e068      	b.n	800075a <main+0x196>
	   case 5:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CGATT=1\r\n", 12, 1000);
 8000688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068c:	220c      	movs	r2, #12
 800068e:	498b      	ldr	r1, [pc, #556]	; (80008bc <main+0x2f8>)
 8000690:	4884      	ldr	r0, [pc, #528]	; (80008a4 <main+0x2e0>)
 8000692:	f002 fe0d 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(2000);
 8000696:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069a:	f000 fc7f 	bl	8000f9c <HAL_Delay>
	   break;
 800069e:	e05c      	b.n	800075a <main+0x196>
	   case 6:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CSTT=\"airtelgprs.com\","",""\r\n",32, 1000);
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	2220      	movs	r2, #32
 80006a6:	4986      	ldr	r1, [pc, #536]	; (80008c0 <main+0x2fc>)
 80006a8:	487e      	ldr	r0, [pc, #504]	; (80008a4 <main+0x2e0>)
 80006aa:	f002 fe01 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 80006ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b2:	f000 fc73 	bl	8000f9c <HAL_Delay>
	   break;
 80006b6:	e050      	b.n	800075a <main+0x196>
	   case 7:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIICR\r\n", 10, 1000);
 80006b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006bc:	220a      	movs	r2, #10
 80006be:	4981      	ldr	r1, [pc, #516]	; (80008c4 <main+0x300>)
 80006c0:	4878      	ldr	r0, [pc, #480]	; (80008a4 <main+0x2e0>)
 80006c2:	f002 fdf5 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 80006c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ca:	f000 fc67 	bl	8000f9c <HAL_Delay>
	   break;
 80006ce:	e044      	b.n	800075a <main+0x196>
	   case 8:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIFSR\r\n", 10, 1000);
 80006d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d4:	220a      	movs	r2, #10
 80006d6:	497c      	ldr	r1, [pc, #496]	; (80008c8 <main+0x304>)
 80006d8:	4872      	ldr	r0, [pc, #456]	; (80008a4 <main+0x2e0>)
 80006da:	f002 fde9 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 80006de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e2:	f000 fc5b 	bl	8000f9c <HAL_Delay>
	   break;
 80006e6:	e038      	b.n	800075a <main+0x196>
	   case 9:
//	   sprintf (connection,"AT+CIPSTART=\"TCP\",\"143.244.133.98\",\"8000\"\r\n",TCP_buffer);
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIPSTART=\"TCP\",\"143.244.133.98\",\"8000\"\r\n",43, 1000);
 80006e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ec:	222b      	movs	r2, #43	; 0x2b
 80006ee:	4977      	ldr	r1, [pc, #476]	; (80008cc <main+0x308>)
 80006f0:	486c      	ldr	r0, [pc, #432]	; (80008a4 <main+0x2e0>)
 80006f2:	f002 fddd 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 80006f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006fa:	f000 fc4f 	bl	8000f9c <HAL_Delay>
	   break;
 80006fe:	e02c      	b.n	800075a <main+0x196>
	   case 10:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIPSEND\r\n", 12, 1000);
 8000700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000704:	220c      	movs	r2, #12
 8000706:	4972      	ldr	r1, [pc, #456]	; (80008d0 <main+0x30c>)
 8000708:	4866      	ldr	r0, [pc, #408]	; (80008a4 <main+0x2e0>)
 800070a:	f002 fdd1 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 800070e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000712:	f000 fc43 	bl	8000f9c <HAL_Delay>
	   break;
 8000716:	e020      	b.n	800075a <main+0x196>
	   case 11:
	   sprintf(buffer,"TEVATRON%c\r\n",CTRL_Z);
 8000718:	221a      	movs	r2, #26
 800071a:	496e      	ldr	r1, [pc, #440]	; (80008d4 <main+0x310>)
 800071c:	486e      	ldr	r0, [pc, #440]	; (80008d8 <main+0x314>)
 800071e:	f004 f887 	bl	8004830 <siprintf>
	   HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer),1000);
 8000722:	486d      	ldr	r0, [pc, #436]	; (80008d8 <main+0x314>)
 8000724:	f7ff fd74 	bl	8000210 <strlen>
 8000728:	4603      	mov	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000730:	4969      	ldr	r1, [pc, #420]	; (80008d8 <main+0x314>)
 8000732:	485c      	ldr	r0, [pc, #368]	; (80008a4 <main+0x2e0>)
 8000734:	f002 fdbc 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 8000738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073c:	f000 fc2e 	bl	8000f9c <HAL_Delay>
	   break;
 8000740:	e00b      	b.n	800075a <main+0x196>
	   case 12:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIPCLOSE\r\n", 13,1000);
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	220d      	movs	r2, #13
 8000748:	4964      	ldr	r1, [pc, #400]	; (80008dc <main+0x318>)
 800074a:	4856      	ldr	r0, [pc, #344]	; (80008a4 <main+0x2e0>)
 800074c:	f002 fdb0 	bl	80032b0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 8000750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000754:	f000 fc22 	bl	8000f9c <HAL_Delay>
	   break;
 8000758:	bf00      	nop

	  }
//	  memset(store, '\0' , 50);
  }

  if(send_flag)
 800075a:	4b61      	ldr	r3, [pc, #388]	; (80008e0 <main+0x31c>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	f43f af41 	beq.w	80005e6 <main+0x22>
  {
	 if(strstr((char*)store,"OK")&& (new_state=1))
 8000764:	495f      	ldr	r1, [pc, #380]	; (80008e4 <main+0x320>)
 8000766:	4860      	ldr	r0, [pc, #384]	; (80008e8 <main+0x324>)
 8000768:	f004 f882 	bl	8004870 <strstr>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d005      	beq.n	800077e <main+0x1ba>
 8000772:	4b4d      	ldr	r3, [pc, #308]	; (80008a8 <main+0x2e4>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
	  {
 		        new_state=2;
 8000778:	4b4b      	ldr	r3, [pc, #300]	; (80008a8 <main+0x2e4>)
 800077a:	2202      	movs	r2, #2
 800077c:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"READY")&& (new_state=2))
 800077e:	495b      	ldr	r1, [pc, #364]	; (80008ec <main+0x328>)
 8000780:	4859      	ldr	r0, [pc, #356]	; (80008e8 <main+0x324>)
 8000782:	f004 f875 	bl	8004870 <strstr>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d005      	beq.n	8000798 <main+0x1d4>
 800078c:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <main+0x2e4>)
 800078e:	2202      	movs	r2, #2
 8000790:	701a      	strb	r2, [r3, #0]
	  {
	 	        new_state=3;
 8000792:	4b45      	ldr	r3, [pc, #276]	; (80008a8 <main+0x2e4>)
 8000794:	2203      	movs	r2, #3
 8000796:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"+CREG: 0,5")&& (new_state=3))
 8000798:	4955      	ldr	r1, [pc, #340]	; (80008f0 <main+0x32c>)
 800079a:	4853      	ldr	r0, [pc, #332]	; (80008e8 <main+0x324>)
 800079c:	f004 f868 	bl	8004870 <strstr>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d005      	beq.n	80007b2 <main+0x1ee>
 80007a6:	4b40      	ldr	r3, [pc, #256]	; (80008a8 <main+0x2e4>)
 80007a8:	2203      	movs	r2, #3
 80007aa:	701a      	strb	r2, [r3, #0]
	  {
	 	 	    new_state=4;
 80007ac:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <main+0x2e4>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"CIPMUX=0")&& (new_state=4))
 80007b2:	4950      	ldr	r1, [pc, #320]	; (80008f4 <main+0x330>)
 80007b4:	484c      	ldr	r0, [pc, #304]	; (80008e8 <main+0x324>)
 80007b6:	f004 f85b 	bl	8004870 <strstr>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d005      	beq.n	80007cc <main+0x208>
 80007c0:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <main+0x2e4>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	701a      	strb	r2, [r3, #0]
	  {
	 	 	    new_state=5;
 80007c6:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <main+0x2e4>)
 80007c8:	2205      	movs	r2, #5
 80007ca:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"CGATT=1")&& (new_state=5))
 80007cc:	494a      	ldr	r1, [pc, #296]	; (80008f8 <main+0x334>)
 80007ce:	4846      	ldr	r0, [pc, #280]	; (80008e8 <main+0x324>)
 80007d0:	f004 f84e 	bl	8004870 <strstr>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d005      	beq.n	80007e6 <main+0x222>
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <main+0x2e4>)
 80007dc:	2205      	movs	r2, #5
 80007de:	701a      	strb	r2, [r3, #0]
	  {
	 	 	 	new_state=6;
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <main+0x2e4>)
 80007e2:	2206      	movs	r2, #6
 80007e4:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"OK")&& (new_state=6))
 80007e6:	493f      	ldr	r1, [pc, #252]	; (80008e4 <main+0x320>)
 80007e8:	483f      	ldr	r0, [pc, #252]	; (80008e8 <main+0x324>)
 80007ea:	f004 f841 	bl	8004870 <strstr>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <main+0x23c>
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <main+0x2e4>)
 80007f6:	2206      	movs	r2, #6
 80007f8:	701a      	strb	r2, [r3, #0]
	  {
	 	 	 	new_state=7;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <main+0x2e4>)
 80007fc:	2207      	movs	r2, #7
 80007fe:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"AT+CIICR")&& (new_state=7))
 8000800:	493e      	ldr	r1, [pc, #248]	; (80008fc <main+0x338>)
 8000802:	4839      	ldr	r0, [pc, #228]	; (80008e8 <main+0x324>)
 8000804:	f004 f834 	bl	8004870 <strstr>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d005      	beq.n	800081a <main+0x256>
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <main+0x2e4>)
 8000810:	2207      	movs	r2, #7
 8000812:	701a      	strb	r2, [r3, #0]
	  {
	 	 	 	new_state=8;
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <main+0x2e4>)
 8000816:	2208      	movs	r2, #8
 8000818:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"AT+CIFSR")&& (new_state=8))
 800081a:	4939      	ldr	r1, [pc, #228]	; (8000900 <main+0x33c>)
 800081c:	4832      	ldr	r0, [pc, #200]	; (80008e8 <main+0x324>)
 800081e:	f004 f827 	bl	8004870 <strstr>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d005      	beq.n	8000834 <main+0x270>
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <main+0x2e4>)
 800082a:	2208      	movs	r2, #8
 800082c:	701a      	strb	r2, [r3, #0]
	  {
	 	 	 	new_state=9;
 800082e:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <main+0x2e4>)
 8000830:	2209      	movs	r2, #9
 8000832:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"CONNECT")&& (new_state=9))
 8000834:	4933      	ldr	r1, [pc, #204]	; (8000904 <main+0x340>)
 8000836:	482c      	ldr	r0, [pc, #176]	; (80008e8 <main+0x324>)
 8000838:	f004 f81a 	bl	8004870 <strstr>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d005      	beq.n	800084e <main+0x28a>
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <main+0x2e4>)
 8000844:	2209      	movs	r2, #9
 8000846:	701a      	strb	r2, [r3, #0]
	  {
		 	 	 new_state=10;
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <main+0x2e4>)
 800084a:	220a      	movs	r2, #10
 800084c:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"AT+CIPSEND")&& (new_state=10))
 800084e:	492e      	ldr	r1, [pc, #184]	; (8000908 <main+0x344>)
 8000850:	4825      	ldr	r0, [pc, #148]	; (80008e8 <main+0x324>)
 8000852:	f004 f80d 	bl	8004870 <strstr>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d005      	beq.n	8000868 <main+0x2a4>
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <main+0x2e4>)
 800085e:	220a      	movs	r2, #10
 8000860:	701a      	strb	r2, [r3, #0]
	  {
			 	new_state=11;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <main+0x2e4>)
 8000864:	220b      	movs	r2, #11
 8000866:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"SEND OK")&& (new_state=11))
 8000868:	4928      	ldr	r1, [pc, #160]	; (800090c <main+0x348>)
 800086a:	481f      	ldr	r0, [pc, #124]	; (80008e8 <main+0x324>)
 800086c:	f004 f800 	bl	8004870 <strstr>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d005      	beq.n	8000882 <main+0x2be>
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <main+0x2e4>)
 8000878:	220b      	movs	r2, #11
 800087a:	701a      	strb	r2, [r3, #0]
	  {
	 			 new_state=12;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <main+0x2e4>)
 800087e:	220c      	movs	r2, #12
 8000880:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"CLOSED OK")&& (new_state=12))
 8000882:	4923      	ldr	r1, [pc, #140]	; (8000910 <main+0x34c>)
 8000884:	4818      	ldr	r0, [pc, #96]	; (80008e8 <main+0x324>)
 8000886:	f003 fff3 	bl	8004870 <strstr>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	f43f aeaa 	beq.w	80005e6 <main+0x22>
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <main+0x2e4>)
 8000894:	220c      	movs	r2, #12
 8000896:	701a      	strb	r2, [r3, #0]
	  {
		 			 new_state=9;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <main+0x2e4>)
 800089a:	2209      	movs	r2, #9
 800089c:	701a      	strb	r2, [r3, #0]
	  switch(new_state)
 800089e:	e6a2      	b.n	80005e6 <main+0x22>
 80008a0:	20000164 	.word	0x20000164
 80008a4:	200000dc 	.word	0x200000dc
 80008a8:	20000000 	.word	0x20000000
 80008ac:	08005150 	.word	0x08005150
 80008b0:	08005158 	.word	0x08005158
 80008b4:	08005164 	.word	0x08005164
 80008b8:	08005170 	.word	0x08005170
 80008bc:	08005180 	.word	0x08005180
 80008c0:	08005190 	.word	0x08005190
 80008c4:	080051b0 	.word	0x080051b0
 80008c8:	080051bc 	.word	0x080051bc
 80008cc:	080051c8 	.word	0x080051c8
 80008d0:	080051f4 	.word	0x080051f4
 80008d4:	08005204 	.word	0x08005204
 80008d8:	200001bc 	.word	0x200001bc
 80008dc:	08005214 	.word	0x08005214
 80008e0:	200001b8 	.word	0x200001b8
 80008e4:	08005224 	.word	0x08005224
 80008e8:	20000168 	.word	0x20000168
 80008ec:	08005228 	.word	0x08005228
 80008f0:	08005230 	.word	0x08005230
 80008f4:	0800523c 	.word	0x0800523c
 80008f8:	08005248 	.word	0x08005248
 80008fc:	08005250 	.word	0x08005250
 8000900:	0800525c 	.word	0x0800525c
 8000904:	08005268 	.word	0x08005268
 8000908:	08005270 	.word	0x08005270
 800090c:	0800527c 	.word	0x0800527c
 8000910:	08005284 	.word	0x08005284

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	2230      	movs	r2, #48	; 0x30
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f003 ff7c 	bl	8004820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <SystemClock_Config+0xc4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a26      	ldr	r2, [pc, #152]	; (80009d8 <SystemClock_Config+0xc4>)
 800093e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <SystemClock_Config+0xc4>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <SystemClock_Config+0xc8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000958:	4a20      	ldr	r2, [pc, #128]	; (80009dc <SystemClock_Config+0xc8>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <SystemClock_Config+0xc8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000976:	2302      	movs	r3, #2
 8000978:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000980:	2308      	movs	r3, #8
 8000982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000984:	2348      	movs	r3, #72	; 0x48
 8000986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000988:	2302      	movs	r3, #2
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000990:	f107 0320 	add.w	r3, r7, #32
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fe8f 	bl	80016b8 <HAL_RCC_OscConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009a0:	f000 f93a 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a4:	230f      	movs	r3, #15
 80009a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a8:	2302      	movs	r3, #2
 80009aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	2102      	movs	r1, #2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 f91d 	bl	8001c00 <HAL_RCC_ClockConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80009cc:	f000 f924 	bl	8000c18 <Error_Handler>
  }
}
 80009d0:	bf00      	nop
 80009d2:	3750      	adds	r7, #80	; 0x50
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function for 1sec
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a08:	2232      	movs	r2, #50	; 0x32
 8000a0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 313725-1;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <MX_TIM2_Init+0x98>)
 8000a16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a26:	f001 feff 	bl	8002828 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a30:	f000 f8f2 	bl	8000c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a42:	f002 f90f 	bl	8002c64 <HAL_TIM_ConfigClockSource>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a4c:	f000 f8e4 	bl	8000c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a5e:	f002 fb2d 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a68:	f000 f8d6 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000090 	.word	0x20000090
 8000a78:	0004c97c 	.word	0x0004c97c

08000a7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a82:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <MX_USART3_UART_Init+0x5c>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000ac0:	f002 fba8 	bl	8003214 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aca:	f000 f8a5 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000dc 	.word	0x200000dc
 8000ad8:	40004800 	.word	0x40004800

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_GPIO_Init+0x90>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <MX_GPIO_Init+0x90>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_GPIO_Init+0x90>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_GPIO_Init+0x90>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <MX_GPIO_Init+0x90>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_GPIO_Init+0x90>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_GPIO_Init+0x90>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <MX_GPIO_Init+0x90>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_GPIO_Init+0x90>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_GPIO_Init+0x94>)
 8000b42:	f000 fd9f 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000b46:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_GPIO_Init+0x94>)
 8000b60:	f000 fbe4 	bl	800132c <HAL_GPIO_Init>

}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020400 	.word	0x40020400

08000b74 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)

{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <HAL_UART_RxCpltCallback+0x4c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d117      	bne.n	8000bb6 <HAL_UART_RxCpltCallback+0x42>
	{
	store[i]=response;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_UART_RxCpltCallback+0x50>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_UART_RxCpltCallback+0x54>)
 8000b8e:	7819      	ldrb	r1, [r3, #0]
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_UART_RxCpltCallback+0x58>)
 8000b92:	5499      	strb	r1, [r3, r2]
	i++;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_UART_RxCpltCallback+0x50>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_UART_RxCpltCallback+0x50>)
 8000b9e:	701a      	strb	r2, [r3, #0]
    response=0;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_UART_RxCpltCallback+0x54>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, &response, 1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <HAL_UART_RxCpltCallback+0x54>)
 8000baa:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000bac:	f002 fc03 	bl	80033b6 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <HAL_UART_RxCpltCallback+0x60>)
 8000bb2:	f001 fe91 	bl	80028d8 <HAL_TIM_Base_Start_IT>
	}

}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004800 	.word	0x40004800
 8000bc4:	200001b9 	.word	0x200001b9
 8000bc8:	20000164 	.word	0x20000164
 8000bcc:	20000168 	.word	0x20000168
 8000bd0:	200000dc 	.word	0x200000dc
 8000bd4:	20000090 	.word	0x20000090

08000bd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	i=0;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000be6:	4808      	ldr	r0, [pc, #32]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000be8:	f001 feee 	bl	80029c8 <HAL_TIM_Base_Stop_IT>
//    send_flag=1;
    HAL_UART_Receive_IT(&huart3,&response, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	4907      	ldr	r1, [pc, #28]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bf0:	4807      	ldr	r0, [pc, #28]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bf2:	f002 fbe0 	bl	80033b6 <HAL_UART_Receive_IT>
    send_flag=1;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]



}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200001b9 	.word	0x200001b9
 8000c08:	20000090 	.word	0x20000090
 8000c0c:	20000164 	.word	0x20000164
 8000c10:	200000dc 	.word	0x200000dc
 8000c14:	200001b8 	.word	0x200001b8

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_MspInit+0x44>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_MspInit+0x44>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_MspInit+0x44>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x44>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x44>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x44>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c7c:	d113      	bne.n	8000ca6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_TIM_Base_MspInit+0x44>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <HAL_TIM_Base_MspInit+0x44>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_TIM_Base_MspInit+0x44>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	201c      	movs	r0, #28
 8000c9c:	f000 fa7d 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ca0:	201c      	movs	r0, #28
 8000ca2:	f000 fa96 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0aa      	sub	sp, #168	; 0xa8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	2284      	movs	r2, #132	; 0x84
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 fda3 	bl	8004820 <memset>
  if(huart->Instance==USART3)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a26      	ldr	r2, [pc, #152]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d144      	bne.n	8000d6e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 f9a8 	bl	8002048 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cfe:	f7ff ff8b 	bl	8000c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <HAL_UART_MspInit+0xc8>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_UART_MspInit+0xc8>)
 8000d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <HAL_UART_MspInit+0xc8>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_UART_MspInit+0xc8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_UART_MspInit+0xc8>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_UART_MspInit+0xc8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d56:	4619      	mov	r1, r3
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <HAL_UART_MspInit+0xcc>)
 8000d5a:	f000 fae7 	bl	800132c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2027      	movs	r0, #39	; 0x27
 8000d64:	f000 fa19 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d68:	2027      	movs	r0, #39	; 0x27
 8000d6a:	f000 fa32 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	37a8      	adds	r7, #168	; 0xa8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40004800 	.word	0x40004800
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020c00 	.word	0x40020c00

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f8c4 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <TIM2_IRQHandler+0x10>)
 8000dde:	f001 fe22 	bl	8002a26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000090 	.word	0x20000090

08000dec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <USART3_IRQHandler+0x10>)
 8000df2:	f002 fb25 	bl	8003440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000dc 	.word	0x200000dc

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f003 fccc 	bl	80047cc <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20050000 	.word	0x20050000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200001cc 	.word	0x200001cc
 8000e68:	200001e8 	.word	0x200001e8

08000e6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eba:	f7ff ffd7 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f003 fc8b 	bl	80047d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fb7f 	bl	80005c4 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ed4:	080052ec 	.word	0x080052ec
  ldr r2, =_sbss
 8000ed8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000edc:	200001e4 	.word	0x200001e4

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>

08000ee2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 f94c 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 f805 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef2:	f7ff fe97 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f967 	bl	80011ee <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f92f 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000004 	.word	0x20000004
 8000f54:	2000000c 	.word	0x2000000c
 8000f58:	20000008 	.word	0x20000008

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	2000000c 	.word	0x2000000c
 8000f80:	200001d0 	.word	0x200001d0

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200001d0 	.word	0x200001d0

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000000c 	.word	0x2000000c

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	4313      	orrs	r3, r2
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x40>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00
 8001028:	05fa0000 	.word	0x05fa0000

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff29 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff3e 	bl	800102c <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff8e 	bl	80010d8 <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff31 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffa2 	bl	8001140 <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b084      	sub	sp, #16
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff feb6 	bl	8000f84 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d008      	beq.n	8001238 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e052      	b.n	80012de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0216 	bic.w	r2, r2, #22
 8001246:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001256:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <HAL_DMA_Abort+0x62>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0208 	bic.w	r2, r2, #8
 8001276:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001288:	e013      	b.n	80012b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800128a:	f7ff fe7b 	bl	8000f84 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b05      	cmp	r3, #5
 8001296:	d90c      	bls.n	80012b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2220      	movs	r2, #32
 800129c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2203      	movs	r2, #3
 80012a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e015      	b.n	80012de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e4      	bne.n	800128a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c4:	223f      	movs	r2, #63	; 0x3f
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d004      	beq.n	8001304 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e00c      	b.n	800131e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2205      	movs	r2, #5
 8001308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	e175      	b.n	8001638 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 8164 	bne.w	8001632 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d005      	beq.n	8001382 <HAL_GPIO_Init+0x56>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d130      	bne.n	80013e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d017      	beq.n	8001420 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d123      	bne.n	8001474 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	69b9      	ldr	r1, [r7, #24]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80be 	beq.w	8001632 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b66      	ldr	r3, [pc, #408]	; (8001650 <HAL_GPIO_Init+0x324>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a65      	ldr	r2, [pc, #404]	; (8001650 <HAL_GPIO_Init+0x324>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b63      	ldr	r3, [pc, #396]	; (8001650 <HAL_GPIO_Init+0x324>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014ce:	4a61      	ldr	r2, [pc, #388]	; (8001654 <HAL_GPIO_Init+0x328>)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_GPIO_Init+0x32c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d037      	beq.n	800156a <HAL_GPIO_Init+0x23e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a57      	ldr	r2, [pc, #348]	; (800165c <HAL_GPIO_Init+0x330>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d031      	beq.n	8001566 <HAL_GPIO_Init+0x23a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a56      	ldr	r2, [pc, #344]	; (8001660 <HAL_GPIO_Init+0x334>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d02b      	beq.n	8001562 <HAL_GPIO_Init+0x236>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a55      	ldr	r2, [pc, #340]	; (8001664 <HAL_GPIO_Init+0x338>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d025      	beq.n	800155e <HAL_GPIO_Init+0x232>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a54      	ldr	r2, [pc, #336]	; (8001668 <HAL_GPIO_Init+0x33c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01f      	beq.n	800155a <HAL_GPIO_Init+0x22e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a53      	ldr	r2, [pc, #332]	; (800166c <HAL_GPIO_Init+0x340>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x22a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a52      	ldr	r2, [pc, #328]	; (8001670 <HAL_GPIO_Init+0x344>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x226>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a51      	ldr	r2, [pc, #324]	; (8001674 <HAL_GPIO_Init+0x348>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x222>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a50      	ldr	r2, [pc, #320]	; (8001678 <HAL_GPIO_Init+0x34c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x21e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4f      	ldr	r2, [pc, #316]	; (800167c <HAL_GPIO_Init+0x350>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x21a>
 8001542:	2309      	movs	r3, #9
 8001544:	e012      	b.n	800156c <HAL_GPIO_Init+0x240>
 8001546:	230a      	movs	r3, #10
 8001548:	e010      	b.n	800156c <HAL_GPIO_Init+0x240>
 800154a:	2308      	movs	r3, #8
 800154c:	e00e      	b.n	800156c <HAL_GPIO_Init+0x240>
 800154e:	2307      	movs	r3, #7
 8001550:	e00c      	b.n	800156c <HAL_GPIO_Init+0x240>
 8001552:	2306      	movs	r3, #6
 8001554:	e00a      	b.n	800156c <HAL_GPIO_Init+0x240>
 8001556:	2305      	movs	r3, #5
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x240>
 800155a:	2304      	movs	r3, #4
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x240>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x240>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x240>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x240>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800157c:	4935      	ldr	r1, [pc, #212]	; (8001654 <HAL_GPIO_Init+0x328>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <HAL_GPIO_Init+0x354>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a34      	ldr	r2, [pc, #208]	; (8001680 <HAL_GPIO_Init+0x354>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b32      	ldr	r3, [pc, #200]	; (8001680 <HAL_GPIO_Init+0x354>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a29      	ldr	r2, [pc, #164]	; (8001680 <HAL_GPIO_Init+0x354>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <HAL_GPIO_Init+0x354>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001602:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <HAL_GPIO_Init+0x354>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_GPIO_Init+0x354>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <HAL_GPIO_Init+0x354>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f ae86 	bls.w	800134c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40021400 	.word	0x40021400
 8001670:	40021800 	.word	0x40021800
 8001674:	40021c00 	.word	0x40021c00
 8001678:	40022000 	.word	0x40022000
 800167c:	40022400 	.word	0x40022400
 8001680:	40013c00 	.word	0x40013c00

08001684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001694:	787b      	ldrb	r3, [r7, #1]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016a0:	e003      	b.n	80016aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	041a      	lsls	r2, r3, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	619a      	str	r2, [r3, #24]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e291      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8087 	beq.w	80017ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016dc:	4b96      	ldr	r3, [pc, #600]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d00c      	beq.n	8001702 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e8:	4b93      	ldr	r3, [pc, #588]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d112      	bne.n	800171a <HAL_RCC_OscConfig+0x62>
 80016f4:	4b90      	ldr	r3, [pc, #576]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001700:	d10b      	bne.n	800171a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001702:	4b8d      	ldr	r3, [pc, #564]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d06c      	beq.n	80017e8 <HAL_RCC_OscConfig+0x130>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d168      	bne.n	80017e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e26b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x7a>
 8001724:	4b84      	ldr	r3, [pc, #528]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a83      	ldr	r2, [pc, #524]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 800172a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e02e      	b.n	8001790 <HAL_RCC_OscConfig+0xd8>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x9c>
 800173a:	4b7f      	ldr	r3, [pc, #508]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a7e      	ldr	r2, [pc, #504]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a7b      	ldr	r2, [pc, #492]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 800174c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e01d      	b.n	8001790 <HAL_RCC_OscConfig+0xd8>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0xc0>
 800175e:	4b76      	ldr	r3, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a75      	ldr	r2, [pc, #468]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b73      	ldr	r3, [pc, #460]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a72      	ldr	r2, [pc, #456]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e00b      	b.n	8001790 <HAL_RCC_OscConfig+0xd8>
 8001778:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 800177e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b6c      	ldr	r3, [pc, #432]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a6b      	ldr	r2, [pc, #428]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fbf4 	bl	8000f84 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fbf0 	bl	8000f84 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e21f      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b61      	ldr	r3, [pc, #388]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0xe8>
 80017be:	e014      	b.n	80017ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fbe0 	bl	8000f84 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fbdc 	bl	8000f84 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e20b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	4b57      	ldr	r3, [pc, #348]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x110>
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d069      	beq.n	80018ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f6:	4b50      	ldr	r3, [pc, #320]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001802:	4b4d      	ldr	r3, [pc, #308]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b08      	cmp	r3, #8
 800180c:	d11c      	bne.n	8001848 <HAL_RCC_OscConfig+0x190>
 800180e:	4b4a      	ldr	r3, [pc, #296]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_RCC_OscConfig+0x17a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e1df      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	493d      	ldr	r1, [pc, #244]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	e040      	b.n	80018ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d023      	beq.n	8001898 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a38      	ldr	r2, [pc, #224]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fb92 	bl	8000f84 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fb8e 	bl	8000f84 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e1bd      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001876:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4929      	ldr	r1, [pc, #164]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
 8001896:	e018      	b.n	80018ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a26      	ldr	r2, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb6e 	bl	8000f84 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ac:	f7ff fb6a 	bl	8000f84 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e199      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d038      	beq.n	8001948 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d019      	beq.n	8001912 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 80018e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e2:	4a15      	ldr	r2, [pc, #84]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff fb4b 	bl	8000f84 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fb47 	bl	8000f84 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e176      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x23a>
 8001910:	e01a      	b.n	8001948 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_RCC_OscConfig+0x280>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191e:	f7ff fb31 	bl	8000f84 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff fb2d 	bl	8000f84 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d903      	bls.n	800193c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e15c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
 8001938:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193c:	4b91      	ldr	r3, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 800193e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1ee      	bne.n	8001926 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80a4 	beq.w	8001a9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10d      	bne.n	800197e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a87      	ldr	r2, [pc, #540]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197a:	2301      	movs	r3, #1
 800197c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197e:	4b82      	ldr	r3, [pc, #520]	; (8001b88 <HAL_RCC_OscConfig+0x4d0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d118      	bne.n	80019bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800198a:	4b7f      	ldr	r3, [pc, #508]	; (8001b88 <HAL_RCC_OscConfig+0x4d0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a7e      	ldr	r2, [pc, #504]	; (8001b88 <HAL_RCC_OscConfig+0x4d0>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001996:	f7ff faf5 	bl	8000f84 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199e:	f7ff faf1 	bl	8000f84 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b64      	cmp	r3, #100	; 0x64
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e120      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b0:	4b75      	ldr	r3, [pc, #468]	; (8001b88 <HAL_RCC_OscConfig+0x4d0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x31a>
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6713      	str	r3, [r2, #112]	; 0x70
 80019d0:	e02d      	b.n	8001a2e <HAL_RCC_OscConfig+0x376>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x33c>
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	4a69      	ldr	r2, [pc, #420]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6713      	str	r3, [r2, #112]	; 0x70
 80019e6:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	4a66      	ldr	r2, [pc, #408]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70
 80019f2:	e01c      	b.n	8001a2e <HAL_RCC_OscConfig+0x376>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d10c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x35e>
 80019fc:	4b61      	ldr	r3, [pc, #388]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	4a60      	ldr	r2, [pc, #384]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6713      	str	r3, [r2, #112]	; 0x70
 8001a08:	4b5e      	ldr	r3, [pc, #376]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4a5d      	ldr	r2, [pc, #372]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
 8001a14:	e00b      	b.n	8001a2e <HAL_RCC_OscConfig+0x376>
 8001a16:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a5a      	ldr	r2, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a57      	ldr	r2, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d015      	beq.n	8001a62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff faa5 	bl	8000f84 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff faa1 	bl	8000f84 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0ce      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ee      	beq.n	8001a3e <HAL_RCC_OscConfig+0x386>
 8001a60:	e014      	b.n	8001a8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fa8f 	bl	8000f84 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fa8b 	bl	8000f84 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0b8      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ee      	bne.n	8001a6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d105      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a92:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80a4 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d06b      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d149      	bne.n	8001b50 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa5c 	bl	8000f84 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff fa58 	bl	8000f84 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e087      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	019b      	lsls	r3, r3, #6
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	085b      	lsrs	r3, r3, #1
 8001b06:	3b01      	subs	r3, #1
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	061b      	lsls	r3, r3, #24
 8001b12:	4313      	orrs	r3, r2
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001b16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fa2c 	bl	8000f84 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff fa28 	bl	8000f84 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e057      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x478>
 8001b4e:	e04f      	b.n	8001bf0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fa12 	bl	8000f84 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff fa0e 	bl	8000f84 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e03d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4ac>
 8001b82:	e035      	b.n	8001bf0 <HAL_RCC_OscConfig+0x538>
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_RCC_OscConfig+0x544>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d028      	beq.n	8001bec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d121      	bne.n	8001bec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d11a      	bne.n	8001bec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d111      	bne.n	8001bec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0d0      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d910      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 020f 	bic.w	r2, r3, #15
 8001c2e:	4965      	ldr	r1, [pc, #404]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b8      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	494d      	ldr	r1, [pc, #308]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d040      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d115      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e073      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06b      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce2:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f023 0203 	bic.w	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4936      	ldr	r1, [pc, #216]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cf4:	f7ff f946 	bl	8000f84 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff f942 	bl	8000f84 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e053      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 020c 	and.w	r2, r3, #12
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1eb      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d210      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 020f 	bic.w	r2, r3, #15
 8001d3a:	4922      	ldr	r1, [pc, #136]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e032      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4916      	ldr	r1, [pc, #88]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d92:	f000 f821 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490a      	ldr	r1, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1cc>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1d4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f8a2 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	08005290 	.word	0x08005290
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	20000008 	.word	0x20000008

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ddc:	b094      	sub	sp, #80	; 0x50
 8001dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
 8001de4:	2300      	movs	r3, #0
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001de8:	2300      	movs	r3, #0
 8001dea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df0:	4b79      	ldr	r3, [pc, #484]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d00d      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x40>
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	f200 80e1 	bhi.w	8001fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x34>
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e0a:	e0db      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001e0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e10:	e0db      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e12:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e16:	e0d8      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e18:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e20:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e22:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d063      	beq.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2e:	4b6a      	ldr	r3, [pc, #424]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	2200      	movs	r2, #0
 8001e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e40:	633b      	str	r3, [r7, #48]	; 0x30
 8001e42:	2300      	movs	r3, #0
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
 8001e46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	462b      	mov	r3, r5
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	0159      	lsls	r1, r3, #5
 8001e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e5c:	0150      	lsls	r0, r2, #5
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4621      	mov	r1, r4
 8001e64:	1a51      	subs	r1, r2, r1
 8001e66:	6139      	str	r1, [r7, #16]
 8001e68:	4629      	mov	r1, r5
 8001e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e7c:	4659      	mov	r1, fp
 8001e7e:	018b      	lsls	r3, r1, #6
 8001e80:	4651      	mov	r1, sl
 8001e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e86:	4651      	mov	r1, sl
 8001e88:	018a      	lsls	r2, r1, #6
 8001e8a:	4651      	mov	r1, sl
 8001e8c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e90:	4659      	mov	r1, fp
 8001e92:	eb63 0901 	sbc.w	r9, r3, r1
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eaa:	4690      	mov	r8, r2
 8001eac:	4699      	mov	r9, r3
 8001eae:	4623      	mov	r3, r4
 8001eb0:	eb18 0303 	adds.w	r3, r8, r3
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	eb49 0303 	adc.w	r3, r9, r3
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eca:	4629      	mov	r1, r5
 8001ecc:	028b      	lsls	r3, r1, #10
 8001ece:	4621      	mov	r1, r4
 8001ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	028a      	lsls	r2, r1, #10
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ee8:	f7fe f9ea 	bl	80002c0 <__aeabi_uldivmod>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef4:	e058      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	099b      	lsrs	r3, r3, #6
 8001efc:	2200      	movs	r2, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	4611      	mov	r1, r2
 8001f02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f10:	4642      	mov	r2, r8
 8001f12:	464b      	mov	r3, r9
 8001f14:	f04f 0000 	mov.w	r0, #0
 8001f18:	f04f 0100 	mov.w	r1, #0
 8001f1c:	0159      	lsls	r1, r3, #5
 8001f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f22:	0150      	lsls	r0, r2, #5
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4641      	mov	r1, r8
 8001f2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f2e:	4649      	mov	r1, r9
 8001f30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f48:	ebb2 040a 	subs.w	r4, r2, sl
 8001f4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	00eb      	lsls	r3, r5, #3
 8001f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f5e:	00e2      	lsls	r2, r4, #3
 8001f60:	4614      	mov	r4, r2
 8001f62:	461d      	mov	r5, r3
 8001f64:	4643      	mov	r3, r8
 8001f66:	18e3      	adds	r3, r4, r3
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	464b      	mov	r3, r9
 8001f6c:	eb45 0303 	adc.w	r3, r5, r3
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f7e:	4629      	mov	r1, r5
 8001f80:	028b      	lsls	r3, r1, #10
 8001f82:	4621      	mov	r1, r4
 8001f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f88:	4621      	mov	r1, r4
 8001f8a:	028a      	lsls	r2, r1, #10
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f92:	2200      	movs	r2, #0
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	61fa      	str	r2, [r7, #28]
 8001f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f9c:	f7fe f990 	bl	80002c0 <__aeabi_uldivmod>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	0c1b      	lsrs	r3, r3, #16
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001fb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fc2:	e002      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001fc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3750      	adds	r7, #80	; 0x50
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	00f42400 	.word	0x00f42400

08001fe0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0a9b      	lsrs	r3, r3, #10
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK1Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	080052a0 	.word	0x080052a0

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002024:	f7ff ffdc 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0b5b      	lsrs	r3, r3, #13
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4903      	ldr	r1, [pc, #12]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	080052a0 	.word	0x080052a0

08002048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d012      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002070:	4b69      	ldr	r3, [pc, #420]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a68      	ldr	r2, [pc, #416]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800207a:	6093      	str	r3, [r2, #8]
 800207c:	4b66      	ldr	r3, [pc, #408]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	4964      	ldr	r1, [pc, #400]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002092:	2301      	movs	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d017      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020a2:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	4959      	ldr	r1, [pc, #356]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020c0:	d101      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d017      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020de:	4b4e      	ldr	r3, [pc, #312]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	494a      	ldr	r1, [pc, #296]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fc:	d101      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020fe:	2301      	movs	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800211a:	2301      	movs	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 808b 	beq.w	8002242 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a39      	ldr	r2, [pc, #228]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
 8002138:	4b37      	ldr	r3, [pc, #220]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a34      	ldr	r2, [pc, #208]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002150:	f7fe ff18 	bl	8000f84 <HAL_GetTick>
 8002154:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002158:	f7fe ff14 	bl	8000f84 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e357      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800216a:	4b2c      	ldr	r3, [pc, #176]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002176:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d035      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d02e      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002194:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a1a      	ldr	r2, [pc, #104]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021b6:	4a18      	ldr	r2, [pc, #96]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021bc:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d114      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fedc 	bl	8000f84 <HAL_GetTick>
 80021cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe fed8 	bl	8000f84 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e319      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0ee      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021fe:	d111      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800220e:	400b      	ands	r3, r1
 8002210:	4901      	ldr	r1, [pc, #4]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
 8002216:	e00b      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002218:	40023800 	.word	0x40023800
 800221c:	40007000 	.word	0x40007000
 8002220:	0ffffcff 	.word	0x0ffffcff
 8002224:	4baa      	ldr	r3, [pc, #680]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4aa9      	ldr	r2, [pc, #676]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800222a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800222e:	6093      	str	r3, [r2, #8]
 8002230:	4ba7      	ldr	r3, [pc, #668]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002232:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223c:	49a4      	ldr	r1, [pc, #656]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800223e:	4313      	orrs	r3, r2
 8002240:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800224e:	4ba0      	ldr	r3, [pc, #640]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002254:	4a9e      	ldr	r2, [pc, #632]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800225a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800225e:	4b9c      	ldr	r3, [pc, #624]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002260:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	4999      	ldr	r1, [pc, #612]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800227c:	4b94      	ldr	r3, [pc, #592]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800228a:	4991      	ldr	r1, [pc, #580]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800229e:	4b8c      	ldr	r3, [pc, #560]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ac:	4988      	ldr	r1, [pc, #544]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c0:	4b83      	ldr	r3, [pc, #524]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ce:	4980      	ldr	r1, [pc, #512]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022e2:	4b7b      	ldr	r3, [pc, #492]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4977      	ldr	r1, [pc, #476]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002304:	4b72      	ldr	r3, [pc, #456]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	496f      	ldr	r1, [pc, #444]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002326:	4b6a      	ldr	r3, [pc, #424]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232c:	f023 020c 	bic.w	r2, r3, #12
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002334:	4966      	ldr	r1, [pc, #408]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002348:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	495e      	ldr	r1, [pc, #376]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800236a:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002378:	4955      	ldr	r1, [pc, #340]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800238c:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	494d      	ldr	r1, [pc, #308]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023ae:	4b48      	ldr	r3, [pc, #288]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	4944      	ldr	r1, [pc, #272]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023d0:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	493c      	ldr	r1, [pc, #240]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002400:	4933      	ldr	r1, [pc, #204]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002414:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002422:	492b      	ldr	r1, [pc, #172]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d011      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002444:	4922      	ldr	r1, [pc, #136]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002454:	d101      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002466:	2301      	movs	r3, #1
 8002468:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002484:	4912      	ldr	r1, [pc, #72]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00b      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a8:	4909      	ldr	r1, [pc, #36]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d006      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80d9 	beq.w	8002676 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024c4:	4b02      	ldr	r3, [pc, #8]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a01      	ldr	r2, [pc, #4]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024ce:	e001      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d6:	f7fe fd55 	bl	8000f84 <HAL_GetTick>
 80024da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024de:	f7fe fd51 	bl	8000f84 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e194      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024f0:	4b6c      	ldr	r3, [pc, #432]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d021      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11d      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002510:	4b64      	ldr	r3, [pc, #400]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002516:	0c1b      	lsrs	r3, r3, #16
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800251e:	4b61      	ldr	r3, [pc, #388]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002524:	0e1b      	lsrs	r3, r3, #24
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	019a      	lsls	r2, r3, #6
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	431a      	orrs	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	061b      	lsls	r3, r3, #24
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	071b      	lsls	r3, r3, #28
 8002544:	4957      	ldr	r1, [pc, #348]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800256a:	2b00      	cmp	r3, #0
 800256c:	d02e      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002576:	d129      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002578:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800257a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257e:	0c1b      	lsrs	r3, r3, #16
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258c:	0f1b      	lsrs	r3, r3, #28
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	019a      	lsls	r2, r3, #6
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	041b      	lsls	r3, r3, #16
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	061b      	lsls	r3, r3, #24
 80025a6:	431a      	orrs	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	071b      	lsls	r3, r3, #28
 80025ac:	493d      	ldr	r1, [pc, #244]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025b4:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ba:	f023 021f 	bic.w	r2, r3, #31
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	3b01      	subs	r3, #1
 80025c4:	4937      	ldr	r1, [pc, #220]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01d      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025d8:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025de:	0e1b      	lsrs	r3, r3, #24
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ec:	0f1b      	lsrs	r3, r3, #28
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	019a      	lsls	r2, r3, #6
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	041b      	lsls	r3, r3, #16
 8002600:	431a      	orrs	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	061b      	lsls	r3, r3, #24
 8002606:	431a      	orrs	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	071b      	lsls	r3, r3, #28
 800260c:	4925      	ldr	r1, [pc, #148]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d011      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	019a      	lsls	r2, r3, #6
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	071b      	lsls	r3, r3, #28
 800263c:	4919      	ldr	r1, [pc, #100]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a16      	ldr	r2, [pc, #88]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800264a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800264e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002650:	f7fe fc98 	bl	8000f84 <HAL_GetTick>
 8002654:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002658:	f7fe fc94 	bl	8000f84 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0d7      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b01      	cmp	r3, #1
 800267a:	f040 80cd 	bne.w	8002818 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268a:	f7fe fc7b 	bl	8000f84 <HAL_GetTick>
 800268e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002690:	e00a      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002692:	f7fe fc77 	bl	8000f84 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b64      	cmp	r3, #100	; 0x64
 800269e:	d903      	bls.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0ba      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80026a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026a8:	4b5e      	ldr	r3, [pc, #376]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026b4:	d0ed      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d02e      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d12a      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026de:	4b51      	ldr	r3, [pc, #324]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026ec:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	0f1b      	lsrs	r3, r3, #28
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	019a      	lsls	r2, r3, #6
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	061b      	lsls	r3, r3, #24
 800270c:	431a      	orrs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	071b      	lsls	r3, r3, #28
 8002712:	4944      	ldr	r1, [pc, #272]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800271a:	4b42      	ldr	r3, [pc, #264]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800271c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002720:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	3b01      	subs	r3, #1
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	493d      	ldr	r1, [pc, #244]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d022      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002748:	d11d      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800274a:	4b36      	ldr	r3, [pc, #216]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	0e1b      	lsrs	r3, r3, #24
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002758:	4b32      	ldr	r3, [pc, #200]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	0f1b      	lsrs	r3, r3, #28
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	019a      	lsls	r2, r3, #6
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	431a      	orrs	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	061b      	lsls	r3, r3, #24
 8002778:	431a      	orrs	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	071b      	lsls	r3, r3, #28
 800277e:	4929      	ldr	r1, [pc, #164]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d028      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	0e1b      	lsrs	r3, r3, #24
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	0c1b      	lsrs	r3, r3, #16
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	019a      	lsls	r2, r3, #6
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	431a      	orrs	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	071b      	lsls	r3, r3, #28
 80027c6:	4917      	ldr	r1, [pc, #92]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	4911      	ldr	r1, [pc, #68]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f0:	f7fe fbc8 	bl	8000f84 <HAL_GetTick>
 80027f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027f8:	f7fe fbc4 	bl	8000f84 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e007      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002816:	d1ef      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3720      	adds	r7, #32
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e049      	b.n	80028ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fa0c 	bl	8000c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	4619      	mov	r1, r3
 8002866:	4610      	mov	r0, r2
 8002868:	f000 faee 	bl	8002e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d001      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e054      	b.n	800299a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a26      	ldr	r2, [pc, #152]	; (80029a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d022      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x80>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291a:	d01d      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x80>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a22      	ldr	r2, [pc, #136]	; (80029ac <HAL_TIM_Base_Start_IT+0xd4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d018      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x80>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a21      	ldr	r2, [pc, #132]	; (80029b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d013      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x80>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00e      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x80>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x80>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <HAL_TIM_Base_Start_IT+0xe4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x80>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d115      	bne.n	8002984 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_TIM_Base_Start_IT+0xec>)
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b06      	cmp	r3, #6
 8002968:	d015      	beq.n	8002996 <HAL_TIM_Base_Start_IT+0xbe>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d011      	beq.n	8002996 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0201 	orr.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	e008      	b.n	8002996 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e000      	b.n	8002998 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800
 80029b4:	40000c00 	.word	0x40000c00
 80029b8:	40010400 	.word	0x40010400
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40001800 	.word	0x40001800
 80029c4:	00010007 	.word	0x00010007

080029c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6a1a      	ldr	r2, [r3, #32]
 80029e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10f      	bne.n	8002a10 <HAL_TIM_Base_Stop_IT+0x48>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6a1a      	ldr	r2, [r3, #32]
 80029f6:	f240 4344 	movw	r3, #1092	; 0x444
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d107      	bne.n	8002a10 <HAL_TIM_Base_Stop_IT+0x48>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d122      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d11b      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f06f 0202 	mvn.w	r2, #2
 8002a52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f9cf 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 8002a6e:	e005      	b.n	8002a7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f9c1 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f9d2 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d122      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d11b      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f06f 0204 	mvn.w	r2, #4
 8002aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f9a5 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 8002ac2:	e005      	b.n	8002ad0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f997 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f9a8 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d122      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d11b      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f06f 0208 	mvn.w	r2, #8
 8002afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2204      	movs	r2, #4
 8002b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f97b 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 8002b16:	e005      	b.n	8002b24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f96d 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f97e 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d122      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d11b      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0210 	mvn.w	r2, #16
 8002b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2208      	movs	r2, #8
 8002b54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f951 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 8002b6a:	e005      	b.n	8002b78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f943 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f954 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d10e      	bne.n	8002baa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0201 	mvn.w	r2, #1
 8002ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7fe f817 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b80      	cmp	r3, #128	; 0x80
 8002bc4:	d107      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fb0b 	bl	80031ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be4:	d10e      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d107      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fafe 	bl	8003200 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f902 	bl	8002e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0220 	mvn.w	r2, #32
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fabe 	bl	80031d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_TIM_ConfigClockSource+0x1c>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0b4      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x186>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	4b56      	ldr	r3, [pc, #344]	; (8002df4 <HAL_TIM_ConfigClockSource+0x190>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb8:	d03e      	beq.n	8002d38 <HAL_TIM_ConfigClockSource+0xd4>
 8002cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cbe:	f200 8087 	bhi.w	8002dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc6:	f000 8086 	beq.w	8002dd6 <HAL_TIM_ConfigClockSource+0x172>
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	d87f      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd0:	2b70      	cmp	r3, #112	; 0x70
 8002cd2:	d01a      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0xa6>
 8002cd4:	2b70      	cmp	r3, #112	; 0x70
 8002cd6:	d87b      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd8:	2b60      	cmp	r3, #96	; 0x60
 8002cda:	d050      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x11a>
 8002cdc:	2b60      	cmp	r3, #96	; 0x60
 8002cde:	d877      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce0:	2b50      	cmp	r3, #80	; 0x50
 8002ce2:	d03c      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0xfa>
 8002ce4:	2b50      	cmp	r3, #80	; 0x50
 8002ce6:	d873      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce8:	2b40      	cmp	r3, #64	; 0x40
 8002cea:	d058      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x13a>
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d86f      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf0:	2b30      	cmp	r3, #48	; 0x30
 8002cf2:	d064      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x15a>
 8002cf4:	2b30      	cmp	r3, #48	; 0x30
 8002cf6:	d86b      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d060      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x15a>
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d867      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d05c      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x15a>
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d05a      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x15a>
 8002d08:	e062      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6899      	ldr	r1, [r3, #8]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f000 f9af 	bl	800307c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	609a      	str	r2, [r3, #8]
      break;
 8002d36:	e04f      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f000 f998 	bl	800307c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d5a:	609a      	str	r2, [r3, #8]
      break;
 8002d5c:	e03c      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f000 f90c 	bl	8002f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2150      	movs	r1, #80	; 0x50
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 f965 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002d7c:	e02c      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f000 f92b 	bl	8002fe6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2160      	movs	r1, #96	; 0x60
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 f955 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002d9c:	e01c      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f000 f8ec 	bl	8002f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2140      	movs	r1, #64	; 0x40
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f945 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002dbc:	e00c      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f000 f93c 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002dce:	e003      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd4:	e000      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	fffeff88 	.word	0xfffeff88

08002df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a40      	ldr	r2, [pc, #256]	; (8002f5c <TIM_Base_SetConfig+0x114>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <TIM_Base_SetConfig+0x40>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e66:	d00f      	beq.n	8002e88 <TIM_Base_SetConfig+0x40>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a3d      	ldr	r2, [pc, #244]	; (8002f60 <TIM_Base_SetConfig+0x118>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00b      	beq.n	8002e88 <TIM_Base_SetConfig+0x40>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3c      	ldr	r2, [pc, #240]	; (8002f64 <TIM_Base_SetConfig+0x11c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d007      	beq.n	8002e88 <TIM_Base_SetConfig+0x40>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3b      	ldr	r2, [pc, #236]	; (8002f68 <TIM_Base_SetConfig+0x120>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d003      	beq.n	8002e88 <TIM_Base_SetConfig+0x40>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a3a      	ldr	r2, [pc, #232]	; (8002f6c <TIM_Base_SetConfig+0x124>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d108      	bne.n	8002e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a2f      	ldr	r2, [pc, #188]	; (8002f5c <TIM_Base_SetConfig+0x114>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d02b      	beq.n	8002efa <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d027      	beq.n	8002efa <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a2c      	ldr	r2, [pc, #176]	; (8002f60 <TIM_Base_SetConfig+0x118>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d023      	beq.n	8002efa <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a2b      	ldr	r2, [pc, #172]	; (8002f64 <TIM_Base_SetConfig+0x11c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01f      	beq.n	8002efa <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a2a      	ldr	r2, [pc, #168]	; (8002f68 <TIM_Base_SetConfig+0x120>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01b      	beq.n	8002efa <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <TIM_Base_SetConfig+0x124>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d017      	beq.n	8002efa <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <TIM_Base_SetConfig+0x128>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <TIM_Base_SetConfig+0x12c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00f      	beq.n	8002efa <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a26      	ldr	r2, [pc, #152]	; (8002f78 <TIM_Base_SetConfig+0x130>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <TIM_Base_SetConfig+0x134>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <TIM_Base_SetConfig+0x138>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a23      	ldr	r2, [pc, #140]	; (8002f84 <TIM_Base_SetConfig+0x13c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d108      	bne.n	8002f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <TIM_Base_SetConfig+0x114>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d003      	beq.n	8002f40 <TIM_Base_SetConfig+0xf8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <TIM_Base_SetConfig+0x124>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d103      	bne.n	8002f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	615a      	str	r2, [r3, #20]
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40000800 	.word	0x40000800
 8002f68:	40000c00 	.word	0x40000c00
 8002f6c:	40010400 	.word	0x40010400
 8002f70:	40014000 	.word	0x40014000
 8002f74:	40014400 	.word	0x40014400
 8002f78:	40014800 	.word	0x40014800
 8002f7c:	40001800 	.word	0x40001800
 8002f80:	40001c00 	.word	0x40001c00
 8002f84:	40002000 	.word	0x40002000

08002f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f023 0201 	bic.w	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f023 030a 	bic.w	r3, r3, #10
 8002fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b087      	sub	sp, #28
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0210 	bic.w	r2, r3, #16
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	031b      	lsls	r3, r3, #12
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003022:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	f043 0307 	orr.w	r3, r3, #7
 8003068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	609a      	str	r2, [r3, #8]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	021a      	lsls	r2, r3, #8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	431a      	orrs	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e06d      	b.n	80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a30      	ldr	r2, [pc, #192]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d004      	beq.n	8003108 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2f      	ldr	r2, [pc, #188]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d108      	bne.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800310e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003120:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a20      	ldr	r2, [pc, #128]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d022      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d01d      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d018      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00e      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10c      	bne.n	800319e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800318a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	4313      	orrs	r3, r2
 8003194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40010400 	.word	0x40010400
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40000800 	.word	0x40000800
 80031cc:	40000c00 	.word	0x40000c00
 80031d0:	40014000 	.word	0x40014000
 80031d4:	40001800 	.word	0x40001800

080031d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e040      	b.n	80032a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd fd3c 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2224      	movs	r2, #36	; 0x24
 8003240:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fbe6 	bl	8003a24 <UART_SetConfig>
 8003258:	4603      	mov	r3, r0
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e022      	b.n	80032a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fe3e 	bl	8003eec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800327e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800328e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fec5 	bl	8004030 <UART_CheckIdleState>
 80032a6:	4603      	mov	r3, r0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d171      	bne.n	80033ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_UART_Transmit+0x24>
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e06a      	b.n	80033ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2221      	movs	r2, #33	; 0x21
 80032e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032e6:	f7fd fe4d 	bl	8000f84 <HAL_GetTick>
 80032ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	88fa      	ldrh	r2, [r7, #6]
 80032f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	88fa      	ldrh	r2, [r7, #6]
 80032f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003304:	d108      	bne.n	8003318 <HAL_UART_Transmit+0x68>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d104      	bne.n	8003318 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	e003      	b.n	8003320 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800331c:	2300      	movs	r3, #0
 800331e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003320:	e02c      	b.n	800337c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2200      	movs	r2, #0
 800332a:	2180      	movs	r1, #128	; 0x80
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 feb6 	bl	800409e <UART_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e038      	b.n	80033ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003350:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	3302      	adds	r3, #2
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	e007      	b.n	800336a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	3301      	adds	r3, #1
 8003368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1cc      	bne.n	8003322 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2200      	movs	r2, #0
 8003390:	2140      	movs	r1, #64	; 0x40
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fe83 	bl	800409e <UART_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e005      	b.n	80033ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e000      	b.n	80033ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
  }
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b08a      	sub	sp, #40	; 0x28
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	4613      	mov	r3, r2
 80033c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d132      	bne.n	8003434 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_UART_Receive_IT+0x24>
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e02b      	b.n	8003436 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d018      	beq.n	8003424 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	623b      	str	r3, [r7, #32]
 8003412:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	69f9      	ldr	r1, [r7, #28]
 8003416:	6a3a      	ldr	r2, [r7, #32]
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	61bb      	str	r3, [r7, #24]
   return(result);
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e6      	bne.n	80033f2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	461a      	mov	r2, r3
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fefe 	bl	800422c <UART_Start_Receive_IT>
 8003430:	4603      	mov	r3, r0
 8003432:	e000      	b.n	8003436 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3728      	adds	r7, #40	; 0x28
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b0ba      	sub	sp, #232	; 0xe8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003466:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800346a:	f640 030f 	movw	r3, #2063	; 0x80f
 800346e:	4013      	ands	r3, r2
 8003470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d115      	bne.n	80034a8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800347c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00f      	beq.n	80034a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8297 	beq.w	80039cc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
      }
      return;
 80034a6:	e291      	b.n	80039cc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8117 	beq.w	80036e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034c2:	4b85      	ldr	r3, [pc, #532]	; (80036d8 <HAL_UART_IRQHandler+0x298>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 810a 	beq.w	80036e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d011      	beq.n	80034fc <HAL_UART_IRQHandler+0xbc>
 80034d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00b      	beq.n	80034fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2201      	movs	r2, #1
 80034ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d011      	beq.n	800352c <HAL_UART_IRQHandler+0xec>
 8003508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00b      	beq.n	800352c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2202      	movs	r2, #2
 800351a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003522:	f043 0204 	orr.w	r2, r3, #4
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800352c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d011      	beq.n	800355c <HAL_UART_IRQHandler+0x11c>
 8003538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00b      	beq.n	800355c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2204      	movs	r2, #4
 800354a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003552:	f043 0202 	orr.w	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800355c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d017      	beq.n	8003598 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003578:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2208      	movs	r2, #8
 8003586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358e:	f043 0208 	orr.w	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d012      	beq.n	80035ca <HAL_UART_IRQHandler+0x18a>
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00c      	beq.n	80035ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 81fd 	beq.w	80039d0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d005      	beq.n	8003622 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800361a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800361e:	2b00      	cmp	r3, #0
 8003620:	d04f      	beq.n	80036c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fec8 	bl	80043b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d141      	bne.n	80036ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800364c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3308      	adds	r3, #8
 800365e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003662:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800366e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800367a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1d9      	bne.n	8003636 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003686:	2b00      	cmp	r3, #0
 8003688:	d013      	beq.n	80036b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368e:	4a13      	ldr	r2, [pc, #76]	; (80036dc <HAL_UART_IRQHandler+0x29c>)
 8003690:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd fe25 	bl	80012e6 <HAL_DMA_Abort_IT>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d017      	beq.n	80036d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036ac:	4610      	mov	r0, r2
 80036ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	e00f      	b.n	80036d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f9a0 	bl	80039f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	e00b      	b.n	80036d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f99c 	bl	80039f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c0:	e007      	b.n	80036d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f998 	bl	80039f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80036d0:	e17e      	b.n	80039d0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d2:	bf00      	nop
    return;
 80036d4:	e17c      	b.n	80039d0 <HAL_UART_IRQHandler+0x590>
 80036d6:	bf00      	nop
 80036d8:	04000120 	.word	0x04000120
 80036dc:	08004481 	.word	0x08004481

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	f040 814c 	bne.w	8003982 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8145 	beq.w	8003982 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 813e 	beq.w	8003982 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2210      	movs	r2, #16
 800370c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	f040 80b6 	bne.w	800388a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800372a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8150 	beq.w	80039d4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800373a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800373e:	429a      	cmp	r2, r3
 8003740:	f080 8148 	bcs.w	80039d4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800374a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003758:	f000 8086 	beq.w	8003868 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003770:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800378a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003792:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800379e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1da      	bne.n	800375c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3308      	adds	r3, #8
 80037ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3308      	adds	r3, #8
 80037c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e1      	bne.n	80037a6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3308      	adds	r3, #8
 80037e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3308      	adds	r3, #8
 8003802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003806:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003808:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800380c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e3      	bne.n	80037e2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003838:	f023 0310 	bic.w	r3, r3, #16
 800383c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800384a:	65bb      	str	r3, [r7, #88]	; 0x58
 800384c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003850:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e4      	bne.n	8003828 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fccf 	bl	8001206 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800387a:	b29b      	uxth	r3, r3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	b29b      	uxth	r3, r3
 8003880:	4619      	mov	r1, r3
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8c2 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003888:	e0a4      	b.n	80039d4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003896:	b29b      	uxth	r3, r3
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8096 	beq.w	80039d8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80038ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8091 	beq.w	80039d8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038d8:	647b      	str	r3, [r7, #68]	; 0x44
 80038da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e4      	bne.n	80038b6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3308      	adds	r3, #8
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	623b      	str	r3, [r7, #32]
   return(result);
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3308      	adds	r3, #8
 800390c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003910:	633a      	str	r2, [r7, #48]	; 0x30
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e3      	bne.n	80038ec <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	60fb      	str	r3, [r7, #12]
   return(result);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f023 0310 	bic.w	r3, r3, #16
 800394c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	69b9      	ldr	r1, [r7, #24]
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	617b      	str	r3, [r7, #20]
   return(result);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e4      	bne.n	8003938 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2202      	movs	r2, #2
 8003972:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f846 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003980:	e02a      	b.n	80039d8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00e      	beq.n	80039ac <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800398e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01c      	beq.n	80039dc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
    }
    return;
 80039aa:	e017      	b.n	80039dc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d012      	beq.n	80039de <HAL_UART_IRQHandler+0x59e>
 80039b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00c      	beq.n	80039de <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fd71 	bl	80044ac <UART_EndTransmit_IT>
    return;
 80039ca:	e008      	b.n	80039de <HAL_UART_IRQHandler+0x59e>
      return;
 80039cc:	bf00      	nop
 80039ce:	e006      	b.n	80039de <HAL_UART_IRQHandler+0x59e>
    return;
 80039d0:	bf00      	nop
 80039d2:	e004      	b.n	80039de <HAL_UART_IRQHandler+0x59e>
      return;
 80039d4:	bf00      	nop
 80039d6:	e002      	b.n	80039de <HAL_UART_IRQHandler+0x59e>
      return;
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <HAL_UART_IRQHandler+0x59e>
    return;
 80039dc:	bf00      	nop
  }

}
 80039de:	37e8      	adds	r7, #232	; 0xe8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4ba6      	ldr	r3, [pc, #664]	; (8003ce8 <UART_SetConfig+0x2c4>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a94      	ldr	r2, [pc, #592]	; (8003cec <UART_SetConfig+0x2c8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d120      	bne.n	8003ae2 <UART_SetConfig+0xbe>
 8003aa0:	4b93      	ldr	r3, [pc, #588]	; (8003cf0 <UART_SetConfig+0x2cc>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d816      	bhi.n	8003adc <UART_SetConfig+0xb8>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <UART_SetConfig+0x90>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003ad1 	.word	0x08003ad1
 8003abc:	08003acb 	.word	0x08003acb
 8003ac0:	08003ad7 	.word	0x08003ad7
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e150      	b.n	8003d6c <UART_SetConfig+0x348>
 8003aca:	2302      	movs	r3, #2
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e14d      	b.n	8003d6c <UART_SetConfig+0x348>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e14a      	b.n	8003d6c <UART_SetConfig+0x348>
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e147      	b.n	8003d6c <UART_SetConfig+0x348>
 8003adc:	2310      	movs	r3, #16
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e144      	b.n	8003d6c <UART_SetConfig+0x348>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a83      	ldr	r2, [pc, #524]	; (8003cf4 <UART_SetConfig+0x2d0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d132      	bne.n	8003b52 <UART_SetConfig+0x12e>
 8003aec:	4b80      	ldr	r3, [pc, #512]	; (8003cf0 <UART_SetConfig+0x2cc>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d828      	bhi.n	8003b4c <UART_SetConfig+0x128>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <UART_SetConfig+0xdc>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b35 	.word	0x08003b35
 8003b04:	08003b4d 	.word	0x08003b4d
 8003b08:	08003b4d 	.word	0x08003b4d
 8003b0c:	08003b4d 	.word	0x08003b4d
 8003b10:	08003b41 	.word	0x08003b41
 8003b14:	08003b4d 	.word	0x08003b4d
 8003b18:	08003b4d 	.word	0x08003b4d
 8003b1c:	08003b4d 	.word	0x08003b4d
 8003b20:	08003b3b 	.word	0x08003b3b
 8003b24:	08003b4d 	.word	0x08003b4d
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b4d 	.word	0x08003b4d
 8003b30:	08003b47 	.word	0x08003b47
 8003b34:	2300      	movs	r3, #0
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e118      	b.n	8003d6c <UART_SetConfig+0x348>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	e115      	b.n	8003d6c <UART_SetConfig+0x348>
 8003b40:	2304      	movs	r3, #4
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e112      	b.n	8003d6c <UART_SetConfig+0x348>
 8003b46:	2308      	movs	r3, #8
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e10f      	b.n	8003d6c <UART_SetConfig+0x348>
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e10c      	b.n	8003d6c <UART_SetConfig+0x348>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a68      	ldr	r2, [pc, #416]	; (8003cf8 <UART_SetConfig+0x2d4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d120      	bne.n	8003b9e <UART_SetConfig+0x17a>
 8003b5c:	4b64      	ldr	r3, [pc, #400]	; (8003cf0 <UART_SetConfig+0x2cc>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b66:	2b30      	cmp	r3, #48	; 0x30
 8003b68:	d013      	beq.n	8003b92 <UART_SetConfig+0x16e>
 8003b6a:	2b30      	cmp	r3, #48	; 0x30
 8003b6c:	d814      	bhi.n	8003b98 <UART_SetConfig+0x174>
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d009      	beq.n	8003b86 <UART_SetConfig+0x162>
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d810      	bhi.n	8003b98 <UART_SetConfig+0x174>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <UART_SetConfig+0x15c>
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d006      	beq.n	8003b8c <UART_SetConfig+0x168>
 8003b7e:	e00b      	b.n	8003b98 <UART_SetConfig+0x174>
 8003b80:	2300      	movs	r3, #0
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e0f2      	b.n	8003d6c <UART_SetConfig+0x348>
 8003b86:	2302      	movs	r3, #2
 8003b88:	77fb      	strb	r3, [r7, #31]
 8003b8a:	e0ef      	b.n	8003d6c <UART_SetConfig+0x348>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e0ec      	b.n	8003d6c <UART_SetConfig+0x348>
 8003b92:	2308      	movs	r3, #8
 8003b94:	77fb      	strb	r3, [r7, #31]
 8003b96:	e0e9      	b.n	8003d6c <UART_SetConfig+0x348>
 8003b98:	2310      	movs	r3, #16
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e0e6      	b.n	8003d6c <UART_SetConfig+0x348>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a56      	ldr	r2, [pc, #344]	; (8003cfc <UART_SetConfig+0x2d8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d120      	bne.n	8003bea <UART_SetConfig+0x1c6>
 8003ba8:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <UART_SetConfig+0x2cc>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003bb4:	d013      	beq.n	8003bde <UART_SetConfig+0x1ba>
 8003bb6:	2bc0      	cmp	r3, #192	; 0xc0
 8003bb8:	d814      	bhi.n	8003be4 <UART_SetConfig+0x1c0>
 8003bba:	2b80      	cmp	r3, #128	; 0x80
 8003bbc:	d009      	beq.n	8003bd2 <UART_SetConfig+0x1ae>
 8003bbe:	2b80      	cmp	r3, #128	; 0x80
 8003bc0:	d810      	bhi.n	8003be4 <UART_SetConfig+0x1c0>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <UART_SetConfig+0x1a8>
 8003bc6:	2b40      	cmp	r3, #64	; 0x40
 8003bc8:	d006      	beq.n	8003bd8 <UART_SetConfig+0x1b4>
 8003bca:	e00b      	b.n	8003be4 <UART_SetConfig+0x1c0>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e0cc      	b.n	8003d6c <UART_SetConfig+0x348>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	77fb      	strb	r3, [r7, #31]
 8003bd6:	e0c9      	b.n	8003d6c <UART_SetConfig+0x348>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e0c6      	b.n	8003d6c <UART_SetConfig+0x348>
 8003bde:	2308      	movs	r3, #8
 8003be0:	77fb      	strb	r3, [r7, #31]
 8003be2:	e0c3      	b.n	8003d6c <UART_SetConfig+0x348>
 8003be4:	2310      	movs	r3, #16
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e0c0      	b.n	8003d6c <UART_SetConfig+0x348>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a44      	ldr	r2, [pc, #272]	; (8003d00 <UART_SetConfig+0x2dc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d125      	bne.n	8003c40 <UART_SetConfig+0x21c>
 8003bf4:	4b3e      	ldr	r3, [pc, #248]	; (8003cf0 <UART_SetConfig+0x2cc>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c02:	d017      	beq.n	8003c34 <UART_SetConfig+0x210>
 8003c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c08:	d817      	bhi.n	8003c3a <UART_SetConfig+0x216>
 8003c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0e:	d00b      	beq.n	8003c28 <UART_SetConfig+0x204>
 8003c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c14:	d811      	bhi.n	8003c3a <UART_SetConfig+0x216>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <UART_SetConfig+0x1fe>
 8003c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1e:	d006      	beq.n	8003c2e <UART_SetConfig+0x20a>
 8003c20:	e00b      	b.n	8003c3a <UART_SetConfig+0x216>
 8003c22:	2300      	movs	r3, #0
 8003c24:	77fb      	strb	r3, [r7, #31]
 8003c26:	e0a1      	b.n	8003d6c <UART_SetConfig+0x348>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e09e      	b.n	8003d6c <UART_SetConfig+0x348>
 8003c2e:	2304      	movs	r3, #4
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e09b      	b.n	8003d6c <UART_SetConfig+0x348>
 8003c34:	2308      	movs	r3, #8
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e098      	b.n	8003d6c <UART_SetConfig+0x348>
 8003c3a:	2310      	movs	r3, #16
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e095      	b.n	8003d6c <UART_SetConfig+0x348>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a2f      	ldr	r2, [pc, #188]	; (8003d04 <UART_SetConfig+0x2e0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d125      	bne.n	8003c96 <UART_SetConfig+0x272>
 8003c4a:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <UART_SetConfig+0x2cc>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c58:	d017      	beq.n	8003c8a <UART_SetConfig+0x266>
 8003c5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c5e:	d817      	bhi.n	8003c90 <UART_SetConfig+0x26c>
 8003c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c64:	d00b      	beq.n	8003c7e <UART_SetConfig+0x25a>
 8003c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6a:	d811      	bhi.n	8003c90 <UART_SetConfig+0x26c>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <UART_SetConfig+0x254>
 8003c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c74:	d006      	beq.n	8003c84 <UART_SetConfig+0x260>
 8003c76:	e00b      	b.n	8003c90 <UART_SetConfig+0x26c>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e076      	b.n	8003d6c <UART_SetConfig+0x348>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e073      	b.n	8003d6c <UART_SetConfig+0x348>
 8003c84:	2304      	movs	r3, #4
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e070      	b.n	8003d6c <UART_SetConfig+0x348>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e06d      	b.n	8003d6c <UART_SetConfig+0x348>
 8003c90:	2310      	movs	r3, #16
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e06a      	b.n	8003d6c <UART_SetConfig+0x348>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <UART_SetConfig+0x2e4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d138      	bne.n	8003d12 <UART_SetConfig+0x2ee>
 8003ca0:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <UART_SetConfig+0x2cc>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cae:	d017      	beq.n	8003ce0 <UART_SetConfig+0x2bc>
 8003cb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cb4:	d82a      	bhi.n	8003d0c <UART_SetConfig+0x2e8>
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	d00b      	beq.n	8003cd4 <UART_SetConfig+0x2b0>
 8003cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc0:	d824      	bhi.n	8003d0c <UART_SetConfig+0x2e8>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <UART_SetConfig+0x2aa>
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cca:	d006      	beq.n	8003cda <UART_SetConfig+0x2b6>
 8003ccc:	e01e      	b.n	8003d0c <UART_SetConfig+0x2e8>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e04b      	b.n	8003d6c <UART_SetConfig+0x348>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e048      	b.n	8003d6c <UART_SetConfig+0x348>
 8003cda:	2304      	movs	r3, #4
 8003cdc:	77fb      	strb	r3, [r7, #31]
 8003cde:	e045      	b.n	8003d6c <UART_SetConfig+0x348>
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e042      	b.n	8003d6c <UART_SetConfig+0x348>
 8003ce6:	bf00      	nop
 8003ce8:	efff69f3 	.word	0xefff69f3
 8003cec:	40011000 	.word	0x40011000
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40004400 	.word	0x40004400
 8003cf8:	40004800 	.word	0x40004800
 8003cfc:	40004c00 	.word	0x40004c00
 8003d00:	40005000 	.word	0x40005000
 8003d04:	40011400 	.word	0x40011400
 8003d08:	40007800 	.word	0x40007800
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e02c      	b.n	8003d6c <UART_SetConfig+0x348>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a72      	ldr	r2, [pc, #456]	; (8003ee0 <UART_SetConfig+0x4bc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d125      	bne.n	8003d68 <UART_SetConfig+0x344>
 8003d1c:	4b71      	ldr	r3, [pc, #452]	; (8003ee4 <UART_SetConfig+0x4c0>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d2a:	d017      	beq.n	8003d5c <UART_SetConfig+0x338>
 8003d2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d30:	d817      	bhi.n	8003d62 <UART_SetConfig+0x33e>
 8003d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d36:	d00b      	beq.n	8003d50 <UART_SetConfig+0x32c>
 8003d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3c:	d811      	bhi.n	8003d62 <UART_SetConfig+0x33e>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <UART_SetConfig+0x326>
 8003d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d46:	d006      	beq.n	8003d56 <UART_SetConfig+0x332>
 8003d48:	e00b      	b.n	8003d62 <UART_SetConfig+0x33e>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e00d      	b.n	8003d6c <UART_SetConfig+0x348>
 8003d50:	2302      	movs	r3, #2
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e00a      	b.n	8003d6c <UART_SetConfig+0x348>
 8003d56:	2304      	movs	r3, #4
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e007      	b.n	8003d6c <UART_SetConfig+0x348>
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e004      	b.n	8003d6c <UART_SetConfig+0x348>
 8003d62:	2310      	movs	r3, #16
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e001      	b.n	8003d6c <UART_SetConfig+0x348>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d74:	d15b      	bne.n	8003e2e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003d76:	7ffb      	ldrb	r3, [r7, #31]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d828      	bhi.n	8003dce <UART_SetConfig+0x3aa>
 8003d7c:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <UART_SetConfig+0x360>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003da9 	.word	0x08003da9
 8003d88:	08003db1 	.word	0x08003db1
 8003d8c:	08003db9 	.word	0x08003db9
 8003d90:	08003dcf 	.word	0x08003dcf
 8003d94:	08003dbf 	.word	0x08003dbf
 8003d98:	08003dcf 	.word	0x08003dcf
 8003d9c:	08003dcf 	.word	0x08003dcf
 8003da0:	08003dcf 	.word	0x08003dcf
 8003da4:	08003dc7 	.word	0x08003dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da8:	f7fe f926 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8003dac:	61b8      	str	r0, [r7, #24]
        break;
 8003dae:	e013      	b.n	8003dd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db0:	f7fe f936 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 8003db4:	61b8      	str	r0, [r7, #24]
        break;
 8003db6:	e00f      	b.n	8003dd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db8:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <UART_SetConfig+0x4c4>)
 8003dba:	61bb      	str	r3, [r7, #24]
        break;
 8003dbc:	e00c      	b.n	8003dd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dbe:	f7fe f80b 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8003dc2:	61b8      	str	r0, [r7, #24]
        break;
 8003dc4:	e008      	b.n	8003dd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dca:	61bb      	str	r3, [r7, #24]
        break;
 8003dcc:	e004      	b.n	8003dd8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	77bb      	strb	r3, [r7, #30]
        break;
 8003dd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d074      	beq.n	8003ec8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	005a      	lsls	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	441a      	add	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b0f      	cmp	r3, #15
 8003df8:	d916      	bls.n	8003e28 <UART_SetConfig+0x404>
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d212      	bcs.n	8003e28 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f023 030f 	bic.w	r3, r3, #15
 8003e0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	89fb      	ldrh	r3, [r7, #14]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	89fa      	ldrh	r2, [r7, #14]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	e04f      	b.n	8003ec8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	77bb      	strb	r3, [r7, #30]
 8003e2c:	e04c      	b.n	8003ec8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e2e:	7ffb      	ldrb	r3, [r7, #31]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d828      	bhi.n	8003e86 <UART_SetConfig+0x462>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x418>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e87 	.word	0x08003e87
 8003e4c:	08003e77 	.word	0x08003e77
 8003e50:	08003e87 	.word	0x08003e87
 8003e54:	08003e87 	.word	0x08003e87
 8003e58:	08003e87 	.word	0x08003e87
 8003e5c:	08003e7f 	.word	0x08003e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7fe f8ca 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8003e64:	61b8      	str	r0, [r7, #24]
        break;
 8003e66:	e013      	b.n	8003e90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e68:	f7fe f8da 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 8003e6c:	61b8      	str	r0, [r7, #24]
        break;
 8003e6e:	e00f      	b.n	8003e90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <UART_SetConfig+0x4c4>)
 8003e72:	61bb      	str	r3, [r7, #24]
        break;
 8003e74:	e00c      	b.n	8003e90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e76:	f7fd ffaf 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8003e7a:	61b8      	str	r0, [r7, #24]
        break;
 8003e7c:	e008      	b.n	8003e90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e82:	61bb      	str	r3, [r7, #24]
        break;
 8003e84:	e004      	b.n	8003e90 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e8e:	bf00      	nop
    }

    if (pclk != 0U)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d018      	beq.n	8003ec8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	085a      	lsrs	r2, r3, #1
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	441a      	add	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b0f      	cmp	r3, #15
 8003eae:	d909      	bls.n	8003ec4 <UART_SetConfig+0x4a0>
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb6:	d205      	bcs.n	8003ec4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	e001      	b.n	8003ec8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ed4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40007c00 	.word	0x40007c00
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	00f42400 	.word	0x00f42400

08003eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01a      	beq.n	8004002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fea:	d10a      	bne.n	8004002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af02      	add	r7, sp, #8
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004040:	f7fc ffa0 	bl	8000f84 <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b08      	cmp	r3, #8
 8004052:	d10e      	bne.n	8004072 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f81b 	bl	800409e <UART_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e011      	b.n	8004096 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b09c      	sub	sp, #112	; 0x70
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	4613      	mov	r3, r2
 80040ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ae:	e0a7      	b.n	8004200 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	f000 80a3 	beq.w	8004200 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fc ff63 	bl	8000f84 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80040ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d13f      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040e4:	667b      	str	r3, [r7, #100]	; 0x64
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e6      	bne.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3308      	adds	r3, #8
 8004108:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	663b      	str	r3, [r7, #96]	; 0x60
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3308      	adds	r3, #8
 8004120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004122:	64ba      	str	r2, [r7, #72]	; 0x48
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e068      	b.n	8004222 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d050      	beq.n	8004200 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416c:	d148      	bne.n	8004200 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004176:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800418c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004196:	637b      	str	r3, [r7, #52]	; 0x34
 8004198:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800419c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e6      	bne.n	8004178 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3308      	adds	r3, #8
 80041b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	613b      	str	r3, [r7, #16]
   return(result);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3308      	adds	r3, #8
 80041c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041ca:	623a      	str	r2, [r7, #32]
 80041cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	69f9      	ldr	r1, [r7, #28]
 80041d0:	6a3a      	ldr	r2, [r7, #32]
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e5      	bne.n	80041aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e010      	b.n	8004222 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	4013      	ands	r3, r2
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	429a      	cmp	r2, r3
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	461a      	mov	r2, r3
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	429a      	cmp	r2, r3
 800421c:	f43f af48 	beq.w	80040b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3770      	adds	r7, #112	; 0x70
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800422c:	b480      	push	{r7}
 800422e:	b097      	sub	sp, #92	; 0x5c
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	4613      	mov	r3, r2
 8004238:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	88fa      	ldrh	r2, [r7, #6]
 8004244:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d10e      	bne.n	800427e <UART_Start_Receive_IT+0x52>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <UART_Start_Receive_IT+0x48>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800426e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004272:	e02d      	b.n	80042d0 <UART_Start_Receive_IT+0xa4>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	22ff      	movs	r2, #255	; 0xff
 8004278:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800427c:	e028      	b.n	80042d0 <UART_Start_Receive_IT+0xa4>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10d      	bne.n	80042a2 <UART_Start_Receive_IT+0x76>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <UART_Start_Receive_IT+0x6c>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	22ff      	movs	r2, #255	; 0xff
 8004292:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004296:	e01b      	b.n	80042d0 <UART_Start_Receive_IT+0xa4>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	227f      	movs	r2, #127	; 0x7f
 800429c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042a0:	e016      	b.n	80042d0 <UART_Start_Receive_IT+0xa4>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042aa:	d10d      	bne.n	80042c8 <UART_Start_Receive_IT+0x9c>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <UART_Start_Receive_IT+0x92>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	227f      	movs	r2, #127	; 0x7f
 80042b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042bc:	e008      	b.n	80042d0 <UART_Start_Receive_IT+0xa4>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	223f      	movs	r2, #63	; 0x3f
 80042c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042c6:	e003      	b.n	80042d0 <UART_Start_Receive_IT+0xa4>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2222      	movs	r2, #34	; 0x22
 80042dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	657b      	str	r3, [r7, #84]	; 0x54
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004300:	64ba      	str	r2, [r7, #72]	; 0x48
 8004302:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800430e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431c:	d107      	bne.n	800432e <UART_Start_Receive_IT+0x102>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d103      	bne.n	800432e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <UART_Start_Receive_IT+0x184>)
 800432a:	669a      	str	r2, [r3, #104]	; 0x68
 800432c:	e002      	b.n	8004334 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <UART_Start_Receive_IT+0x188>)
 8004332:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d019      	beq.n	8004370 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004350:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435a:	637b      	str	r3, [r7, #52]	; 0x34
 800435c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e6      	bne.n	800433c <UART_Start_Receive_IT+0x110>
 800436e:	e018      	b.n	80043a2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	613b      	str	r3, [r7, #16]
   return(result);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f043 0320 	orr.w	r3, r3, #32
 8004384:	653b      	str	r3, [r7, #80]	; 0x50
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800438e:	623b      	str	r3, [r7, #32]
 8004390:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	69f9      	ldr	r1, [r7, #28]
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	61bb      	str	r3, [r7, #24]
   return(result);
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e6      	bne.n	8004370 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	375c      	adds	r7, #92	; 0x5c
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	08004667 	.word	0x08004667
 80043b4:	08004501 	.word	0x08004501

080043b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b095      	sub	sp, #84	; 0x54
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043de:	643b      	str	r3, [r7, #64]	; 0x40
 80043e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e6      	bne.n	80043c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3308      	adds	r3, #8
 80043f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	61fb      	str	r3, [r7, #28]
   return(result);
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	64bb      	str	r3, [r7, #72]	; 0x48
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3308      	adds	r3, #8
 8004410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004412:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e5      	bne.n	80043f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442a:	2b01      	cmp	r3, #1
 800442c:	d118      	bne.n	8004460 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	60bb      	str	r3, [r7, #8]
   return(result);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f023 0310 	bic.w	r3, r3, #16
 8004442:	647b      	str	r3, [r7, #68]	; 0x44
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6979      	ldr	r1, [r7, #20]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	613b      	str	r3, [r7, #16]
   return(result);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e6      	bne.n	800442e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004474:	bf00      	nop
 8004476:	3754      	adds	r7, #84	; 0x54
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7ff faaa 	bl	80039f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	61bb      	str	r3, [r7, #24]
 80044d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	6979      	ldr	r1, [r7, #20]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	613b      	str	r3, [r7, #16]
   return(result);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e6      	bne.n	80044b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fa76 	bl	80039e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f8:	bf00      	nop
 80044fa:	3720      	adds	r7, #32
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b096      	sub	sp, #88	; 0x58
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800450e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004518:	2b22      	cmp	r3, #34	; 0x22
 800451a:	f040 8098 	bne.w	800464e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004528:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800452c:	b2d9      	uxtb	r1, r3
 800452e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004532:	b2da      	uxtb	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	400a      	ands	r2, r1
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d17b      	bne.n	800465e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800457a:	653b      	str	r3, [r7, #80]	; 0x50
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004584:	647b      	str	r3, [r7, #68]	; 0x44
 8004586:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800458a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e6      	bne.n	8004566 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3308      	adds	r3, #8
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	623b      	str	r3, [r7, #32]
   return(result);
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b8:	633a      	str	r2, [r7, #48]	; 0x30
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e5      	bne.n	8004598 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d12e      	bne.n	8004646 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0310 	bic.w	r3, r3, #16
 8004602:	64bb      	str	r3, [r7, #72]	; 0x48
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	69b9      	ldr	r1, [r7, #24]
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	617b      	str	r3, [r7, #20]
   return(result);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e6      	bne.n	80045ee <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f003 0310 	and.w	r3, r3, #16
 800462a:	2b10      	cmp	r3, #16
 800462c:	d103      	bne.n	8004636 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2210      	movs	r2, #16
 8004634:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff f9e4 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004644:	e00b      	b.n	800465e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc fa94 	bl	8000b74 <HAL_UART_RxCpltCallback>
}
 800464c:	e007      	b.n	800465e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0208 	orr.w	r2, r2, #8
 800465c:	619a      	str	r2, [r3, #24]
}
 800465e:	bf00      	nop
 8004660:	3758      	adds	r7, #88	; 0x58
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b096      	sub	sp, #88	; 0x58
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004674:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467e:	2b22      	cmp	r3, #34	; 0x22
 8004680:	f040 8098 	bne.w	80047b4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004694:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004698:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800469c:	4013      	ands	r3, r2
 800469e:	b29a      	uxth	r2, r3
 80046a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a8:	1c9a      	adds	r2, r3, #2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d17b      	bne.n	80047c4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ea:	643b      	str	r3, [r7, #64]	; 0x40
 80046ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e6      	bne.n	80046cc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3308      	adds	r3, #8
 8004704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	61fb      	str	r3, [r7, #28]
   return(result);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	64bb      	str	r3, [r7, #72]	; 0x48
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3308      	adds	r3, #8
 800471c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800471e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004720:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e5      	bne.n	80046fe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	2b01      	cmp	r3, #1
 800474c:	d12e      	bne.n	80047ac <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	60bb      	str	r3, [r7, #8]
   return(result);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f023 0310 	bic.w	r3, r3, #16
 8004768:	647b      	str	r3, [r7, #68]	; 0x44
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6979      	ldr	r1, [r7, #20]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	613b      	str	r3, [r7, #16]
   return(result);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e6      	bne.n	8004754 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b10      	cmp	r3, #16
 8004792:	d103      	bne.n	800479c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2210      	movs	r2, #16
 800479a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff f931 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047aa:	e00b      	b.n	80047c4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fc f9e1 	bl	8000b74 <HAL_UART_RxCpltCallback>
}
 80047b2:	e007      	b.n	80047c4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0208 	orr.w	r2, r2, #8
 80047c2:	619a      	str	r2, [r3, #24]
}
 80047c4:	bf00      	nop
 80047c6:	3758      	adds	r7, #88	; 0x58
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <__errno>:
 80047cc:	4b01      	ldr	r3, [pc, #4]	; (80047d4 <__errno+0x8>)
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20000010 	.word	0x20000010

080047d8 <__libc_init_array>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4d0d      	ldr	r5, [pc, #52]	; (8004810 <__libc_init_array+0x38>)
 80047dc:	4c0d      	ldr	r4, [pc, #52]	; (8004814 <__libc_init_array+0x3c>)
 80047de:	1b64      	subs	r4, r4, r5
 80047e0:	10a4      	asrs	r4, r4, #2
 80047e2:	2600      	movs	r6, #0
 80047e4:	42a6      	cmp	r6, r4
 80047e6:	d109      	bne.n	80047fc <__libc_init_array+0x24>
 80047e8:	4d0b      	ldr	r5, [pc, #44]	; (8004818 <__libc_init_array+0x40>)
 80047ea:	4c0c      	ldr	r4, [pc, #48]	; (800481c <__libc_init_array+0x44>)
 80047ec:	f000 fca4 	bl	8005138 <_init>
 80047f0:	1b64      	subs	r4, r4, r5
 80047f2:	10a4      	asrs	r4, r4, #2
 80047f4:	2600      	movs	r6, #0
 80047f6:	42a6      	cmp	r6, r4
 80047f8:	d105      	bne.n	8004806 <__libc_init_array+0x2e>
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004800:	4798      	blx	r3
 8004802:	3601      	adds	r6, #1
 8004804:	e7ee      	b.n	80047e4 <__libc_init_array+0xc>
 8004806:	f855 3b04 	ldr.w	r3, [r5], #4
 800480a:	4798      	blx	r3
 800480c:	3601      	adds	r6, #1
 800480e:	e7f2      	b.n	80047f6 <__libc_init_array+0x1e>
 8004810:	080052e4 	.word	0x080052e4
 8004814:	080052e4 	.word	0x080052e4
 8004818:	080052e4 	.word	0x080052e4
 800481c:	080052e8 	.word	0x080052e8

08004820 <memset>:
 8004820:	4402      	add	r2, r0
 8004822:	4603      	mov	r3, r0
 8004824:	4293      	cmp	r3, r2
 8004826:	d100      	bne.n	800482a <memset+0xa>
 8004828:	4770      	bx	lr
 800482a:	f803 1b01 	strb.w	r1, [r3], #1
 800482e:	e7f9      	b.n	8004824 <memset+0x4>

08004830 <siprintf>:
 8004830:	b40e      	push	{r1, r2, r3}
 8004832:	b500      	push	{lr}
 8004834:	b09c      	sub	sp, #112	; 0x70
 8004836:	ab1d      	add	r3, sp, #116	; 0x74
 8004838:	9002      	str	r0, [sp, #8]
 800483a:	9006      	str	r0, [sp, #24]
 800483c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004840:	4809      	ldr	r0, [pc, #36]	; (8004868 <siprintf+0x38>)
 8004842:	9107      	str	r1, [sp, #28]
 8004844:	9104      	str	r1, [sp, #16]
 8004846:	4909      	ldr	r1, [pc, #36]	; (800486c <siprintf+0x3c>)
 8004848:	f853 2b04 	ldr.w	r2, [r3], #4
 800484c:	9105      	str	r1, [sp, #20]
 800484e:	6800      	ldr	r0, [r0, #0]
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	a902      	add	r1, sp, #8
 8004854:	f000 f87e 	bl	8004954 <_svfiprintf_r>
 8004858:	9b02      	ldr	r3, [sp, #8]
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	b01c      	add	sp, #112	; 0x70
 8004860:	f85d eb04 	ldr.w	lr, [sp], #4
 8004864:	b003      	add	sp, #12
 8004866:	4770      	bx	lr
 8004868:	20000010 	.word	0x20000010
 800486c:	ffff0208 	.word	0xffff0208

08004870 <strstr>:
 8004870:	780a      	ldrb	r2, [r1, #0]
 8004872:	b570      	push	{r4, r5, r6, lr}
 8004874:	b96a      	cbnz	r2, 8004892 <strstr+0x22>
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	429a      	cmp	r2, r3
 800487a:	d109      	bne.n	8004890 <strstr+0x20>
 800487c:	460c      	mov	r4, r1
 800487e:	4605      	mov	r5, r0
 8004880:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f6      	beq.n	8004876 <strstr+0x6>
 8004888:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800488c:	429e      	cmp	r6, r3
 800488e:	d0f7      	beq.n	8004880 <strstr+0x10>
 8004890:	3001      	adds	r0, #1
 8004892:	7803      	ldrb	r3, [r0, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1ef      	bne.n	8004878 <strstr+0x8>
 8004898:	4618      	mov	r0, r3
 800489a:	e7ec      	b.n	8004876 <strstr+0x6>

0800489c <__ssputs_r>:
 800489c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a0:	688e      	ldr	r6, [r1, #8]
 80048a2:	429e      	cmp	r6, r3
 80048a4:	4682      	mov	sl, r0
 80048a6:	460c      	mov	r4, r1
 80048a8:	4690      	mov	r8, r2
 80048aa:	461f      	mov	r7, r3
 80048ac:	d838      	bhi.n	8004920 <__ssputs_r+0x84>
 80048ae:	898a      	ldrh	r2, [r1, #12]
 80048b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048b4:	d032      	beq.n	800491c <__ssputs_r+0x80>
 80048b6:	6825      	ldr	r5, [r4, #0]
 80048b8:	6909      	ldr	r1, [r1, #16]
 80048ba:	eba5 0901 	sub.w	r9, r5, r1
 80048be:	6965      	ldr	r5, [r4, #20]
 80048c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048c8:	3301      	adds	r3, #1
 80048ca:	444b      	add	r3, r9
 80048cc:	106d      	asrs	r5, r5, #1
 80048ce:	429d      	cmp	r5, r3
 80048d0:	bf38      	it	cc
 80048d2:	461d      	movcc	r5, r3
 80048d4:	0553      	lsls	r3, r2, #21
 80048d6:	d531      	bpl.n	800493c <__ssputs_r+0xa0>
 80048d8:	4629      	mov	r1, r5
 80048da:	f000 fb63 	bl	8004fa4 <_malloc_r>
 80048de:	4606      	mov	r6, r0
 80048e0:	b950      	cbnz	r0, 80048f8 <__ssputs_r+0x5c>
 80048e2:	230c      	movs	r3, #12
 80048e4:	f8ca 3000 	str.w	r3, [sl]
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295
 80048f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f8:	6921      	ldr	r1, [r4, #16]
 80048fa:	464a      	mov	r2, r9
 80048fc:	f000 fabe 	bl	8004e7c <memcpy>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490a:	81a3      	strh	r3, [r4, #12]
 800490c:	6126      	str	r6, [r4, #16]
 800490e:	6165      	str	r5, [r4, #20]
 8004910:	444e      	add	r6, r9
 8004912:	eba5 0509 	sub.w	r5, r5, r9
 8004916:	6026      	str	r6, [r4, #0]
 8004918:	60a5      	str	r5, [r4, #8]
 800491a:	463e      	mov	r6, r7
 800491c:	42be      	cmp	r6, r7
 800491e:	d900      	bls.n	8004922 <__ssputs_r+0x86>
 8004920:	463e      	mov	r6, r7
 8004922:	6820      	ldr	r0, [r4, #0]
 8004924:	4632      	mov	r2, r6
 8004926:	4641      	mov	r1, r8
 8004928:	f000 fab6 	bl	8004e98 <memmove>
 800492c:	68a3      	ldr	r3, [r4, #8]
 800492e:	1b9b      	subs	r3, r3, r6
 8004930:	60a3      	str	r3, [r4, #8]
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	4433      	add	r3, r6
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	2000      	movs	r0, #0
 800493a:	e7db      	b.n	80048f4 <__ssputs_r+0x58>
 800493c:	462a      	mov	r2, r5
 800493e:	f000 fba5 	bl	800508c <_realloc_r>
 8004942:	4606      	mov	r6, r0
 8004944:	2800      	cmp	r0, #0
 8004946:	d1e1      	bne.n	800490c <__ssputs_r+0x70>
 8004948:	6921      	ldr	r1, [r4, #16]
 800494a:	4650      	mov	r0, sl
 800494c:	f000 fabe 	bl	8004ecc <_free_r>
 8004950:	e7c7      	b.n	80048e2 <__ssputs_r+0x46>
	...

08004954 <_svfiprintf_r>:
 8004954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004958:	4698      	mov	r8, r3
 800495a:	898b      	ldrh	r3, [r1, #12]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	b09d      	sub	sp, #116	; 0x74
 8004960:	4607      	mov	r7, r0
 8004962:	460d      	mov	r5, r1
 8004964:	4614      	mov	r4, r2
 8004966:	d50e      	bpl.n	8004986 <_svfiprintf_r+0x32>
 8004968:	690b      	ldr	r3, [r1, #16]
 800496a:	b963      	cbnz	r3, 8004986 <_svfiprintf_r+0x32>
 800496c:	2140      	movs	r1, #64	; 0x40
 800496e:	f000 fb19 	bl	8004fa4 <_malloc_r>
 8004972:	6028      	str	r0, [r5, #0]
 8004974:	6128      	str	r0, [r5, #16]
 8004976:	b920      	cbnz	r0, 8004982 <_svfiprintf_r+0x2e>
 8004978:	230c      	movs	r3, #12
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	e0d1      	b.n	8004b26 <_svfiprintf_r+0x1d2>
 8004982:	2340      	movs	r3, #64	; 0x40
 8004984:	616b      	str	r3, [r5, #20]
 8004986:	2300      	movs	r3, #0
 8004988:	9309      	str	r3, [sp, #36]	; 0x24
 800498a:	2320      	movs	r3, #32
 800498c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004990:	f8cd 800c 	str.w	r8, [sp, #12]
 8004994:	2330      	movs	r3, #48	; 0x30
 8004996:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b40 <_svfiprintf_r+0x1ec>
 800499a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800499e:	f04f 0901 	mov.w	r9, #1
 80049a2:	4623      	mov	r3, r4
 80049a4:	469a      	mov	sl, r3
 80049a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049aa:	b10a      	cbz	r2, 80049b0 <_svfiprintf_r+0x5c>
 80049ac:	2a25      	cmp	r2, #37	; 0x25
 80049ae:	d1f9      	bne.n	80049a4 <_svfiprintf_r+0x50>
 80049b0:	ebba 0b04 	subs.w	fp, sl, r4
 80049b4:	d00b      	beq.n	80049ce <_svfiprintf_r+0x7a>
 80049b6:	465b      	mov	r3, fp
 80049b8:	4622      	mov	r2, r4
 80049ba:	4629      	mov	r1, r5
 80049bc:	4638      	mov	r0, r7
 80049be:	f7ff ff6d 	bl	800489c <__ssputs_r>
 80049c2:	3001      	adds	r0, #1
 80049c4:	f000 80aa 	beq.w	8004b1c <_svfiprintf_r+0x1c8>
 80049c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049ca:	445a      	add	r2, fp
 80049cc:	9209      	str	r2, [sp, #36]	; 0x24
 80049ce:	f89a 3000 	ldrb.w	r3, [sl]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80a2 	beq.w	8004b1c <_svfiprintf_r+0x1c8>
 80049d8:	2300      	movs	r3, #0
 80049da:	f04f 32ff 	mov.w	r2, #4294967295
 80049de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049e2:	f10a 0a01 	add.w	sl, sl, #1
 80049e6:	9304      	str	r3, [sp, #16]
 80049e8:	9307      	str	r3, [sp, #28]
 80049ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049ee:	931a      	str	r3, [sp, #104]	; 0x68
 80049f0:	4654      	mov	r4, sl
 80049f2:	2205      	movs	r2, #5
 80049f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f8:	4851      	ldr	r0, [pc, #324]	; (8004b40 <_svfiprintf_r+0x1ec>)
 80049fa:	f7fb fc11 	bl	8000220 <memchr>
 80049fe:	9a04      	ldr	r2, [sp, #16]
 8004a00:	b9d8      	cbnz	r0, 8004a3a <_svfiprintf_r+0xe6>
 8004a02:	06d0      	lsls	r0, r2, #27
 8004a04:	bf44      	itt	mi
 8004a06:	2320      	movmi	r3, #32
 8004a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a0c:	0711      	lsls	r1, r2, #28
 8004a0e:	bf44      	itt	mi
 8004a10:	232b      	movmi	r3, #43	; 0x2b
 8004a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a16:	f89a 3000 	ldrb.w	r3, [sl]
 8004a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a1c:	d015      	beq.n	8004a4a <_svfiprintf_r+0xf6>
 8004a1e:	9a07      	ldr	r2, [sp, #28]
 8004a20:	4654      	mov	r4, sl
 8004a22:	2000      	movs	r0, #0
 8004a24:	f04f 0c0a 	mov.w	ip, #10
 8004a28:	4621      	mov	r1, r4
 8004a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a2e:	3b30      	subs	r3, #48	; 0x30
 8004a30:	2b09      	cmp	r3, #9
 8004a32:	d94e      	bls.n	8004ad2 <_svfiprintf_r+0x17e>
 8004a34:	b1b0      	cbz	r0, 8004a64 <_svfiprintf_r+0x110>
 8004a36:	9207      	str	r2, [sp, #28]
 8004a38:	e014      	b.n	8004a64 <_svfiprintf_r+0x110>
 8004a3a:	eba0 0308 	sub.w	r3, r0, r8
 8004a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8004a42:	4313      	orrs	r3, r2
 8004a44:	9304      	str	r3, [sp, #16]
 8004a46:	46a2      	mov	sl, r4
 8004a48:	e7d2      	b.n	80049f0 <_svfiprintf_r+0x9c>
 8004a4a:	9b03      	ldr	r3, [sp, #12]
 8004a4c:	1d19      	adds	r1, r3, #4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	9103      	str	r1, [sp, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bfbb      	ittet	lt
 8004a56:	425b      	neglt	r3, r3
 8004a58:	f042 0202 	orrlt.w	r2, r2, #2
 8004a5c:	9307      	strge	r3, [sp, #28]
 8004a5e:	9307      	strlt	r3, [sp, #28]
 8004a60:	bfb8      	it	lt
 8004a62:	9204      	strlt	r2, [sp, #16]
 8004a64:	7823      	ldrb	r3, [r4, #0]
 8004a66:	2b2e      	cmp	r3, #46	; 0x2e
 8004a68:	d10c      	bne.n	8004a84 <_svfiprintf_r+0x130>
 8004a6a:	7863      	ldrb	r3, [r4, #1]
 8004a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a6e:	d135      	bne.n	8004adc <_svfiprintf_r+0x188>
 8004a70:	9b03      	ldr	r3, [sp, #12]
 8004a72:	1d1a      	adds	r2, r3, #4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	9203      	str	r2, [sp, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bfb8      	it	lt
 8004a7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a80:	3402      	adds	r4, #2
 8004a82:	9305      	str	r3, [sp, #20]
 8004a84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b50 <_svfiprintf_r+0x1fc>
 8004a88:	7821      	ldrb	r1, [r4, #0]
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	4650      	mov	r0, sl
 8004a8e:	f7fb fbc7 	bl	8000220 <memchr>
 8004a92:	b140      	cbz	r0, 8004aa6 <_svfiprintf_r+0x152>
 8004a94:	2340      	movs	r3, #64	; 0x40
 8004a96:	eba0 000a 	sub.w	r0, r0, sl
 8004a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8004a9e:	9b04      	ldr	r3, [sp, #16]
 8004aa0:	4303      	orrs	r3, r0
 8004aa2:	3401      	adds	r4, #1
 8004aa4:	9304      	str	r3, [sp, #16]
 8004aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aaa:	4826      	ldr	r0, [pc, #152]	; (8004b44 <_svfiprintf_r+0x1f0>)
 8004aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ab0:	2206      	movs	r2, #6
 8004ab2:	f7fb fbb5 	bl	8000220 <memchr>
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d038      	beq.n	8004b2c <_svfiprintf_r+0x1d8>
 8004aba:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <_svfiprintf_r+0x1f4>)
 8004abc:	bb1b      	cbnz	r3, 8004b06 <_svfiprintf_r+0x1b2>
 8004abe:	9b03      	ldr	r3, [sp, #12]
 8004ac0:	3307      	adds	r3, #7
 8004ac2:	f023 0307 	bic.w	r3, r3, #7
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	9303      	str	r3, [sp, #12]
 8004aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004acc:	4433      	add	r3, r6
 8004ace:	9309      	str	r3, [sp, #36]	; 0x24
 8004ad0:	e767      	b.n	80049a2 <_svfiprintf_r+0x4e>
 8004ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	2001      	movs	r0, #1
 8004ada:	e7a5      	b.n	8004a28 <_svfiprintf_r+0xd4>
 8004adc:	2300      	movs	r3, #0
 8004ade:	3401      	adds	r4, #1
 8004ae0:	9305      	str	r3, [sp, #20]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f04f 0c0a 	mov.w	ip, #10
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aee:	3a30      	subs	r2, #48	; 0x30
 8004af0:	2a09      	cmp	r2, #9
 8004af2:	d903      	bls.n	8004afc <_svfiprintf_r+0x1a8>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0c5      	beq.n	8004a84 <_svfiprintf_r+0x130>
 8004af8:	9105      	str	r1, [sp, #20]
 8004afa:	e7c3      	b.n	8004a84 <_svfiprintf_r+0x130>
 8004afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b00:	4604      	mov	r4, r0
 8004b02:	2301      	movs	r3, #1
 8004b04:	e7f0      	b.n	8004ae8 <_svfiprintf_r+0x194>
 8004b06:	ab03      	add	r3, sp, #12
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	462a      	mov	r2, r5
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <_svfiprintf_r+0x1f8>)
 8004b0e:	a904      	add	r1, sp, #16
 8004b10:	4638      	mov	r0, r7
 8004b12:	f3af 8000 	nop.w
 8004b16:	1c42      	adds	r2, r0, #1
 8004b18:	4606      	mov	r6, r0
 8004b1a:	d1d6      	bne.n	8004aca <_svfiprintf_r+0x176>
 8004b1c:	89ab      	ldrh	r3, [r5, #12]
 8004b1e:	065b      	lsls	r3, r3, #25
 8004b20:	f53f af2c 	bmi.w	800497c <_svfiprintf_r+0x28>
 8004b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b26:	b01d      	add	sp, #116	; 0x74
 8004b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b2c:	ab03      	add	r3, sp, #12
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	462a      	mov	r2, r5
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <_svfiprintf_r+0x1f8>)
 8004b34:	a904      	add	r1, sp, #16
 8004b36:	4638      	mov	r0, r7
 8004b38:	f000 f87a 	bl	8004c30 <_printf_i>
 8004b3c:	e7eb      	b.n	8004b16 <_svfiprintf_r+0x1c2>
 8004b3e:	bf00      	nop
 8004b40:	080052a8 	.word	0x080052a8
 8004b44:	080052b2 	.word	0x080052b2
 8004b48:	00000000 	.word	0x00000000
 8004b4c:	0800489d 	.word	0x0800489d
 8004b50:	080052ae 	.word	0x080052ae

08004b54 <_printf_common>:
 8004b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b58:	4616      	mov	r6, r2
 8004b5a:	4699      	mov	r9, r3
 8004b5c:	688a      	ldr	r2, [r1, #8]
 8004b5e:	690b      	ldr	r3, [r1, #16]
 8004b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b64:	4293      	cmp	r3, r2
 8004b66:	bfb8      	it	lt
 8004b68:	4613      	movlt	r3, r2
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b70:	4607      	mov	r7, r0
 8004b72:	460c      	mov	r4, r1
 8004b74:	b10a      	cbz	r2, 8004b7a <_printf_common+0x26>
 8004b76:	3301      	adds	r3, #1
 8004b78:	6033      	str	r3, [r6, #0]
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	0699      	lsls	r1, r3, #26
 8004b7e:	bf42      	ittt	mi
 8004b80:	6833      	ldrmi	r3, [r6, #0]
 8004b82:	3302      	addmi	r3, #2
 8004b84:	6033      	strmi	r3, [r6, #0]
 8004b86:	6825      	ldr	r5, [r4, #0]
 8004b88:	f015 0506 	ands.w	r5, r5, #6
 8004b8c:	d106      	bne.n	8004b9c <_printf_common+0x48>
 8004b8e:	f104 0a19 	add.w	sl, r4, #25
 8004b92:	68e3      	ldr	r3, [r4, #12]
 8004b94:	6832      	ldr	r2, [r6, #0]
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	42ab      	cmp	r3, r5
 8004b9a:	dc26      	bgt.n	8004bea <_printf_common+0x96>
 8004b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ba0:	1e13      	subs	r3, r2, #0
 8004ba2:	6822      	ldr	r2, [r4, #0]
 8004ba4:	bf18      	it	ne
 8004ba6:	2301      	movne	r3, #1
 8004ba8:	0692      	lsls	r2, r2, #26
 8004baa:	d42b      	bmi.n	8004c04 <_printf_common+0xb0>
 8004bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	47c0      	blx	r8
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	d01e      	beq.n	8004bf8 <_printf_common+0xa4>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	68e5      	ldr	r5, [r4, #12]
 8004bbe:	6832      	ldr	r2, [r6, #0]
 8004bc0:	f003 0306 	and.w	r3, r3, #6
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	bf08      	it	eq
 8004bc8:	1aad      	subeq	r5, r5, r2
 8004bca:	68a3      	ldr	r3, [r4, #8]
 8004bcc:	6922      	ldr	r2, [r4, #16]
 8004bce:	bf0c      	ite	eq
 8004bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bd4:	2500      	movne	r5, #0
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	bfc4      	itt	gt
 8004bda:	1a9b      	subgt	r3, r3, r2
 8004bdc:	18ed      	addgt	r5, r5, r3
 8004bde:	2600      	movs	r6, #0
 8004be0:	341a      	adds	r4, #26
 8004be2:	42b5      	cmp	r5, r6
 8004be4:	d11a      	bne.n	8004c1c <_printf_common+0xc8>
 8004be6:	2000      	movs	r0, #0
 8004be8:	e008      	b.n	8004bfc <_printf_common+0xa8>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4652      	mov	r2, sl
 8004bee:	4649      	mov	r1, r9
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	47c0      	blx	r8
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d103      	bne.n	8004c00 <_printf_common+0xac>
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c00:	3501      	adds	r5, #1
 8004c02:	e7c6      	b.n	8004b92 <_printf_common+0x3e>
 8004c04:	18e1      	adds	r1, r4, r3
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	2030      	movs	r0, #48	; 0x30
 8004c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c0e:	4422      	add	r2, r4
 8004c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c18:	3302      	adds	r3, #2
 8004c1a:	e7c7      	b.n	8004bac <_printf_common+0x58>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4622      	mov	r2, r4
 8004c20:	4649      	mov	r1, r9
 8004c22:	4638      	mov	r0, r7
 8004c24:	47c0      	blx	r8
 8004c26:	3001      	adds	r0, #1
 8004c28:	d0e6      	beq.n	8004bf8 <_printf_common+0xa4>
 8004c2a:	3601      	adds	r6, #1
 8004c2c:	e7d9      	b.n	8004be2 <_printf_common+0x8e>
	...

08004c30 <_printf_i>:
 8004c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c34:	7e0f      	ldrb	r7, [r1, #24]
 8004c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c38:	2f78      	cmp	r7, #120	; 0x78
 8004c3a:	4691      	mov	r9, r2
 8004c3c:	4680      	mov	r8, r0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	469a      	mov	sl, r3
 8004c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c46:	d807      	bhi.n	8004c58 <_printf_i+0x28>
 8004c48:	2f62      	cmp	r7, #98	; 0x62
 8004c4a:	d80a      	bhi.n	8004c62 <_printf_i+0x32>
 8004c4c:	2f00      	cmp	r7, #0
 8004c4e:	f000 80d8 	beq.w	8004e02 <_printf_i+0x1d2>
 8004c52:	2f58      	cmp	r7, #88	; 0x58
 8004c54:	f000 80a3 	beq.w	8004d9e <_printf_i+0x16e>
 8004c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c60:	e03a      	b.n	8004cd8 <_printf_i+0xa8>
 8004c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c66:	2b15      	cmp	r3, #21
 8004c68:	d8f6      	bhi.n	8004c58 <_printf_i+0x28>
 8004c6a:	a101      	add	r1, pc, #4	; (adr r1, 8004c70 <_printf_i+0x40>)
 8004c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c70:	08004cc9 	.word	0x08004cc9
 8004c74:	08004cdd 	.word	0x08004cdd
 8004c78:	08004c59 	.word	0x08004c59
 8004c7c:	08004c59 	.word	0x08004c59
 8004c80:	08004c59 	.word	0x08004c59
 8004c84:	08004c59 	.word	0x08004c59
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004c59 	.word	0x08004c59
 8004c90:	08004c59 	.word	0x08004c59
 8004c94:	08004c59 	.word	0x08004c59
 8004c98:	08004c59 	.word	0x08004c59
 8004c9c:	08004de9 	.word	0x08004de9
 8004ca0:	08004d0d 	.word	0x08004d0d
 8004ca4:	08004dcb 	.word	0x08004dcb
 8004ca8:	08004c59 	.word	0x08004c59
 8004cac:	08004c59 	.word	0x08004c59
 8004cb0:	08004e0b 	.word	0x08004e0b
 8004cb4:	08004c59 	.word	0x08004c59
 8004cb8:	08004d0d 	.word	0x08004d0d
 8004cbc:	08004c59 	.word	0x08004c59
 8004cc0:	08004c59 	.word	0x08004c59
 8004cc4:	08004dd3 	.word	0x08004dd3
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	1d1a      	adds	r2, r3, #4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	602a      	str	r2, [r5, #0]
 8004cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0a3      	b.n	8004e24 <_printf_i+0x1f4>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	6829      	ldr	r1, [r5, #0]
 8004ce0:	0606      	lsls	r6, r0, #24
 8004ce2:	f101 0304 	add.w	r3, r1, #4
 8004ce6:	d50a      	bpl.n	8004cfe <_printf_i+0xce>
 8004ce8:	680e      	ldr	r6, [r1, #0]
 8004cea:	602b      	str	r3, [r5, #0]
 8004cec:	2e00      	cmp	r6, #0
 8004cee:	da03      	bge.n	8004cf8 <_printf_i+0xc8>
 8004cf0:	232d      	movs	r3, #45	; 0x2d
 8004cf2:	4276      	negs	r6, r6
 8004cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf8:	485e      	ldr	r0, [pc, #376]	; (8004e74 <_printf_i+0x244>)
 8004cfa:	230a      	movs	r3, #10
 8004cfc:	e019      	b.n	8004d32 <_printf_i+0x102>
 8004cfe:	680e      	ldr	r6, [r1, #0]
 8004d00:	602b      	str	r3, [r5, #0]
 8004d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d06:	bf18      	it	ne
 8004d08:	b236      	sxthne	r6, r6
 8004d0a:	e7ef      	b.n	8004cec <_printf_i+0xbc>
 8004d0c:	682b      	ldr	r3, [r5, #0]
 8004d0e:	6820      	ldr	r0, [r4, #0]
 8004d10:	1d19      	adds	r1, r3, #4
 8004d12:	6029      	str	r1, [r5, #0]
 8004d14:	0601      	lsls	r1, r0, #24
 8004d16:	d501      	bpl.n	8004d1c <_printf_i+0xec>
 8004d18:	681e      	ldr	r6, [r3, #0]
 8004d1a:	e002      	b.n	8004d22 <_printf_i+0xf2>
 8004d1c:	0646      	lsls	r6, r0, #25
 8004d1e:	d5fb      	bpl.n	8004d18 <_printf_i+0xe8>
 8004d20:	881e      	ldrh	r6, [r3, #0]
 8004d22:	4854      	ldr	r0, [pc, #336]	; (8004e74 <_printf_i+0x244>)
 8004d24:	2f6f      	cmp	r7, #111	; 0x6f
 8004d26:	bf0c      	ite	eq
 8004d28:	2308      	moveq	r3, #8
 8004d2a:	230a      	movne	r3, #10
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d32:	6865      	ldr	r5, [r4, #4]
 8004d34:	60a5      	str	r5, [r4, #8]
 8004d36:	2d00      	cmp	r5, #0
 8004d38:	bfa2      	ittt	ge
 8004d3a:	6821      	ldrge	r1, [r4, #0]
 8004d3c:	f021 0104 	bicge.w	r1, r1, #4
 8004d40:	6021      	strge	r1, [r4, #0]
 8004d42:	b90e      	cbnz	r6, 8004d48 <_printf_i+0x118>
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	d04d      	beq.n	8004de4 <_printf_i+0x1b4>
 8004d48:	4615      	mov	r5, r2
 8004d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d52:	5dc7      	ldrb	r7, [r0, r7]
 8004d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d58:	4637      	mov	r7, r6
 8004d5a:	42bb      	cmp	r3, r7
 8004d5c:	460e      	mov	r6, r1
 8004d5e:	d9f4      	bls.n	8004d4a <_printf_i+0x11a>
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d10b      	bne.n	8004d7c <_printf_i+0x14c>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	07de      	lsls	r6, r3, #31
 8004d68:	d508      	bpl.n	8004d7c <_printf_i+0x14c>
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	6861      	ldr	r1, [r4, #4]
 8004d6e:	4299      	cmp	r1, r3
 8004d70:	bfde      	ittt	le
 8004d72:	2330      	movle	r3, #48	; 0x30
 8004d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d7c:	1b52      	subs	r2, r2, r5
 8004d7e:	6122      	str	r2, [r4, #16]
 8004d80:	f8cd a000 	str.w	sl, [sp]
 8004d84:	464b      	mov	r3, r9
 8004d86:	aa03      	add	r2, sp, #12
 8004d88:	4621      	mov	r1, r4
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	f7ff fee2 	bl	8004b54 <_printf_common>
 8004d90:	3001      	adds	r0, #1
 8004d92:	d14c      	bne.n	8004e2e <_printf_i+0x1fe>
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	b004      	add	sp, #16
 8004d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d9e:	4835      	ldr	r0, [pc, #212]	; (8004e74 <_printf_i+0x244>)
 8004da0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004da4:	6829      	ldr	r1, [r5, #0]
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dac:	6029      	str	r1, [r5, #0]
 8004dae:	061d      	lsls	r5, r3, #24
 8004db0:	d514      	bpl.n	8004ddc <_printf_i+0x1ac>
 8004db2:	07df      	lsls	r7, r3, #31
 8004db4:	bf44      	itt	mi
 8004db6:	f043 0320 	orrmi.w	r3, r3, #32
 8004dba:	6023      	strmi	r3, [r4, #0]
 8004dbc:	b91e      	cbnz	r6, 8004dc6 <_printf_i+0x196>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	f023 0320 	bic.w	r3, r3, #32
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	2310      	movs	r3, #16
 8004dc8:	e7b0      	b.n	8004d2c <_printf_i+0xfc>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	f043 0320 	orr.w	r3, r3, #32
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	2378      	movs	r3, #120	; 0x78
 8004dd4:	4828      	ldr	r0, [pc, #160]	; (8004e78 <_printf_i+0x248>)
 8004dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dda:	e7e3      	b.n	8004da4 <_printf_i+0x174>
 8004ddc:	0659      	lsls	r1, r3, #25
 8004dde:	bf48      	it	mi
 8004de0:	b2b6      	uxthmi	r6, r6
 8004de2:	e7e6      	b.n	8004db2 <_printf_i+0x182>
 8004de4:	4615      	mov	r5, r2
 8004de6:	e7bb      	b.n	8004d60 <_printf_i+0x130>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	6826      	ldr	r6, [r4, #0]
 8004dec:	6961      	ldr	r1, [r4, #20]
 8004dee:	1d18      	adds	r0, r3, #4
 8004df0:	6028      	str	r0, [r5, #0]
 8004df2:	0635      	lsls	r5, r6, #24
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	d501      	bpl.n	8004dfc <_printf_i+0x1cc>
 8004df8:	6019      	str	r1, [r3, #0]
 8004dfa:	e002      	b.n	8004e02 <_printf_i+0x1d2>
 8004dfc:	0670      	lsls	r0, r6, #25
 8004dfe:	d5fb      	bpl.n	8004df8 <_printf_i+0x1c8>
 8004e00:	8019      	strh	r1, [r3, #0]
 8004e02:	2300      	movs	r3, #0
 8004e04:	6123      	str	r3, [r4, #16]
 8004e06:	4615      	mov	r5, r2
 8004e08:	e7ba      	b.n	8004d80 <_printf_i+0x150>
 8004e0a:	682b      	ldr	r3, [r5, #0]
 8004e0c:	1d1a      	adds	r2, r3, #4
 8004e0e:	602a      	str	r2, [r5, #0]
 8004e10:	681d      	ldr	r5, [r3, #0]
 8004e12:	6862      	ldr	r2, [r4, #4]
 8004e14:	2100      	movs	r1, #0
 8004e16:	4628      	mov	r0, r5
 8004e18:	f7fb fa02 	bl	8000220 <memchr>
 8004e1c:	b108      	cbz	r0, 8004e22 <_printf_i+0x1f2>
 8004e1e:	1b40      	subs	r0, r0, r5
 8004e20:	6060      	str	r0, [r4, #4]
 8004e22:	6863      	ldr	r3, [r4, #4]
 8004e24:	6123      	str	r3, [r4, #16]
 8004e26:	2300      	movs	r3, #0
 8004e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e2c:	e7a8      	b.n	8004d80 <_printf_i+0x150>
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	462a      	mov	r2, r5
 8004e32:	4649      	mov	r1, r9
 8004e34:	4640      	mov	r0, r8
 8004e36:	47d0      	blx	sl
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d0ab      	beq.n	8004d94 <_printf_i+0x164>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	079b      	lsls	r3, r3, #30
 8004e40:	d413      	bmi.n	8004e6a <_printf_i+0x23a>
 8004e42:	68e0      	ldr	r0, [r4, #12]
 8004e44:	9b03      	ldr	r3, [sp, #12]
 8004e46:	4298      	cmp	r0, r3
 8004e48:	bfb8      	it	lt
 8004e4a:	4618      	movlt	r0, r3
 8004e4c:	e7a4      	b.n	8004d98 <_printf_i+0x168>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4632      	mov	r2, r6
 8004e52:	4649      	mov	r1, r9
 8004e54:	4640      	mov	r0, r8
 8004e56:	47d0      	blx	sl
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d09b      	beq.n	8004d94 <_printf_i+0x164>
 8004e5c:	3501      	adds	r5, #1
 8004e5e:	68e3      	ldr	r3, [r4, #12]
 8004e60:	9903      	ldr	r1, [sp, #12]
 8004e62:	1a5b      	subs	r3, r3, r1
 8004e64:	42ab      	cmp	r3, r5
 8004e66:	dcf2      	bgt.n	8004e4e <_printf_i+0x21e>
 8004e68:	e7eb      	b.n	8004e42 <_printf_i+0x212>
 8004e6a:	2500      	movs	r5, #0
 8004e6c:	f104 0619 	add.w	r6, r4, #25
 8004e70:	e7f5      	b.n	8004e5e <_printf_i+0x22e>
 8004e72:	bf00      	nop
 8004e74:	080052b9 	.word	0x080052b9
 8004e78:	080052ca 	.word	0x080052ca

08004e7c <memcpy>:
 8004e7c:	440a      	add	r2, r1
 8004e7e:	4291      	cmp	r1, r2
 8004e80:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e84:	d100      	bne.n	8004e88 <memcpy+0xc>
 8004e86:	4770      	bx	lr
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e92:	4291      	cmp	r1, r2
 8004e94:	d1f9      	bne.n	8004e8a <memcpy+0xe>
 8004e96:	bd10      	pop	{r4, pc}

08004e98 <memmove>:
 8004e98:	4288      	cmp	r0, r1
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	eb01 0402 	add.w	r4, r1, r2
 8004ea0:	d902      	bls.n	8004ea8 <memmove+0x10>
 8004ea2:	4284      	cmp	r4, r0
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	d807      	bhi.n	8004eb8 <memmove+0x20>
 8004ea8:	1e43      	subs	r3, r0, #1
 8004eaa:	42a1      	cmp	r1, r4
 8004eac:	d008      	beq.n	8004ec0 <memmove+0x28>
 8004eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eb6:	e7f8      	b.n	8004eaa <memmove+0x12>
 8004eb8:	4402      	add	r2, r0
 8004eba:	4601      	mov	r1, r0
 8004ebc:	428a      	cmp	r2, r1
 8004ebe:	d100      	bne.n	8004ec2 <memmove+0x2a>
 8004ec0:	bd10      	pop	{r4, pc}
 8004ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eca:	e7f7      	b.n	8004ebc <memmove+0x24>

08004ecc <_free_r>:
 8004ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ece:	2900      	cmp	r1, #0
 8004ed0:	d044      	beq.n	8004f5c <_free_r+0x90>
 8004ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ed6:	9001      	str	r0, [sp, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f1a1 0404 	sub.w	r4, r1, #4
 8004ede:	bfb8      	it	lt
 8004ee0:	18e4      	addlt	r4, r4, r3
 8004ee2:	f000 f913 	bl	800510c <__malloc_lock>
 8004ee6:	4a1e      	ldr	r2, [pc, #120]	; (8004f60 <_free_r+0x94>)
 8004ee8:	9801      	ldr	r0, [sp, #4]
 8004eea:	6813      	ldr	r3, [r2, #0]
 8004eec:	b933      	cbnz	r3, 8004efc <_free_r+0x30>
 8004eee:	6063      	str	r3, [r4, #4]
 8004ef0:	6014      	str	r4, [r2, #0]
 8004ef2:	b003      	add	sp, #12
 8004ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ef8:	f000 b90e 	b.w	8005118 <__malloc_unlock>
 8004efc:	42a3      	cmp	r3, r4
 8004efe:	d908      	bls.n	8004f12 <_free_r+0x46>
 8004f00:	6825      	ldr	r5, [r4, #0]
 8004f02:	1961      	adds	r1, r4, r5
 8004f04:	428b      	cmp	r3, r1
 8004f06:	bf01      	itttt	eq
 8004f08:	6819      	ldreq	r1, [r3, #0]
 8004f0a:	685b      	ldreq	r3, [r3, #4]
 8004f0c:	1949      	addeq	r1, r1, r5
 8004f0e:	6021      	streq	r1, [r4, #0]
 8004f10:	e7ed      	b.n	8004eee <_free_r+0x22>
 8004f12:	461a      	mov	r2, r3
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	b10b      	cbz	r3, 8004f1c <_free_r+0x50>
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	d9fa      	bls.n	8004f12 <_free_r+0x46>
 8004f1c:	6811      	ldr	r1, [r2, #0]
 8004f1e:	1855      	adds	r5, r2, r1
 8004f20:	42a5      	cmp	r5, r4
 8004f22:	d10b      	bne.n	8004f3c <_free_r+0x70>
 8004f24:	6824      	ldr	r4, [r4, #0]
 8004f26:	4421      	add	r1, r4
 8004f28:	1854      	adds	r4, r2, r1
 8004f2a:	42a3      	cmp	r3, r4
 8004f2c:	6011      	str	r1, [r2, #0]
 8004f2e:	d1e0      	bne.n	8004ef2 <_free_r+0x26>
 8004f30:	681c      	ldr	r4, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	6053      	str	r3, [r2, #4]
 8004f36:	4421      	add	r1, r4
 8004f38:	6011      	str	r1, [r2, #0]
 8004f3a:	e7da      	b.n	8004ef2 <_free_r+0x26>
 8004f3c:	d902      	bls.n	8004f44 <_free_r+0x78>
 8004f3e:	230c      	movs	r3, #12
 8004f40:	6003      	str	r3, [r0, #0]
 8004f42:	e7d6      	b.n	8004ef2 <_free_r+0x26>
 8004f44:	6825      	ldr	r5, [r4, #0]
 8004f46:	1961      	adds	r1, r4, r5
 8004f48:	428b      	cmp	r3, r1
 8004f4a:	bf04      	itt	eq
 8004f4c:	6819      	ldreq	r1, [r3, #0]
 8004f4e:	685b      	ldreq	r3, [r3, #4]
 8004f50:	6063      	str	r3, [r4, #4]
 8004f52:	bf04      	itt	eq
 8004f54:	1949      	addeq	r1, r1, r5
 8004f56:	6021      	streq	r1, [r4, #0]
 8004f58:	6054      	str	r4, [r2, #4]
 8004f5a:	e7ca      	b.n	8004ef2 <_free_r+0x26>
 8004f5c:	b003      	add	sp, #12
 8004f5e:	bd30      	pop	{r4, r5, pc}
 8004f60:	200001d4 	.word	0x200001d4

08004f64 <sbrk_aligned>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	4e0e      	ldr	r6, [pc, #56]	; (8004fa0 <sbrk_aligned+0x3c>)
 8004f68:	460c      	mov	r4, r1
 8004f6a:	6831      	ldr	r1, [r6, #0]
 8004f6c:	4605      	mov	r5, r0
 8004f6e:	b911      	cbnz	r1, 8004f76 <sbrk_aligned+0x12>
 8004f70:	f000 f8bc 	bl	80050ec <_sbrk_r>
 8004f74:	6030      	str	r0, [r6, #0]
 8004f76:	4621      	mov	r1, r4
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f000 f8b7 	bl	80050ec <_sbrk_r>
 8004f7e:	1c43      	adds	r3, r0, #1
 8004f80:	d00a      	beq.n	8004f98 <sbrk_aligned+0x34>
 8004f82:	1cc4      	adds	r4, r0, #3
 8004f84:	f024 0403 	bic.w	r4, r4, #3
 8004f88:	42a0      	cmp	r0, r4
 8004f8a:	d007      	beq.n	8004f9c <sbrk_aligned+0x38>
 8004f8c:	1a21      	subs	r1, r4, r0
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f000 f8ac 	bl	80050ec <_sbrk_r>
 8004f94:	3001      	adds	r0, #1
 8004f96:	d101      	bne.n	8004f9c <sbrk_aligned+0x38>
 8004f98:	f04f 34ff 	mov.w	r4, #4294967295
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	200001d8 	.word	0x200001d8

08004fa4 <_malloc_r>:
 8004fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa8:	1ccd      	adds	r5, r1, #3
 8004faa:	f025 0503 	bic.w	r5, r5, #3
 8004fae:	3508      	adds	r5, #8
 8004fb0:	2d0c      	cmp	r5, #12
 8004fb2:	bf38      	it	cc
 8004fb4:	250c      	movcc	r5, #12
 8004fb6:	2d00      	cmp	r5, #0
 8004fb8:	4607      	mov	r7, r0
 8004fba:	db01      	blt.n	8004fc0 <_malloc_r+0x1c>
 8004fbc:	42a9      	cmp	r1, r5
 8004fbe:	d905      	bls.n	8004fcc <_malloc_r+0x28>
 8004fc0:	230c      	movs	r3, #12
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	2600      	movs	r6, #0
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fcc:	4e2e      	ldr	r6, [pc, #184]	; (8005088 <_malloc_r+0xe4>)
 8004fce:	f000 f89d 	bl	800510c <__malloc_lock>
 8004fd2:	6833      	ldr	r3, [r6, #0]
 8004fd4:	461c      	mov	r4, r3
 8004fd6:	bb34      	cbnz	r4, 8005026 <_malloc_r+0x82>
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4638      	mov	r0, r7
 8004fdc:	f7ff ffc2 	bl	8004f64 <sbrk_aligned>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	d14d      	bne.n	8005082 <_malloc_r+0xde>
 8004fe6:	6834      	ldr	r4, [r6, #0]
 8004fe8:	4626      	mov	r6, r4
 8004fea:	2e00      	cmp	r6, #0
 8004fec:	d140      	bne.n	8005070 <_malloc_r+0xcc>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	eb04 0803 	add.w	r8, r4, r3
 8004ff8:	f000 f878 	bl	80050ec <_sbrk_r>
 8004ffc:	4580      	cmp	r8, r0
 8004ffe:	d13a      	bne.n	8005076 <_malloc_r+0xd2>
 8005000:	6821      	ldr	r1, [r4, #0]
 8005002:	3503      	adds	r5, #3
 8005004:	1a6d      	subs	r5, r5, r1
 8005006:	f025 0503 	bic.w	r5, r5, #3
 800500a:	3508      	adds	r5, #8
 800500c:	2d0c      	cmp	r5, #12
 800500e:	bf38      	it	cc
 8005010:	250c      	movcc	r5, #12
 8005012:	4629      	mov	r1, r5
 8005014:	4638      	mov	r0, r7
 8005016:	f7ff ffa5 	bl	8004f64 <sbrk_aligned>
 800501a:	3001      	adds	r0, #1
 800501c:	d02b      	beq.n	8005076 <_malloc_r+0xd2>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	442b      	add	r3, r5
 8005022:	6023      	str	r3, [r4, #0]
 8005024:	e00e      	b.n	8005044 <_malloc_r+0xa0>
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	1b52      	subs	r2, r2, r5
 800502a:	d41e      	bmi.n	800506a <_malloc_r+0xc6>
 800502c:	2a0b      	cmp	r2, #11
 800502e:	d916      	bls.n	800505e <_malloc_r+0xba>
 8005030:	1961      	adds	r1, r4, r5
 8005032:	42a3      	cmp	r3, r4
 8005034:	6025      	str	r5, [r4, #0]
 8005036:	bf18      	it	ne
 8005038:	6059      	strne	r1, [r3, #4]
 800503a:	6863      	ldr	r3, [r4, #4]
 800503c:	bf08      	it	eq
 800503e:	6031      	streq	r1, [r6, #0]
 8005040:	5162      	str	r2, [r4, r5]
 8005042:	604b      	str	r3, [r1, #4]
 8005044:	4638      	mov	r0, r7
 8005046:	f104 060b 	add.w	r6, r4, #11
 800504a:	f000 f865 	bl	8005118 <__malloc_unlock>
 800504e:	f026 0607 	bic.w	r6, r6, #7
 8005052:	1d23      	adds	r3, r4, #4
 8005054:	1af2      	subs	r2, r6, r3
 8005056:	d0b6      	beq.n	8004fc6 <_malloc_r+0x22>
 8005058:	1b9b      	subs	r3, r3, r6
 800505a:	50a3      	str	r3, [r4, r2]
 800505c:	e7b3      	b.n	8004fc6 <_malloc_r+0x22>
 800505e:	6862      	ldr	r2, [r4, #4]
 8005060:	42a3      	cmp	r3, r4
 8005062:	bf0c      	ite	eq
 8005064:	6032      	streq	r2, [r6, #0]
 8005066:	605a      	strne	r2, [r3, #4]
 8005068:	e7ec      	b.n	8005044 <_malloc_r+0xa0>
 800506a:	4623      	mov	r3, r4
 800506c:	6864      	ldr	r4, [r4, #4]
 800506e:	e7b2      	b.n	8004fd6 <_malloc_r+0x32>
 8005070:	4634      	mov	r4, r6
 8005072:	6876      	ldr	r6, [r6, #4]
 8005074:	e7b9      	b.n	8004fea <_malloc_r+0x46>
 8005076:	230c      	movs	r3, #12
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	4638      	mov	r0, r7
 800507c:	f000 f84c 	bl	8005118 <__malloc_unlock>
 8005080:	e7a1      	b.n	8004fc6 <_malloc_r+0x22>
 8005082:	6025      	str	r5, [r4, #0]
 8005084:	e7de      	b.n	8005044 <_malloc_r+0xa0>
 8005086:	bf00      	nop
 8005088:	200001d4 	.word	0x200001d4

0800508c <_realloc_r>:
 800508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005090:	4680      	mov	r8, r0
 8005092:	4614      	mov	r4, r2
 8005094:	460e      	mov	r6, r1
 8005096:	b921      	cbnz	r1, 80050a2 <_realloc_r+0x16>
 8005098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800509c:	4611      	mov	r1, r2
 800509e:	f7ff bf81 	b.w	8004fa4 <_malloc_r>
 80050a2:	b92a      	cbnz	r2, 80050b0 <_realloc_r+0x24>
 80050a4:	f7ff ff12 	bl	8004ecc <_free_r>
 80050a8:	4625      	mov	r5, r4
 80050aa:	4628      	mov	r0, r5
 80050ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b0:	f000 f838 	bl	8005124 <_malloc_usable_size_r>
 80050b4:	4284      	cmp	r4, r0
 80050b6:	4607      	mov	r7, r0
 80050b8:	d802      	bhi.n	80050c0 <_realloc_r+0x34>
 80050ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050be:	d812      	bhi.n	80050e6 <_realloc_r+0x5a>
 80050c0:	4621      	mov	r1, r4
 80050c2:	4640      	mov	r0, r8
 80050c4:	f7ff ff6e 	bl	8004fa4 <_malloc_r>
 80050c8:	4605      	mov	r5, r0
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d0ed      	beq.n	80050aa <_realloc_r+0x1e>
 80050ce:	42bc      	cmp	r4, r7
 80050d0:	4622      	mov	r2, r4
 80050d2:	4631      	mov	r1, r6
 80050d4:	bf28      	it	cs
 80050d6:	463a      	movcs	r2, r7
 80050d8:	f7ff fed0 	bl	8004e7c <memcpy>
 80050dc:	4631      	mov	r1, r6
 80050de:	4640      	mov	r0, r8
 80050e0:	f7ff fef4 	bl	8004ecc <_free_r>
 80050e4:	e7e1      	b.n	80050aa <_realloc_r+0x1e>
 80050e6:	4635      	mov	r5, r6
 80050e8:	e7df      	b.n	80050aa <_realloc_r+0x1e>
	...

080050ec <_sbrk_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4d06      	ldr	r5, [pc, #24]	; (8005108 <_sbrk_r+0x1c>)
 80050f0:	2300      	movs	r3, #0
 80050f2:	4604      	mov	r4, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	602b      	str	r3, [r5, #0]
 80050f8:	f7fb fe82 	bl	8000e00 <_sbrk>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_sbrk_r+0x1a>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	b103      	cbz	r3, 8005106 <_sbrk_r+0x1a>
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	200001dc 	.word	0x200001dc

0800510c <__malloc_lock>:
 800510c:	4801      	ldr	r0, [pc, #4]	; (8005114 <__malloc_lock+0x8>)
 800510e:	f000 b811 	b.w	8005134 <__retarget_lock_acquire_recursive>
 8005112:	bf00      	nop
 8005114:	200001e0 	.word	0x200001e0

08005118 <__malloc_unlock>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__malloc_unlock+0x8>)
 800511a:	f000 b80c 	b.w	8005136 <__retarget_lock_release_recursive>
 800511e:	bf00      	nop
 8005120:	200001e0 	.word	0x200001e0

08005124 <_malloc_usable_size_r>:
 8005124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005128:	1f18      	subs	r0, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	bfbc      	itt	lt
 800512e:	580b      	ldrlt	r3, [r1, r0]
 8005130:	18c0      	addlt	r0, r0, r3
 8005132:	4770      	bx	lr

08005134 <__retarget_lock_acquire_recursive>:
 8005134:	4770      	bx	lr

08005136 <__retarget_lock_release_recursive>:
 8005136:	4770      	bx	lr

08005138 <_init>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	bf00      	nop
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr

08005144 <_fini>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	bf00      	nop
 8005148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514a:	bc08      	pop	{r3}
 800514c:	469e      	mov	lr, r3
 800514e:	4770      	bx	lr
