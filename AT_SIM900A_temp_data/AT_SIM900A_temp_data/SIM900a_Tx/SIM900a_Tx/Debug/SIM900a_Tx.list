
SIM900a_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008948  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08008b18  08008b18  00018b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009044  08009044  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009044  08009044  00019044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800904c  0800904c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800904c  0800904c  0001904c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009050  08009050  00019050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001e0  08009234  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08009234  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011426  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002139  00000000  00000000  00031636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  000345e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027423  00000000  00000000  00035388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a63  00000000  00000000  0005c7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6a25  00000000  00000000  0006e20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164c33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f1c  00000000  00000000  00164c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b00 	.word	0x08008b00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08008b00 	.word	0x08008b00

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0000      	movs	r0, r0
	...

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f000 fe1a 	bl	8001bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 fa21 	bl	80013e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 fb57 	bl	8001650 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fa2:	f000 fb25 	bl	80015f0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000fa6:	f000 fad5 	bl	8001554 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000faa:	f000 fa7f 	bl	80014ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart3, &response, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	498f      	ldr	r1, [pc, #572]	; (80011f0 <main+0x260>)
 8000fb2:	4890      	ldr	r0, [pc, #576]	; (80011f4 <main+0x264>)
 8000fb4:	f003 fc6f 	bl	8004896 <HAL_UART_Receive_IT>
	  HAL_ADC_Start(&hadc1);
 8000fb8:	488f      	ldr	r0, [pc, #572]	; (80011f8 <main+0x268>)
 8000fba:	f000 fecd 	bl	8001d58 <HAL_ADC_Start>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000fbe:	2164      	movs	r1, #100	; 0x64
 8000fc0:	488d      	ldr	r0, [pc, #564]	; (80011f8 <main+0x268>)
 8000fc2:	f000 ff97 	bl	8001ef4 <HAL_ADC_PollForConversion>
	  readvalue= HAL_ADC_GetValue(&hadc1);
 8000fc6:	488c      	ldr	r0, [pc, #560]	; (80011f8 <main+0x268>)
 8000fc8:	f001 f81f 	bl	800200a <HAL_ADC_GetValue>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b8a      	ldr	r3, [pc, #552]	; (80011fc <main+0x26c>)
 8000fd2:	801a      	strh	r2, [r3, #0]
	  Vsense= (float)readvalue *3.3/(4095);
 8000fd4:	4b89      	ldr	r3, [pc, #548]	; (80011fc <main+0x26c>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe0:	ee17 0a90 	vmov	r0, s15
 8000fe4:	f7ff fad0 	bl	8000588 <__aeabi_f2d>
 8000fe8:	a379      	add	r3, pc, #484	; (adr r3, 80011d0 <main+0x240>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	a377      	add	r3, pc, #476	; (adr r3, 80011d8 <main+0x248>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fc44 	bl	800088c <__aeabi_ddiv>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fdec 	bl	8000be8 <__aeabi_d2f>
 8001010:	4603      	mov	r3, r0
 8001012:	4a7b      	ldr	r2, [pc, #492]	; (8001200 <main+0x270>)
 8001014:	6013      	str	r3, [r2, #0]
	  T_celsius= (((Vsense-.76)/0.0025)+25);
 8001016:	4b7a      	ldr	r3, [pc, #488]	; (8001200 <main+0x270>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fab4 	bl	8000588 <__aeabi_f2d>
 8001020:	a36f      	add	r3, pc, #444	; (adr r3, 80011e0 <main+0x250>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff f94f 	bl	80002c8 <__aeabi_dsub>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	a36d      	add	r3, pc, #436	; (adr r3, 80011e8 <main+0x258>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff fc28 	bl	800088c <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b6e      	ldr	r3, [pc, #440]	; (8001204 <main+0x274>)
 800104a:	f7ff f93f 	bl	80002cc <__adddf3>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fdc7 	bl	8000be8 <__aeabi_d2f>
 800105a:	4603      	mov	r3, r0
 800105c:	4a6a      	ldr	r2, [pc, #424]	; (8001208 <main+0x278>)
 800105e:	6013      	str	r3, [r2, #0]



	  switch(new_state)
 8001060:	4b6a      	ldr	r3, [pc, #424]	; (800120c <main+0x27c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	3b01      	subs	r3, #1
 8001066:	2b0b      	cmp	r3, #11
 8001068:	f200 80f6 	bhi.w	8001258 <main+0x2c8>
 800106c:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <main+0xe4>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	080010a5 	.word	0x080010a5
 8001078:	080010bd 	.word	0x080010bd
 800107c:	080010d5 	.word	0x080010d5
 8001080:	080010ed 	.word	0x080010ed
 8001084:	08001105 	.word	0x08001105
 8001088:	0800111d 	.word	0x0800111d
 800108c:	08001135 	.word	0x08001135
 8001090:	0800114d 	.word	0x0800114d
 8001094:	08001165 	.word	0x08001165
 8001098:	0800117d 	.word	0x0800117d
 800109c:	08001195 	.word	0x08001195
 80010a0:	08001241 	.word	0x08001241
	  {
	   case 1:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT\r\n", 4, 1000);
 80010a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a8:	2204      	movs	r2, #4
 80010aa:	4959      	ldr	r1, [pc, #356]	; (8001210 <main+0x280>)
 80010ac:	4851      	ldr	r0, [pc, #324]	; (80011f4 <main+0x264>)
 80010ae:	f003 fb6f 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 80010b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b6:	f000 fde7 	bl	8001c88 <HAL_Delay>
	   break;
 80010ba:	e0cd      	b.n	8001258 <main+0x2c8>
	   case 2:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CPIN?\r\n", 10, 1000);
 80010bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c0:	220a      	movs	r2, #10
 80010c2:	4954      	ldr	r1, [pc, #336]	; (8001214 <main+0x284>)
 80010c4:	484b      	ldr	r0, [pc, #300]	; (80011f4 <main+0x264>)
 80010c6:	f003 fb63 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 80010ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ce:	f000 fddb 	bl	8001c88 <HAL_Delay>
	   break;
 80010d2:	e0c1      	b.n	8001258 <main+0x2c8>
	   case 3:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CREG?\r\n", 10, 1000);
 80010d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d8:	220a      	movs	r2, #10
 80010da:	494f      	ldr	r1, [pc, #316]	; (8001218 <main+0x288>)
 80010dc:	4845      	ldr	r0, [pc, #276]	; (80011f4 <main+0x264>)
 80010de:	f003 fb57 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 80010e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e6:	f000 fdcf 	bl	8001c88 <HAL_Delay>
	   break;
 80010ea:	e0b5      	b.n	8001258 <main+0x2c8>
	   case 4:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIPMUX=0\r\n", 13, 1000);
 80010ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f0:	220d      	movs	r2, #13
 80010f2:	494a      	ldr	r1, [pc, #296]	; (800121c <main+0x28c>)
 80010f4:	483f      	ldr	r0, [pc, #252]	; (80011f4 <main+0x264>)
 80010f6:	f003 fb4b 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 80010fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fe:	f000 fdc3 	bl	8001c88 <HAL_Delay>
	   break;
 8001102:	e0a9      	b.n	8001258 <main+0x2c8>
	   case 5:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CGATT=1\r\n", 12, 1000);
 8001104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001108:	220c      	movs	r2, #12
 800110a:	4945      	ldr	r1, [pc, #276]	; (8001220 <main+0x290>)
 800110c:	4839      	ldr	r0, [pc, #228]	; (80011f4 <main+0x264>)
 800110e:	f003 fb3f 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(2000);
 8001112:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001116:	f000 fdb7 	bl	8001c88 <HAL_Delay>
	   break;
 800111a:	e09d      	b.n	8001258 <main+0x2c8>
	   case 6:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CSTT=\"airtelgprs.com\","",""\r\n",32, 1000);
 800111c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001120:	2220      	movs	r2, #32
 8001122:	4940      	ldr	r1, [pc, #256]	; (8001224 <main+0x294>)
 8001124:	4833      	ldr	r0, [pc, #204]	; (80011f4 <main+0x264>)
 8001126:	f003 fb33 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 800112a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112e:	f000 fdab 	bl	8001c88 <HAL_Delay>
	   break;
 8001132:	e091      	b.n	8001258 <main+0x2c8>
	   case 7:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIICR\r\n", 10, 1000);
 8001134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001138:	220a      	movs	r2, #10
 800113a:	493b      	ldr	r1, [pc, #236]	; (8001228 <main+0x298>)
 800113c:	482d      	ldr	r0, [pc, #180]	; (80011f4 <main+0x264>)
 800113e:	f003 fb27 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 8001142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001146:	f000 fd9f 	bl	8001c88 <HAL_Delay>
	   break;
 800114a:	e085      	b.n	8001258 <main+0x2c8>
	   case 8:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIFSR\r\n", 10, 1000);
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	220a      	movs	r2, #10
 8001152:	4936      	ldr	r1, [pc, #216]	; (800122c <main+0x29c>)
 8001154:	4827      	ldr	r0, [pc, #156]	; (80011f4 <main+0x264>)
 8001156:	f003 fb1b 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f000 fd93 	bl	8001c88 <HAL_Delay>
	   break;
 8001162:	e079      	b.n	8001258 <main+0x2c8>
	   case 9:
//	   sprintf (connection,"AT+CIPSTART=\"TCP\",\"143.244.133.98\",\"8000\"\r\n",TCP_buffer);
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIPSTART=\"TCP\",\"143.244.133.98\",\"8000\"\r\n",43, 1000);
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	222b      	movs	r2, #43	; 0x2b
 800116a:	4931      	ldr	r1, [pc, #196]	; (8001230 <main+0x2a0>)
 800116c:	4821      	ldr	r0, [pc, #132]	; (80011f4 <main+0x264>)
 800116e:	f003 fb0f 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 8001172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001176:	f000 fd87 	bl	8001c88 <HAL_Delay>
	   break;
 800117a:	e06d      	b.n	8001258 <main+0x2c8>
	   case 10:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIPSEND\r\n", 12, 1000);
 800117c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001180:	220c      	movs	r2, #12
 8001182:	492c      	ldr	r1, [pc, #176]	; (8001234 <main+0x2a4>)
 8001184:	481b      	ldr	r0, [pc, #108]	; (80011f4 <main+0x264>)
 8001186:	f003 fb03 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 800118a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800118e:	f000 fd7b 	bl	8001c88 <HAL_Delay>
	   break;
 8001192:	e061      	b.n	8001258 <main+0x2c8>
	   case 11:
	   sprintf(buffer,"%f%c\r\n",T_celsius,CTRL_Z);
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <main+0x278>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9f5 	bl	8000588 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	211a      	movs	r1, #26
 80011a4:	9100      	str	r1, [sp, #0]
 80011a6:	4924      	ldr	r1, [pc, #144]	; (8001238 <main+0x2a8>)
 80011a8:	4824      	ldr	r0, [pc, #144]	; (800123c <main+0x2ac>)
 80011aa:	f005 fa1b 	bl	80065e4 <siprintf>
	   HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer),1000);
 80011ae:	4823      	ldr	r0, [pc, #140]	; (800123c <main+0x2ac>)
 80011b0:	f7ff f82e 	bl	8000210 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011bc:	491f      	ldr	r1, [pc, #124]	; (800123c <main+0x2ac>)
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <main+0x264>)
 80011c0:	f003 fae6 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 80011c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c8:	f000 fd5e 	bl	8001c88 <HAL_Delay>
	   break;
 80011cc:	e044      	b.n	8001258 <main+0x2c8>
 80011ce:	bf00      	nop
 80011d0:	66666666 	.word	0x66666666
 80011d4:	400a6666 	.word	0x400a6666
 80011d8:	00000000 	.word	0x00000000
 80011dc:	40affe00 	.word	0x40affe00
 80011e0:	851eb852 	.word	0x851eb852
 80011e4:	3fe851eb 	.word	0x3fe851eb
 80011e8:	47ae147b 	.word	0x47ae147b
 80011ec:	3f647ae1 	.word	0x3f647ae1
 80011f0:	20000318 	.word	0x20000318
 80011f4:	20000290 	.word	0x20000290
 80011f8:	200001fc 	.word	0x200001fc
 80011fc:	2000036e 	.word	0x2000036e
 8001200:	20000374 	.word	0x20000374
 8001204:	40390000 	.word	0x40390000
 8001208:	20000370 	.word	0x20000370
 800120c:	20000000 	.word	0x20000000
 8001210:	08008b18 	.word	0x08008b18
 8001214:	08008b20 	.word	0x08008b20
 8001218:	08008b2c 	.word	0x08008b2c
 800121c:	08008b38 	.word	0x08008b38
 8001220:	08008b48 	.word	0x08008b48
 8001224:	08008b58 	.word	0x08008b58
 8001228:	08008b78 	.word	0x08008b78
 800122c:	08008b84 	.word	0x08008b84
 8001230:	08008b90 	.word	0x08008b90
 8001234:	08008bbc 	.word	0x08008bbc
 8001238:	08008bcc 	.word	0x08008bcc
 800123c:	20000378 	.word	0x20000378
	   case 12:
	   HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIPCLOSE\r\n", 13,1000);
 8001240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001244:	220d      	movs	r2, #13
 8001246:	4956      	ldr	r1, [pc, #344]	; (80013a0 <main+0x410>)
 8001248:	4856      	ldr	r0, [pc, #344]	; (80013a4 <main+0x414>)
 800124a:	f003 faa1 	bl	8004790 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 800124e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001252:	f000 fd19 	bl	8001c88 <HAL_Delay>
	   break;
 8001256:	bf00      	nop

	  }
//	  memset(store, '\0' , 50);


  if(send_flag)
 8001258:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <main+0x418>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	f43f aeae 	beq.w	8000fbe <main+0x2e>
  {
	 if(strstr((char*)store,"OK")&& (new_state=1))
 8001262:	4952      	ldr	r1, [pc, #328]	; (80013ac <main+0x41c>)
 8001264:	4852      	ldr	r0, [pc, #328]	; (80013b0 <main+0x420>)
 8001266:	f005 f9dd 	bl	8006624 <strstr>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <main+0x2ec>
 8001270:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <main+0x424>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
	  {
 		        new_state=2;
 8001276:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <main+0x424>)
 8001278:	2202      	movs	r2, #2
 800127a:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"READY")&& (new_state=2))
 800127c:	494e      	ldr	r1, [pc, #312]	; (80013b8 <main+0x428>)
 800127e:	484c      	ldr	r0, [pc, #304]	; (80013b0 <main+0x420>)
 8001280:	f005 f9d0 	bl	8006624 <strstr>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <main+0x306>
 800128a:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <main+0x424>)
 800128c:	2202      	movs	r2, #2
 800128e:	701a      	strb	r2, [r3, #0]
	  {
	 	        new_state=3;
 8001290:	4b48      	ldr	r3, [pc, #288]	; (80013b4 <main+0x424>)
 8001292:	2203      	movs	r2, #3
 8001294:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"+CREG: 0,5")&& (new_state=3))
 8001296:	4949      	ldr	r1, [pc, #292]	; (80013bc <main+0x42c>)
 8001298:	4845      	ldr	r0, [pc, #276]	; (80013b0 <main+0x420>)
 800129a:	f005 f9c3 	bl	8006624 <strstr>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <main+0x320>
 80012a4:	4b43      	ldr	r3, [pc, #268]	; (80013b4 <main+0x424>)
 80012a6:	2203      	movs	r2, #3
 80012a8:	701a      	strb	r2, [r3, #0]
	  {
	 	 	    new_state=4;
 80012aa:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <main+0x424>)
 80012ac:	2204      	movs	r2, #4
 80012ae:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"CIPMUX=0")&& (new_state=4))
 80012b0:	4943      	ldr	r1, [pc, #268]	; (80013c0 <main+0x430>)
 80012b2:	483f      	ldr	r0, [pc, #252]	; (80013b0 <main+0x420>)
 80012b4:	f005 f9b6 	bl	8006624 <strstr>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <main+0x33a>
 80012be:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <main+0x424>)
 80012c0:	2204      	movs	r2, #4
 80012c2:	701a      	strb	r2, [r3, #0]
	  {
	 	 	    new_state=5;
 80012c4:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <main+0x424>)
 80012c6:	2205      	movs	r2, #5
 80012c8:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"CGATT=1")&& (new_state=5))
 80012ca:	493e      	ldr	r1, [pc, #248]	; (80013c4 <main+0x434>)
 80012cc:	4838      	ldr	r0, [pc, #224]	; (80013b0 <main+0x420>)
 80012ce:	f005 f9a9 	bl	8006624 <strstr>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <main+0x354>
 80012d8:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <main+0x424>)
 80012da:	2205      	movs	r2, #5
 80012dc:	701a      	strb	r2, [r3, #0]
	  {
	 	 	 	new_state=6;
 80012de:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <main+0x424>)
 80012e0:	2206      	movs	r2, #6
 80012e2:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"OK")&& (new_state=6))
 80012e4:	4931      	ldr	r1, [pc, #196]	; (80013ac <main+0x41c>)
 80012e6:	4832      	ldr	r0, [pc, #200]	; (80013b0 <main+0x420>)
 80012e8:	f005 f99c 	bl	8006624 <strstr>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d005      	beq.n	80012fe <main+0x36e>
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <main+0x424>)
 80012f4:	2206      	movs	r2, #6
 80012f6:	701a      	strb	r2, [r3, #0]
	  {
	 	 	 	new_state=7;
 80012f8:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <main+0x424>)
 80012fa:	2207      	movs	r2, #7
 80012fc:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"AT+CIICR")&& (new_state=7))
 80012fe:	4932      	ldr	r1, [pc, #200]	; (80013c8 <main+0x438>)
 8001300:	482b      	ldr	r0, [pc, #172]	; (80013b0 <main+0x420>)
 8001302:	f005 f98f 	bl	8006624 <strstr>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <main+0x388>
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <main+0x424>)
 800130e:	2207      	movs	r2, #7
 8001310:	701a      	strb	r2, [r3, #0]
	  {
	 	 	 	new_state=8;
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <main+0x424>)
 8001314:	2208      	movs	r2, #8
 8001316:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"AT+CIFSR")&& (new_state=8))
 8001318:	492c      	ldr	r1, [pc, #176]	; (80013cc <main+0x43c>)
 800131a:	4825      	ldr	r0, [pc, #148]	; (80013b0 <main+0x420>)
 800131c:	f005 f982 	bl	8006624 <strstr>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <main+0x3a2>
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <main+0x424>)
 8001328:	2208      	movs	r2, #8
 800132a:	701a      	strb	r2, [r3, #0]
	  {
	 	 	 	new_state=9;
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <main+0x424>)
 800132e:	2209      	movs	r2, #9
 8001330:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"CONNECT")&& (new_state=9))
 8001332:	4927      	ldr	r1, [pc, #156]	; (80013d0 <main+0x440>)
 8001334:	481e      	ldr	r0, [pc, #120]	; (80013b0 <main+0x420>)
 8001336:	f005 f975 	bl	8006624 <strstr>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <main+0x3bc>
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <main+0x424>)
 8001342:	2209      	movs	r2, #9
 8001344:	701a      	strb	r2, [r3, #0]
	  {
		 	 	 new_state=10;
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <main+0x424>)
 8001348:	220a      	movs	r2, #10
 800134a:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"AT+CIPSEND")&& (new_state=10))
 800134c:	4921      	ldr	r1, [pc, #132]	; (80013d4 <main+0x444>)
 800134e:	4818      	ldr	r0, [pc, #96]	; (80013b0 <main+0x420>)
 8001350:	f005 f968 	bl	8006624 <strstr>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <main+0x3d6>
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <main+0x424>)
 800135c:	220a      	movs	r2, #10
 800135e:	701a      	strb	r2, [r3, #0]
	  {
			 	new_state=11;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <main+0x424>)
 8001362:	220b      	movs	r2, #11
 8001364:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"SEND OK")&& (new_state=11))
 8001366:	491c      	ldr	r1, [pc, #112]	; (80013d8 <main+0x448>)
 8001368:	4811      	ldr	r0, [pc, #68]	; (80013b0 <main+0x420>)
 800136a:	f005 f95b 	bl	8006624 <strstr>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <main+0x3f0>
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <main+0x424>)
 8001376:	220b      	movs	r2, #11
 8001378:	701a      	strb	r2, [r3, #0]
	  {
	 			 new_state=12;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <main+0x424>)
 800137c:	220c      	movs	r2, #12
 800137e:	701a      	strb	r2, [r3, #0]
	  }
	 if(strstr((char*)store,"CLOSED OK")&& (new_state=12))
 8001380:	4916      	ldr	r1, [pc, #88]	; (80013dc <main+0x44c>)
 8001382:	480b      	ldr	r0, [pc, #44]	; (80013b0 <main+0x420>)
 8001384:	f005 f94e 	bl	8006624 <strstr>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	f43f ae17 	beq.w	8000fbe <main+0x2e>
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <main+0x424>)
 8001392:	220c      	movs	r2, #12
 8001394:	701a      	strb	r2, [r3, #0]
	  {
		 			 new_state=9;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <main+0x424>)
 8001398:	2209      	movs	r2, #9
 800139a:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc1, 100);
 800139c:	e60f      	b.n	8000fbe <main+0x2e>
 800139e:	bf00      	nop
 80013a0:	08008bd4 	.word	0x08008bd4
 80013a4:	20000290 	.word	0x20000290
 80013a8:	2000036c 	.word	0x2000036c
 80013ac:	08008be4 	.word	0x08008be4
 80013b0:	2000031c 	.word	0x2000031c
 80013b4:	20000000 	.word	0x20000000
 80013b8:	08008be8 	.word	0x08008be8
 80013bc:	08008bf0 	.word	0x08008bf0
 80013c0:	08008bfc 	.word	0x08008bfc
 80013c4:	08008c08 	.word	0x08008c08
 80013c8:	08008c10 	.word	0x08008c10
 80013cc:	08008c1c 	.word	0x08008c1c
 80013d0:	08008c28 	.word	0x08008c28
 80013d4:	08008c30 	.word	0x08008c30
 80013d8:	08008c3c 	.word	0x08008c3c
 80013dc:	08008c44 	.word	0x08008c44

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b094      	sub	sp, #80	; 0x50
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	2230      	movs	r2, #48	; 0x30
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 fc86 	bl	8005d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <SystemClock_Config+0xc4>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <SystemClock_Config+0xc4>)
 800140a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <SystemClock_Config+0xc4>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <SystemClock_Config+0xc8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001424:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <SystemClock_Config+0xc8>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <SystemClock_Config+0xc8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001438:	2301      	movs	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800143c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001446:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800144c:	2308      	movs	r3, #8
 800144e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001450:	2348      	movs	r3, #72	; 0x48
 8001452:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001454:	2302      	movs	r3, #2
 8001456:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fb99 	bl	8002b98 <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800146c:	f000 f99a 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001470:	230f      	movs	r3, #15
 8001472:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001474:	2302      	movs	r3, #2
 8001476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800147c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001480:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	2102      	movs	r1, #2
 800148c:	4618      	mov	r0, r3
 800148e:	f001 fe27 	bl	80030e0 <HAL_RCC_ClockConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001498:	f000 f984 	bl	80017a4 <Error_Handler>
  }
}
 800149c:	bf00      	nop
 800149e:	3750      	adds	r7, #80	; 0x50
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000

080014ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <MX_ADC1_Init+0x98>)
 80014c0:	4a21      	ldr	r2, [pc, #132]	; (8001548 <MX_ADC1_Init+0x9c>)
 80014c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <MX_ADC1_Init+0x98>)
 80014c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_ADC1_Init+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_ADC1_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_ADC1_Init+0x98>)
 80014da:	2201      	movs	r2, #1
 80014dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_ADC1_Init+0x98>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_ADC1_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_ADC1_Init+0x98>)
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <MX_ADC1_Init+0xa0>)
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_ADC1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_ADC1_Init+0x98>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_ADC1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_ADC1_Init+0x98>)
 8001508:	2201      	movs	r2, #1
 800150a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_ADC1_Init+0x98>)
 800150e:	f000 fbdf 	bl	8001cd0 <HAL_ADC_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001518:	f000 f944 	bl	80017a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_ADC1_Init+0xa4>)
 800151e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001520:	2301      	movs	r3, #1
 8001522:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001524:	2304      	movs	r3, #4
 8001526:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_ADC1_Init+0x98>)
 800152e:	f000 fd79 	bl	8002024 <HAL_ADC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001538:	f000 f934 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200001fc 	.word	0x200001fc
 8001548:	40012000 	.word	0x40012000
 800154c:	0f000001 	.word	0x0f000001
 8001550:	10000012 	.word	0x10000012

08001554 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <MX_TIM2_Init+0x98>)
 8001574:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001578:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <MX_TIM2_Init+0x98>)
 800157c:	2218      	movs	r2, #24
 800157e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_TIM2_Init+0x98>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000-1;
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <MX_TIM2_Init+0x98>)
 8001588:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800158c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_TIM2_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_TIM2_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800159a:	4814      	ldr	r0, [pc, #80]	; (80015ec <MX_TIM2_Init+0x98>)
 800159c:	f002 fbb4 	bl	8003d08 <HAL_TIM_Base_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015a6:	f000 f8fd 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <MX_TIM2_Init+0x98>)
 80015b8:	f002 fdc4 	bl	8004144 <HAL_TIM_ConfigClockSource>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015c2:	f000 f8ef 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <MX_TIM2_Init+0x98>)
 80015d4:	f002 ffe2 	bl	800459c <HAL_TIMEx_MasterConfigSynchronization>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015de:	f000 f8e1 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000244 	.word	0x20000244

080015f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_USART3_UART_Init+0x58>)
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <MX_USART3_UART_Init+0x5c>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_USART3_UART_Init+0x58>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001600:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_USART3_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_USART3_UART_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_USART3_UART_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001634:	f003 f85e 	bl	80046f4 <HAL_UART_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800163e:	f000 f8b1 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000290 	.word	0x20000290
 800164c:	40004800 	.word	0x40004800

08001650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <MX_GPIO_Init+0xa8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <MX_GPIO_Init+0xa8>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MX_GPIO_Init+0xa8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <MX_GPIO_Init+0xa8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <MX_GPIO_Init+0xa8>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_GPIO_Init+0xa8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_GPIO_Init+0xa8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <MX_GPIO_Init+0xa8>)
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_GPIO_Init+0xa8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_GPIO_Init+0xa8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <MX_GPIO_Init+0xa8>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_GPIO_Init+0xa8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <MX_GPIO_Init+0xac>)
 80016ce:	f001 fa49 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 80016d2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4804      	ldr	r0, [pc, #16]	; (80016fc <MX_GPIO_Init+0xac>)
 80016ec:	f001 f88e 	bl	800280c <HAL_GPIO_Init>

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020400 	.word	0x40020400

08001700 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)

{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0f      	ldr	r2, [pc, #60]	; (800174c <HAL_UART_RxCpltCallback+0x4c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d117      	bne.n	8001742 <HAL_UART_RxCpltCallback+0x42>
	{
	store[i]=response;
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_UART_RxCpltCallback+0x50>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_UART_RxCpltCallback+0x54>)
 800171a:	7819      	ldrb	r1, [r3, #0]
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_UART_RxCpltCallback+0x58>)
 800171e:	5499      	strb	r1, [r3, r2]
	i++;
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_UART_RxCpltCallback+0x50>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_UART_RxCpltCallback+0x50>)
 800172a:	701a      	strb	r2, [r3, #0]
    response=0;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_UART_RxCpltCallback+0x54>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, &response, 1);
 8001732:	2201      	movs	r2, #1
 8001734:	4907      	ldr	r1, [pc, #28]	; (8001754 <HAL_UART_RxCpltCallback+0x54>)
 8001736:	4809      	ldr	r0, [pc, #36]	; (800175c <HAL_UART_RxCpltCallback+0x5c>)
 8001738:	f003 f8ad 	bl	8004896 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800173c:	4808      	ldr	r0, [pc, #32]	; (8001760 <HAL_UART_RxCpltCallback+0x60>)
 800173e:	f002 fb3b 	bl	8003db8 <HAL_TIM_Base_Start_IT>
	}

}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40004800 	.word	0x40004800
 8001750:	2000036d 	.word	0x2000036d
 8001754:	20000318 	.word	0x20000318
 8001758:	2000031c 	.word	0x2000031c
 800175c:	20000290 	.word	0x20000290
 8001760:	20000244 	.word	0x20000244

08001764 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	i=0;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001772:	4808      	ldr	r0, [pc, #32]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001774:	f002 fb98 	bl	8003ea8 <HAL_TIM_Base_Stop_IT>
//    send_flag=1;
    HAL_UART_Receive_IT(&huart3,&response, 1);
 8001778:	2201      	movs	r2, #1
 800177a:	4907      	ldr	r1, [pc, #28]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800177e:	f003 f88a 	bl	8004896 <HAL_UART_Receive_IT>
    send_flag=1;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]



}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000036d 	.word	0x2000036d
 8001794:	20000244 	.word	0x20000244
 8001798:	20000318 	.word	0x20000318
 800179c:	20000290 	.word	0x20000290
 80017a0:	2000036c 	.word	0x2000036c

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	e7fe      	b.n	80017ac <Error_Handler+0x8>
	...

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x44>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_MspInit+0x44>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_MspInit+0x44>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_MspInit+0x44>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_MspInit+0x44>)
 80017d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_MspInit+0x44>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800

080017f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_ADC_MspInit+0x38>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d10b      	bne.n	8001822 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_ADC_MspInit+0x3c>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_ADC_MspInit+0x3c>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_ADC_MspInit+0x3c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40012000 	.word	0x40012000
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d113      	bne.n	8001872 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_TIM_Base_MspInit+0x44>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <HAL_TIM_Base_MspInit+0x44>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_TIM_Base_MspInit+0x44>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	201c      	movs	r0, #28
 8001868:	f000 ff07 	bl	800267a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800186c:	201c      	movs	r0, #28
 800186e:	f000 ff20 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0aa      	sub	sp, #168	; 0xa8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	2284      	movs	r2, #132	; 0x84
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f004 fa2d 	bl	8005d00 <memset>
  if(huart->Instance==USART3)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a26      	ldr	r2, [pc, #152]	; (8001944 <HAL_UART_MspInit+0xc4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d144      	bne.n	800193a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 fe32 	bl	8003528 <HAL_RCCEx_PeriphCLKConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018ca:	f7ff ff6b 	bl	80017a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_UART_MspInit+0xc8>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_UART_MspInit+0xc8>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_UART_MspInit+0xc8>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_UART_MspInit+0xc8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_UART_MspInit+0xc8>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_UART_MspInit+0xc8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001918:	2307      	movs	r3, #7
 800191a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001922:	4619      	mov	r1, r3
 8001924:	4809      	ldr	r0, [pc, #36]	; (800194c <HAL_UART_MspInit+0xcc>)
 8001926:	f000 ff71 	bl	800280c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	2027      	movs	r0, #39	; 0x27
 8001930:	f000 fea3 	bl	800267a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001934:	2027      	movs	r0, #39	; 0x27
 8001936:	f000 febc 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	37a8      	adds	r7, #168	; 0xa8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40004800 	.word	0x40004800
 8001948:	40023800 	.word	0x40023800
 800194c:	40020c00 	.word	0x40020c00

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199c:	f000 f954 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <TIM2_IRQHandler+0x10>)
 80019aa:	f002 faac 	bl	8003f06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000244 	.word	0x20000244

080019b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <USART3_IRQHandler+0x10>)
 80019be:	f002 ffaf 	bl	8004920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000290 	.word	0x20000290

080019cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
	return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_kill>:

int _kill(int pid, int sig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019e6:	f004 f961 	bl	8005cac <__errno>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2216      	movs	r2, #22
 80019ee:	601a      	str	r2, [r3, #0]
	return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_exit>:

void _exit (int status)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ffe7 	bl	80019dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a0e:	e7fe      	b.n	8001a0e <_exit+0x12>

08001a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e00a      	b.n	8001a38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a22:	f3af 8000 	nop.w
 8001a26:	4601      	mov	r1, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf0      	blt.n	8001a22 <_read+0x12>
	}

return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e009      	b.n	8001a70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbf1      	blt.n	8001a5c <_write+0x12>
	}
	return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_close>:

int _close(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
	return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aaa:	605a      	str	r2, [r3, #4]
	return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_isatty>:

int _isatty(int file)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
	return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f004 f8c6 	bl	8005cac <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20050000 	.word	0x20050000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	20000388 	.word	0x20000388
 8001b54:	200003a0 	.word	0x200003a0

08001b58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <SystemInit+0x20>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <SystemInit+0x20>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b82:	490e      	ldr	r1, [pc, #56]	; (8001bbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b98:	4c0b      	ldr	r4, [pc, #44]	; (8001bc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ba6:	f7ff ffd7 	bl	8001b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001baa:	f004 f885 	bl	8005cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bae:	f7ff f9ef 	bl	8000f90 <main>
  bx  lr    
 8001bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001bc0:	08009054 	.word	0x08009054
  ldr r2, =_sbss
 8001bc4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001bc8:	200003a0 	.word	0x200003a0

08001bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC_IRQHandler>

08001bce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f000 fd46 	bl	8002664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f000 f805 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bde:	f7ff fde7 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fd61 	bl	80026ce <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 fd29 	bl	800267a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	20000008 	.word	0x20000008

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	2000038c 	.word	0x2000038c

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	2000038c 	.word	0x2000038c

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000000c 	.word	0x2000000c

08001cd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e031      	b.n	8001d4a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fd82 	bl	80017f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d116      	bne.n	8001d3c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_ADC_Init+0x84>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	f043 0202 	orr.w	r2, r3, #2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fad6 	bl	80022d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
 8001d3a:	e001      	b.n	8001d40 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	ffffeefd 	.word	0xffffeefd

08001d58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_Start+0x1a>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e0ad      	b.n	8001ece <HAL_ADC_Start+0x176>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d018      	beq.n	8001dba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <HAL_ADC_Start+0x184>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a50      	ldr	r2, [pc, #320]	; (8001ee0 <HAL_ADC_Start+0x188>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0c9a      	lsrs	r2, r3, #18
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001dac:	e002      	b.n	8001db4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f9      	bne.n	8001dae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d175      	bne.n	8001eb4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dcc:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <HAL_ADC_Start+0x18c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e02:	d106      	bne.n	8001e12 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f023 0206 	bic.w	r2, r3, #6
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e28:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001e2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <HAL_ADC_Start+0x190>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d143      	bne.n	8001ecc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e03a      	b.n	8001ecc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a24      	ldr	r2, [pc, #144]	; (8001eec <HAL_ADC_Start+0x194>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d10e      	bne.n	8001e7e <HAL_ADC_Start+0x126>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d107      	bne.n	8001e7e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e7c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_ADC_Start+0x190>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d120      	bne.n	8001ecc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <HAL_ADC_Start+0x198>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d11b      	bne.n	8001ecc <HAL_ADC_Start+0x174>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d114      	bne.n	8001ecc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	e00b      	b.n	8001ecc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f043 0210 	orr.w	r2, r3, #16
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	f043 0201 	orr.w	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	431bde83 	.word	0x431bde83
 8001ee4:	fffff8fe 	.word	0xfffff8fe
 8001ee8:	40012300 	.word	0x40012300
 8001eec:	40012000 	.word	0x40012000
 8001ef0:	40012200 	.word	0x40012200

08001ef4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f10:	d113      	bne.n	8001f3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f20:	d10b      	bne.n	8001f3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f043 0220 	orr.w	r2, r3, #32
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e063      	b.n	8002002 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f3a:	f7ff fe99 	bl	8001c70 <HAL_GetTick>
 8001f3e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f40:	e021      	b.n	8001f86 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d01d      	beq.n	8001f86 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_ADC_PollForConversion+0x6c>
 8001f50:	f7ff fe8e 	bl	8001c70 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d212      	bcs.n	8001f86 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d00b      	beq.n	8001f86 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f043 0204 	orr.w	r2, r3, #4
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e03d      	b.n	8002002 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d1d6      	bne.n	8001f42 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0212 	mvn.w	r2, #18
 8001f9c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d123      	bne.n	8002000 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d11f      	bne.n	8002000 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d111      	bne.n	8002000 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f043 0201 	orr.w	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1c>
 800203c:	2302      	movs	r3, #2
 800203e:	e136      	b.n	80022ae <HAL_ADC_ConfigChannel+0x28a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b09      	cmp	r3, #9
 800204e:	d93a      	bls.n	80020c6 <HAL_ADC_ConfigChannel+0xa2>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002058:	d035      	beq.n	80020c6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68d9      	ldr	r1, [r3, #12]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	3b1e      	subs	r3, #30
 8002070:	2207      	movs	r2, #7
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	400a      	ands	r2, r1
 800207e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a8d      	ldr	r2, [pc, #564]	; (80022bc <HAL_ADC_ConfigChannel+0x298>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10a      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68d9      	ldr	r1, [r3, #12]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	061a      	lsls	r2, r3, #24
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800209e:	e035      	b.n	800210c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68d9      	ldr	r1, [r3, #12]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	4618      	mov	r0, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4403      	add	r3, r0
 80020b8:	3b1e      	subs	r3, #30
 80020ba:	409a      	lsls	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020c4:	e022      	b.n	800210c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6919      	ldr	r1, [r3, #16]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43da      	mvns	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	400a      	ands	r2, r1
 80020e8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6919      	ldr	r1, [r3, #16]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	4603      	mov	r3, r0
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4403      	add	r3, r0
 8002102:	409a      	lsls	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b06      	cmp	r3, #6
 8002112:	d824      	bhi.n	800215e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	3b05      	subs	r3, #5
 8002126:	221f      	movs	r2, #31
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43da      	mvns	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	400a      	ands	r2, r1
 8002134:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b29b      	uxth	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	3b05      	subs	r3, #5
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	635a      	str	r2, [r3, #52]	; 0x34
 800215c:	e04c      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d824      	bhi.n	80021b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	3b23      	subs	r3, #35	; 0x23
 8002178:	221f      	movs	r2, #31
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	400a      	ands	r2, r1
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b23      	subs	r3, #35	; 0x23
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
 80021ae:	e023      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	3b41      	subs	r3, #65	; 0x41
 80021c2:	221f      	movs	r2, #31
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43da      	mvns	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	400a      	ands	r2, r1
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3b41      	subs	r3, #65	; 0x41
 80021ec:	fa00 f203 	lsl.w	r2, r0, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a30      	ldr	r2, [pc, #192]	; (80022c0 <HAL_ADC_ConfigChannel+0x29c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d10a      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1f4>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800220a:	d105      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a2c      	ldr	r2, [pc, #176]	; (80022c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002212:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002216:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <HAL_ADC_ConfigChannel+0x29c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10f      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x21e>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b12      	cmp	r3, #18
 8002228:	d10b      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002230:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002234:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800223c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002240:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <HAL_ADC_ConfigChannel+0x29c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d12b      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x280>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <HAL_ADC_ConfigChannel+0x298>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d003      	beq.n	800225e <HAL_ADC_ConfigChannel+0x23a>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b11      	cmp	r3, #17
 800225c:	d122      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002264:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002268:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002270:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002274:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_ADC_ConfigChannel+0x298>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d111      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_ADC_ConfigChannel+0x2a8>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	0c9a      	lsrs	r2, r3, #18
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002296:	e002      	b.n	800229e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3b01      	subs	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f9      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	10000012 	.word	0x10000012
 80022c0:	40012000 	.word	0x40012000
 80022c4:	40012300 	.word	0x40012300
 80022c8:	20000004 	.word	0x20000004
 80022cc:	431bde83 	.word	0x431bde83

080022d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80022d8:	4b78      	ldr	r3, [pc, #480]	; (80024bc <ADC_Init+0x1ec>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a77      	ldr	r2, [pc, #476]	; (80024bc <ADC_Init+0x1ec>)
 80022de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022e2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80022e4:	4b75      	ldr	r3, [pc, #468]	; (80024bc <ADC_Init+0x1ec>)
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4973      	ldr	r1, [pc, #460]	; (80024bc <ADC_Init+0x1ec>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002300:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	021a      	lsls	r2, r3, #8
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002324:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002346:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <ADC_Init+0x1f0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d022      	beq.n	80023aa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002372:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6899      	ldr	r1, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002394:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6899      	ldr	r1, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	e00f      	b.n	80023ca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0202 	bic.w	r2, r2, #2
 80023d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6899      	ldr	r1, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	005a      	lsls	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01b      	beq.n	8002430 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002406:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002416:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	3b01      	subs	r3, #1
 8002424:	035a      	lsls	r2, r3, #13
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	e007      	b.n	8002440 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800243e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	3b01      	subs	r3, #1
 800245c:	051a      	lsls	r2, r3, #20
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6899      	ldr	r1, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002482:	025a      	lsls	r2, r3, #9
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6899      	ldr	r1, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	029a      	lsls	r2, r3, #10
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	609a      	str	r2, [r3, #8]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40012300 	.word	0x40012300
 80024c0:	0f000001 	.word	0x0f000001

080024c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <__NVIC_SetPriorityGrouping+0x40>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e0:	4013      	ands	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <__NVIC_SetPriorityGrouping+0x40>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00
 8002508:	05fa0000 	.word	0x05fa0000

0800250c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <__NVIC_GetPriorityGrouping+0x18>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	f003 0307 	and.w	r3, r3, #7
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	2b00      	cmp	r3, #0
 8002538:	db0b      	blt.n	8002552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	f003 021f 	and.w	r2, r3, #31
 8002540:	4907      	ldr	r1, [pc, #28]	; (8002560 <__NVIC_EnableIRQ+0x38>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2001      	movs	r0, #1
 800254a:	fa00 f202 	lsl.w	r2, r0, r2
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000e100 	.word	0xe000e100

08002564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	6039      	str	r1, [r7, #0]
 800256e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	2b00      	cmp	r3, #0
 8002576:	db0a      	blt.n	800258e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	b2da      	uxtb	r2, r3
 800257c:	490c      	ldr	r1, [pc, #48]	; (80025b0 <__NVIC_SetPriority+0x4c>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	0112      	lsls	r2, r2, #4
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	440b      	add	r3, r1
 8002588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800258c:	e00a      	b.n	80025a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4908      	ldr	r1, [pc, #32]	; (80025b4 <__NVIC_SetPriority+0x50>)
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	3b04      	subs	r3, #4
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	440b      	add	r3, r1
 80025a2:	761a      	strb	r2, [r3, #24]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000e100 	.word	0xe000e100
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f1c3 0307 	rsb	r3, r3, #7
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	bf28      	it	cs
 80025d6:	2304      	movcs	r3, #4
 80025d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3304      	adds	r3, #4
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d902      	bls.n	80025e8 <NVIC_EncodePriority+0x30>
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3b03      	subs	r3, #3
 80025e6:	e000      	b.n	80025ea <NVIC_EncodePriority+0x32>
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43da      	mvns	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	401a      	ands	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002600:	f04f 31ff 	mov.w	r1, #4294967295
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	43d9      	mvns	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	4313      	orrs	r3, r2
         );
}
 8002612:	4618      	mov	r0, r3
 8002614:	3724      	adds	r7, #36	; 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002630:	d301      	bcc.n	8002636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002632:	2301      	movs	r3, #1
 8002634:	e00f      	b.n	8002656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <SysTick_Config+0x40>)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263e:	210f      	movs	r1, #15
 8002640:	f04f 30ff 	mov.w	r0, #4294967295
 8002644:	f7ff ff8e 	bl	8002564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <SysTick_Config+0x40>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264e:	4b04      	ldr	r3, [pc, #16]	; (8002660 <SysTick_Config+0x40>)
 8002650:	2207      	movs	r2, #7
 8002652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	e000e010 	.word	0xe000e010

08002664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff29 	bl	80024c4 <__NVIC_SetPriorityGrouping>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800268c:	f7ff ff3e 	bl	800250c <__NVIC_GetPriorityGrouping>
 8002690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	f7ff ff8e 	bl	80025b8 <NVIC_EncodePriority>
 800269c:	4602      	mov	r2, r0
 800269e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff5d 	bl	8002564 <__NVIC_SetPriority>
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff31 	bl	8002528 <__NVIC_EnableIRQ>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ffa2 	bl	8002620 <SysTick_Config>
 80026dc:	4603      	mov	r3, r0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff fabc 	bl	8001c70 <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d008      	beq.n	8002718 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e052      	b.n	80027be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0216 	bic.w	r2, r2, #22
 8002726:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002736:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d103      	bne.n	8002748 <HAL_DMA_Abort+0x62>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0208 	bic.w	r2, r2, #8
 8002756:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002768:	e013      	b.n	8002792 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800276a:	f7ff fa81 	bl	8001c70 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b05      	cmp	r3, #5
 8002776:	d90c      	bls.n	8002792 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2203      	movs	r2, #3
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e015      	b.n	80027be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e4      	bne.n	800276a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	223f      	movs	r2, #63	; 0x3f
 80027a6:	409a      	lsls	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d004      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2280      	movs	r2, #128	; 0x80
 80027de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e00c      	b.n	80027fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2205      	movs	r2, #5
 80027e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e175      	b.n	8002b18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	f040 8164 	bne.w	8002b12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d005      	beq.n	8002862 <HAL_GPIO_Init+0x56>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d130      	bne.n	80028c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d017      	beq.n	8002900 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d123      	bne.n	8002954 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0203 	and.w	r2, r3, #3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80be 	beq.w	8002b12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <HAL_GPIO_Init+0x324>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a65      	ldr	r2, [pc, #404]	; (8002b30 <HAL_GPIO_Init+0x324>)
 800299c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <HAL_GPIO_Init+0x324>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029ae:	4a61      	ldr	r2, [pc, #388]	; (8002b34 <HAL_GPIO_Init+0x328>)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <HAL_GPIO_Init+0x32c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d037      	beq.n	8002a4a <HAL_GPIO_Init+0x23e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a57      	ldr	r2, [pc, #348]	; (8002b3c <HAL_GPIO_Init+0x330>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d031      	beq.n	8002a46 <HAL_GPIO_Init+0x23a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a56      	ldr	r2, [pc, #344]	; (8002b40 <HAL_GPIO_Init+0x334>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02b      	beq.n	8002a42 <HAL_GPIO_Init+0x236>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a55      	ldr	r2, [pc, #340]	; (8002b44 <HAL_GPIO_Init+0x338>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d025      	beq.n	8002a3e <HAL_GPIO_Init+0x232>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a54      	ldr	r2, [pc, #336]	; (8002b48 <HAL_GPIO_Init+0x33c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <HAL_GPIO_Init+0x22e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a53      	ldr	r2, [pc, #332]	; (8002b4c <HAL_GPIO_Init+0x340>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_GPIO_Init+0x22a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_GPIO_Init+0x344>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0x226>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a51      	ldr	r2, [pc, #324]	; (8002b54 <HAL_GPIO_Init+0x348>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00d      	beq.n	8002a2e <HAL_GPIO_Init+0x222>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a50      	ldr	r2, [pc, #320]	; (8002b58 <HAL_GPIO_Init+0x34c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x21e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4f      	ldr	r2, [pc, #316]	; (8002b5c <HAL_GPIO_Init+0x350>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_GPIO_Init+0x21a>
 8002a22:	2309      	movs	r3, #9
 8002a24:	e012      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a26:	230a      	movs	r3, #10
 8002a28:	e010      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	e00e      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a2e:	2307      	movs	r3, #7
 8002a30:	e00c      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a32:	2306      	movs	r3, #6
 8002a34:	e00a      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a36:	2305      	movs	r3, #5
 8002a38:	e008      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	e006      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e004      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e002      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f002 0203 	and.w	r2, r2, #3
 8002a52:	0092      	lsls	r2, r2, #2
 8002a54:	4093      	lsls	r3, r2
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a5c:	4935      	ldr	r1, [pc, #212]	; (8002b34 <HAL_GPIO_Init+0x328>)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6a:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8e:	4a34      	ldr	r2, [pc, #208]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a94:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab8:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002abe:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b0c:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3301      	adds	r3, #1
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b0f      	cmp	r3, #15
 8002b1c:	f67f ae86 	bls.w	800282c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3724      	adds	r7, #36	; 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40013800 	.word	0x40013800
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40020400 	.word	0x40020400
 8002b40:	40020800 	.word	0x40020800
 8002b44:	40020c00 	.word	0x40020c00
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40021400 	.word	0x40021400
 8002b50:	40021800 	.word	0x40021800
 8002b54:	40021c00 	.word	0x40021c00
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40022400 	.word	0x40022400
 8002b60:	40013c00 	.word	0x40013c00

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e291      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8087 	beq.w	8002cca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bbc:	4b96      	ldr	r3, [pc, #600]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d00c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc8:	4b93      	ldr	r3, [pc, #588]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d112      	bne.n	8002bfa <HAL_RCC_OscConfig+0x62>
 8002bd4:	4b90      	ldr	r3, [pc, #576]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be0:	d10b      	bne.n	8002bfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be2:	4b8d      	ldr	r3, [pc, #564]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d06c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x130>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d168      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e26b      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x7a>
 8002c04:	4b84      	ldr	r3, [pc, #528]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a83      	ldr	r2, [pc, #524]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e02e      	b.n	8002c70 <HAL_RCC_OscConfig+0xd8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x9c>
 8002c1a:	4b7f      	ldr	r3, [pc, #508]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7e      	ldr	r2, [pc, #504]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b7c      	ldr	r3, [pc, #496]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7b      	ldr	r2, [pc, #492]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e01d      	b.n	8002c70 <HAL_RCC_OscConfig+0xd8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0xc0>
 8002c3e:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a75      	ldr	r2, [pc, #468]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a72      	ldr	r2, [pc, #456]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0xd8>
 8002c58:	4b6f      	ldr	r3, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a6e      	ldr	r2, [pc, #440]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a6b      	ldr	r2, [pc, #428]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fffa 	bl	8001c70 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe fff6 	bl	8001c70 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e21f      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b61      	ldr	r3, [pc, #388]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe8>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe ffe6 	bl	8001c70 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe ffe2 	bl	8001c70 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e20b      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x110>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d069      	beq.n	8002daa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd6:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce2:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d11c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x190>
 8002cee:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d116      	bne.n	8002d28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x17a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e1df      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	493d      	ldr	r1, [pc, #244]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	e040      	b.n	8002daa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d023      	beq.n	8002d78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d30:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a38      	ldr	r2, [pc, #224]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe ff98 	bl	8001c70 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d44:	f7fe ff94 	bl	8001c70 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1bd      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4929      	ldr	r1, [pc, #164]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
 8002d76:	e018      	b.n	8002daa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d78:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe ff74 	bl	8001c70 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7fe ff70 	bl	8001c70 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e199      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d038      	beq.n	8002e28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d019      	beq.n	8002df2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc2:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7fe ff51 	bl	8001c70 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7fe ff4d 	bl	8001c70 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e176      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x23a>
 8002df0:	e01a      	b.n	8002e28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <HAL_RCC_OscConfig+0x280>)
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe ff37 	bl	8001c70 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e06:	f7fe ff33 	bl	8001c70 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d903      	bls.n	8002e1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e15c      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
 8002e18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	4b91      	ldr	r3, [pc, #580]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ee      	bne.n	8002e06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80a4 	beq.w	8002f7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e36:	4b8b      	ldr	r3, [pc, #556]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10d      	bne.n	8002e5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	4b88      	ldr	r3, [pc, #544]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a87      	ldr	r2, [pc, #540]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b85      	ldr	r3, [pc, #532]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5e:	4b82      	ldr	r3, [pc, #520]	; (8003068 <HAL_RCC_OscConfig+0x4d0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e6a:	4b7f      	ldr	r3, [pc, #508]	; (8003068 <HAL_RCC_OscConfig+0x4d0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a7e      	ldr	r2, [pc, #504]	; (8003068 <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fe fefb 	bl	8001c70 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fe fef7 	bl	8001c70 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	; 0x64
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e120      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e90:	4b75      	ldr	r3, [pc, #468]	; (8003068 <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x31a>
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a6e      	ldr	r2, [pc, #440]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	e02d      	b.n	8002f0e <HAL_RCC_OscConfig+0x376>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x33c>
 8002eba:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a69      	ldr	r2, [pc, #420]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec6:	4b67      	ldr	r3, [pc, #412]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a66      	ldr	r2, [pc, #408]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	e01c      	b.n	8002f0e <HAL_RCC_OscConfig+0x376>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d10c      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x35e>
 8002edc:	4b61      	ldr	r3, [pc, #388]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a60      	ldr	r2, [pc, #384]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	f043 0304 	orr.w	r3, r3, #4
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee8:	4b5e      	ldr	r3, [pc, #376]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	4a5d      	ldr	r2, [pc, #372]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef4:	e00b      	b.n	8002f0e <HAL_RCC_OscConfig+0x376>
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	4a5a      	ldr	r2, [pc, #360]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6713      	str	r3, [r2, #112]	; 0x70
 8002f02:	4b58      	ldr	r3, [pc, #352]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a57      	ldr	r2, [pc, #348]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d015      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fe feab 	bl	8001c70 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fe fea7 	bl	8001c70 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e0ce      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ee      	beq.n	8002f1e <HAL_RCC_OscConfig+0x386>
 8002f40:	e014      	b.n	8002f6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7fe fe95 	bl	8001c70 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe fe91 	bl	8001c70 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f60:	4b40      	ldr	r3, [pc, #256]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ee      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d105      	bne.n	8002f7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f72:	4b3c      	ldr	r3, [pc, #240]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a3b      	ldr	r2, [pc, #236]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80a4 	beq.w	80030d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f88:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d06b      	beq.n	800306c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d149      	bne.n	8003030 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9c:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a30      	ldr	r2, [pc, #192]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fe62 	bl	8001c70 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe fe5e 	bl	8001c70 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e087      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69da      	ldr	r2, [r3, #28]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	019b      	lsls	r3, r3, #6
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	085b      	lsrs	r3, r3, #1
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	041b      	lsls	r3, r3, #16
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ffa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a18      	ldr	r2, [pc, #96]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8003002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fe32 	bl	8001c70 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003010:	f7fe fe2e 	bl	8001c70 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e057      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x478>
 800302e:	e04f      	b.n	80030d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8003036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800303a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fe18 	bl	8001c70 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe fe14 	bl	8001c70 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e03d      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	4b03      	ldr	r3, [pc, #12]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x4ac>
 8003062:	e035      	b.n	80030d0 <HAL_RCC_OscConfig+0x538>
 8003064:	40023800 	.word	0x40023800
 8003068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x544>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d028      	beq.n	80030cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d121      	bne.n	80030cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d11a      	bne.n	80030cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d111      	bne.n	80030cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	3b01      	subs	r3, #1
 80030b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800

080030e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0d0      	b.n	800329a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d910      	bls.n	8003128 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b67      	ldr	r3, [pc, #412]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 020f 	bic.w	r2, r3, #15
 800310e:	4965      	ldr	r1, [pc, #404]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0b8      	b.n	800329a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003140:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800314a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 800315e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003162:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	494d      	ldr	r1, [pc, #308]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d040      	beq.n	8003204 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d115      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e073      	b.n	800329a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06b      	b.n	800329a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c2:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4936      	ldr	r1, [pc, #216]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d4:	f7fe fd4c 	bl	8001c70 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7fe fd48 	bl	8001c70 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e053      	b.n	800329a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 020c 	and.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1eb      	bne.n	80031dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003204:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d210      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 020f 	bic.w	r2, r3, #15
 800321a:	4922      	ldr	r1, [pc, #136]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e032      	b.n	800329a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4916      	ldr	r1, [pc, #88]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	490e      	ldr	r1, [pc, #56]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003272:	f000 f821 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003276:	4602      	mov	r2, r0
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	490a      	ldr	r1, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x1cc>)
 8003284:	5ccb      	ldrb	r3, [r1, r3]
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1d0>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1d4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe fca8 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023c00 	.word	0x40023c00
 80032a8:	40023800 	.word	0x40023800
 80032ac:	08008c50 	.word	0x08008c50
 80032b0:	20000004 	.word	0x20000004
 80032b4:	20000008 	.word	0x20000008

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b094      	sub	sp, #80	; 0x50
 80032be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	647b      	str	r3, [r7, #68]	; 0x44
 80032c4:	2300      	movs	r3, #0
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c8:	2300      	movs	r3, #0
 80032ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d0:	4b79      	ldr	r3, [pc, #484]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d00d      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x40>
 80032dc:	2b08      	cmp	r3, #8
 80032de:	f200 80e1 	bhi.w	80034a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x34>
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d003      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ea:	e0db      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032ec:	4b73      	ldr	r3, [pc, #460]	; (80034bc <HAL_RCC_GetSysClockFreq+0x204>)
 80032ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032f0:	e0db      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f2:	4b72      	ldr	r3, [pc, #456]	; (80034bc <HAL_RCC_GetSysClockFreq+0x204>)
 80032f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032f6:	e0d8      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f8:	4b6f      	ldr	r3, [pc, #444]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003300:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003302:	4b6d      	ldr	r3, [pc, #436]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d063      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330e:	4b6a      	ldr	r3, [pc, #424]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	099b      	lsrs	r3, r3, #6
 8003314:	2200      	movs	r2, #0
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
 8003318:	63fa      	str	r2, [r7, #60]	; 0x3c
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
 8003322:	2300      	movs	r3, #0
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
 8003326:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800332a:	4622      	mov	r2, r4
 800332c:	462b      	mov	r3, r5
 800332e:	f04f 0000 	mov.w	r0, #0
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	0159      	lsls	r1, r3, #5
 8003338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333c:	0150      	lsls	r0, r2, #5
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4621      	mov	r1, r4
 8003344:	1a51      	subs	r1, r2, r1
 8003346:	6139      	str	r1, [r7, #16]
 8003348:	4629      	mov	r1, r5
 800334a:	eb63 0301 	sbc.w	r3, r3, r1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800335c:	4659      	mov	r1, fp
 800335e:	018b      	lsls	r3, r1, #6
 8003360:	4651      	mov	r1, sl
 8003362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003366:	4651      	mov	r1, sl
 8003368:	018a      	lsls	r2, r1, #6
 800336a:	4651      	mov	r1, sl
 800336c:	ebb2 0801 	subs.w	r8, r2, r1
 8003370:	4659      	mov	r1, fp
 8003372:	eb63 0901 	sbc.w	r9, r3, r1
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338a:	4690      	mov	r8, r2
 800338c:	4699      	mov	r9, r3
 800338e:	4623      	mov	r3, r4
 8003390:	eb18 0303 	adds.w	r3, r8, r3
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	462b      	mov	r3, r5
 8003398:	eb49 0303 	adc.w	r3, r9, r3
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033aa:	4629      	mov	r1, r5
 80033ac:	028b      	lsls	r3, r1, #10
 80033ae:	4621      	mov	r1, r4
 80033b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b4:	4621      	mov	r1, r4
 80033b6:	028a      	lsls	r2, r1, #10
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033be:	2200      	movs	r2, #0
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033c8:	f7fd fc5e 	bl	8000c88 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4613      	mov	r3, r2
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d4:	e058      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	2200      	movs	r2, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	4611      	mov	r1, r2
 80033e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033e6:	623b      	str	r3, [r7, #32]
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
 80033ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033f0:	4642      	mov	r2, r8
 80033f2:	464b      	mov	r3, r9
 80033f4:	f04f 0000 	mov.w	r0, #0
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	0159      	lsls	r1, r3, #5
 80033fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003402:	0150      	lsls	r0, r2, #5
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4641      	mov	r1, r8
 800340a:	ebb2 0a01 	subs.w	sl, r2, r1
 800340e:	4649      	mov	r1, r9
 8003410:	eb63 0b01 	sbc.w	fp, r3, r1
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003420:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003424:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003428:	ebb2 040a 	subs.w	r4, r2, sl
 800342c:	eb63 050b 	sbc.w	r5, r3, fp
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	00eb      	lsls	r3, r5, #3
 800343a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343e:	00e2      	lsls	r2, r4, #3
 8003440:	4614      	mov	r4, r2
 8003442:	461d      	mov	r5, r3
 8003444:	4643      	mov	r3, r8
 8003446:	18e3      	adds	r3, r4, r3
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	464b      	mov	r3, r9
 800344c:	eb45 0303 	adc.w	r3, r5, r3
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800345e:	4629      	mov	r1, r5
 8003460:	028b      	lsls	r3, r1, #10
 8003462:	4621      	mov	r1, r4
 8003464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003468:	4621      	mov	r1, r4
 800346a:	028a      	lsls	r2, r1, #10
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003472:	2200      	movs	r2, #0
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	61fa      	str	r2, [r7, #28]
 8003478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800347c:	f7fd fc04 	bl	8000c88 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4613      	mov	r3, r2
 8003486:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	3301      	adds	r3, #1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800349a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034a2:	e002      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetSysClockFreq+0x204>)
 80034a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3750      	adds	r7, #80	; 0x50
 80034b0:	46bd      	mov	sp, r7
 80034b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	00f42400 	.word	0x00f42400

080034c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000004 	.word	0x20000004

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034dc:	f7ff fff0 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	0a9b      	lsrs	r3, r3, #10
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4903      	ldr	r1, [pc, #12]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	08008c60 	.word	0x08008c60

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003504:	f7ff ffdc 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0b5b      	lsrs	r3, r3, #13
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4903      	ldr	r1, [pc, #12]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	08008c60 	.word	0x08008c60

08003528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003550:	4b69      	ldr	r3, [pc, #420]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a68      	ldr	r2, [pc, #416]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800355a:	6093      	str	r3, [r2, #8]
 800355c:	4b66      	ldr	r3, [pc, #408]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003564:	4964      	ldr	r1, [pc, #400]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003572:	2301      	movs	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d017      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003582:	4b5d      	ldr	r3, [pc, #372]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003588:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	4959      	ldr	r1, [pc, #356]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035a0:	d101      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d017      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035be:	4b4e      	ldr	r3, [pc, #312]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	494a      	ldr	r1, [pc, #296]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035dc:	d101      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 808b 	beq.w	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800360c:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	4a39      	ldr	r2, [pc, #228]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003616:	6413      	str	r3, [r2, #64]	; 0x40
 8003618:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a34      	ldr	r2, [pc, #208]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800362a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003630:	f7fe fb1e 	bl	8001c70 <HAL_GetTick>
 8003634:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003636:	e008      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003638:	f7fe fb1a 	bl	8001c70 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e357      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800364a:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003656:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d035      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d02e      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800367e:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003694:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800369c:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d114      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe fae2 	bl	8001c70 <HAL_GetTick>
 80036ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fe fade 	bl	8001c70 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e319      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0ee      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036de:	d111      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036ee:	400b      	ands	r3, r1
 80036f0:	4901      	ldr	r1, [pc, #4]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
 80036f6:	e00b      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40007000 	.word	0x40007000
 8003700:	0ffffcff 	.word	0x0ffffcff
 8003704:	4baa      	ldr	r3, [pc, #680]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4aa9      	ldr	r2, [pc, #676]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800370e:	6093      	str	r3, [r2, #8]
 8003710:	4ba7      	ldr	r3, [pc, #668]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003712:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371c:	49a4      	ldr	r1, [pc, #656]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371e:	4313      	orrs	r3, r2
 8003720:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	d010      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800372e:	4ba0      	ldr	r3, [pc, #640]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003734:	4a9e      	ldr	r2, [pc, #632]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800373a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800373e:	4b9c      	ldr	r3, [pc, #624]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003740:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	4999      	ldr	r1, [pc, #612]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800375c:	4b94      	ldr	r3, [pc, #592]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376a:	4991      	ldr	r1, [pc, #580]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800377e:	4b8c      	ldr	r3, [pc, #560]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800378c:	4988      	ldr	r1, [pc, #544]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037a0:	4b83      	ldr	r3, [pc, #524]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ae:	4980      	ldr	r1, [pc, #512]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037c2:	4b7b      	ldr	r3, [pc, #492]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4977      	ldr	r1, [pc, #476]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037e4:	4b72      	ldr	r3, [pc, #456]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	f023 0203 	bic.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	496f      	ldr	r1, [pc, #444]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003806:	4b6a      	ldr	r3, [pc, #424]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	f023 020c 	bic.w	r2, r3, #12
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003814:	4966      	ldr	r1, [pc, #408]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003828:	4b61      	ldr	r3, [pc, #388]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003836:	495e      	ldr	r1, [pc, #376]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800384a:	4b59      	ldr	r3, [pc, #356]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	4955      	ldr	r1, [pc, #340]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800386c:	4b50      	ldr	r3, [pc, #320]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	494d      	ldr	r1, [pc, #308]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800388e:	4b48      	ldr	r3, [pc, #288]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	4944      	ldr	r1, [pc, #272]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038b0:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	493c      	ldr	r1, [pc, #240]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038d2:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	4933      	ldr	r1, [pc, #204]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038f4:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003902:	492b      	ldr	r1, [pc, #172]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d011      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003916:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003924:	4922      	ldr	r1, [pc, #136]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003934:	d101      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003946:	2301      	movs	r3, #1
 8003948:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003956:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003964:	4912      	ldr	r1, [pc, #72]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003988:	4909      	ldr	r1, [pc, #36]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d006      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80d9 	beq.w	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039a4:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a01      	ldr	r2, [pc, #4]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ae:	e001      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80039b0:	40023800 	.word	0x40023800
 80039b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b6:	f7fe f95b 	bl	8001c70 <HAL_GetTick>
 80039ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039be:	f7fe f957 	bl	8001c70 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b64      	cmp	r3, #100	; 0x64
 80039ca:	d901      	bls.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e194      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d0:	4b6c      	ldr	r3, [pc, #432]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d021      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d11d      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039f0:	4b64      	ldr	r3, [pc, #400]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f6:	0c1b      	lsrs	r3, r3, #16
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039fe:	4b61      	ldr	r3, [pc, #388]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a04:	0e1b      	lsrs	r3, r3, #24
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	019a      	lsls	r2, r3, #6
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	071b      	lsls	r3, r3, #28
 8003a24:	4957      	ldr	r1, [pc, #348]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d02e      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a56:	d129      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a58:	4b4a      	ldr	r3, [pc, #296]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a5e:	0c1b      	lsrs	r3, r3, #16
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a66:	4b47      	ldr	r3, [pc, #284]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6c:	0f1b      	lsrs	r3, r3, #28
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	019a      	lsls	r2, r3, #6
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	431a      	orrs	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	071b      	lsls	r3, r3, #28
 8003a8c:	493d      	ldr	r1, [pc, #244]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a94:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a9a:	f023 021f 	bic.w	r2, r3, #31
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	4937      	ldr	r1, [pc, #220]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01d      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ab8:	4b32      	ldr	r3, [pc, #200]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003abe:	0e1b      	lsrs	r3, r3, #24
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ac6:	4b2f      	ldr	r3, [pc, #188]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003acc:	0f1b      	lsrs	r3, r3, #28
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	019a      	lsls	r2, r3, #6
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	071b      	lsls	r3, r3, #28
 8003aec:	4925      	ldr	r1, [pc, #148]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d011      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	019a      	lsls	r2, r3, #6
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	061b      	lsls	r3, r3, #24
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	071b      	lsls	r3, r3, #28
 8003b1c:	4919      	ldr	r1, [pc, #100]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b24:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b30:	f7fe f89e 	bl	8001c70 <HAL_GetTick>
 8003b34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b38:	f7fe f89a 	bl	8001c70 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0d7      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b4a:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	f040 80cd 	bne.w	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a08      	ldr	r2, [pc, #32]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6a:	f7fe f881 	bl	8001c70 <HAL_GetTick>
 8003b6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b72:	f7fe f87d 	bl	8001c70 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b64      	cmp	r3, #100	; 0x64
 8003b7e:	d903      	bls.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e0ba      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b88:	4b5e      	ldr	r3, [pc, #376]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b94:	d0ed      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02e      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d12a      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bbe:	4b51      	ldr	r3, [pc, #324]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bcc:	4b4d      	ldr	r3, [pc, #308]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	0f1b      	lsrs	r3, r3, #28
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	019a      	lsls	r2, r3, #6
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	041b      	lsls	r3, r3, #16
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	061b      	lsls	r3, r3, #24
 8003bec:	431a      	orrs	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	071b      	lsls	r3, r3, #28
 8003bf2:	4944      	ldr	r1, [pc, #272]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bfa:	4b42      	ldr	r3, [pc, #264]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	493d      	ldr	r1, [pc, #244]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d022      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c28:	d11d      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c2a:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	0e1b      	lsrs	r3, r3, #24
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c38:	4b32      	ldr	r3, [pc, #200]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	0f1b      	lsrs	r3, r3, #28
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	019a      	lsls	r2, r3, #6
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	431a      	orrs	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	061b      	lsls	r3, r3, #24
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	071b      	lsls	r3, r3, #28
 8003c5e:	4929      	ldr	r1, [pc, #164]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d028      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	0e1b      	lsrs	r3, r3, #24
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c80:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	0c1b      	lsrs	r3, r3, #16
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	019a      	lsls	r2, r3, #6
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	071b      	lsls	r3, r3, #28
 8003ca6:	4917      	ldr	r1, [pc, #92]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	4911      	ldr	r1, [pc, #68]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a0e      	ldr	r2, [pc, #56]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd0:	f7fd ffce 	bl	8001c70 <HAL_GetTick>
 8003cd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cd8:	f7fd ffca 	bl	8001c70 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	; 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e007      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf6:	d1ef      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800

08003d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e049      	b.n	8003dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fd82 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3304      	adds	r3, #4
 8003d44:	4619      	mov	r1, r3
 8003d46:	4610      	mov	r0, r2
 8003d48:	f000 faee 	bl	8004328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d001      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e054      	b.n	8003e7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a26      	ldr	r2, [pc, #152]	; (8003e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d022      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d01d      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d018      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00e      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d009      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <HAL_TIM_Base_Start_IT+0xe4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d115      	bne.n	8003e64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xec>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d015      	beq.n	8003e76 <HAL_TIM_Base_Start_IT+0xbe>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e50:	d011      	beq.n	8003e76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e62:	e008      	b.n	8003e76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e000      	b.n	8003e78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40000c00 	.word	0x40000c00
 8003e98:	40010400 	.word	0x40010400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40001800 	.word	0x40001800
 8003ea4:	00010007 	.word	0x00010007

08003ea8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6a1a      	ldr	r2, [r3, #32]
 8003ec6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10f      	bne.n	8003ef0 <HAL_TIM_Base_Stop_IT+0x48>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6a1a      	ldr	r2, [r3, #32]
 8003ed6:	f240 4344 	movw	r3, #1092	; 0x444
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d107      	bne.n	8003ef0 <HAL_TIM_Base_Stop_IT+0x48>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d122      	bne.n	8003f62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d11b      	bne.n	8003f62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f06f 0202 	mvn.w	r2, #2
 8003f32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f9cf 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003f4e:	e005      	b.n	8003f5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f9c1 	bl	80042d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9d2 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d122      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d11b      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f06f 0204 	mvn.w	r2, #4
 8003f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f9a5 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003fa2:	e005      	b.n	8003fb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f997 	bl	80042d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9a8 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d122      	bne.n	800400a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d11b      	bne.n	800400a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f06f 0208 	mvn.w	r2, #8
 8003fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f97b 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003ff6:	e005      	b.n	8004004 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f96d 	bl	80042d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f97e 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b10      	cmp	r3, #16
 8004016:	d122      	bne.n	800405e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b10      	cmp	r3, #16
 8004024:	d11b      	bne.n	800405e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f06f 0210 	mvn.w	r2, #16
 800402e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2208      	movs	r2, #8
 8004034:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f951 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 800404a:	e005      	b.n	8004058 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f943 	bl	80042d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f954 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d10e      	bne.n	800408a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d107      	bne.n	800408a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f06f 0201 	mvn.w	r2, #1
 8004082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7fd fb6d 	bl	8001764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d10e      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b80      	cmp	r3, #128	; 0x80
 80040a4:	d107      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fb0b 	bl	80046cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c4:	d10e      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d0:	2b80      	cmp	r3, #128	; 0x80
 80040d2:	d107      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fafe 	bl	80046e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b40      	cmp	r3, #64	; 0x40
 80040f0:	d10e      	bne.n	8004110 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b40      	cmp	r3, #64	; 0x40
 80040fe:	d107      	bne.n	8004110 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f902 	bl	8004314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b20      	cmp	r3, #32
 800411c:	d10e      	bne.n	800413c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b20      	cmp	r3, #32
 800412a:	d107      	bne.n	800413c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0220 	mvn.w	r2, #32
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fabe 	bl	80046b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_TIM_ConfigClockSource+0x1c>
 800415c:	2302      	movs	r3, #2
 800415e:	e0b4      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x186>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	4b56      	ldr	r3, [pc, #344]	; (80042d4 <HAL_TIM_ConfigClockSource+0x190>)
 800417c:	4013      	ands	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004186:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004198:	d03e      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0xd4>
 800419a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419e:	f200 8087 	bhi.w	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a6:	f000 8086 	beq.w	80042b6 <HAL_TIM_ConfigClockSource+0x172>
 80041aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ae:	d87f      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b70      	cmp	r3, #112	; 0x70
 80041b2:	d01a      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0xa6>
 80041b4:	2b70      	cmp	r3, #112	; 0x70
 80041b6:	d87b      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041b8:	2b60      	cmp	r3, #96	; 0x60
 80041ba:	d050      	beq.n	800425e <HAL_TIM_ConfigClockSource+0x11a>
 80041bc:	2b60      	cmp	r3, #96	; 0x60
 80041be:	d877      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b50      	cmp	r3, #80	; 0x50
 80041c2:	d03c      	beq.n	800423e <HAL_TIM_ConfigClockSource+0xfa>
 80041c4:	2b50      	cmp	r3, #80	; 0x50
 80041c6:	d873      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d058      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x13a>
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	d86f      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b30      	cmp	r3, #48	; 0x30
 80041d2:	d064      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x15a>
 80041d4:	2b30      	cmp	r3, #48	; 0x30
 80041d6:	d86b      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d060      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x15a>
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d867      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d05c      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x15a>
 80041e4:	2b10      	cmp	r3, #16
 80041e6:	d05a      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x15a>
 80041e8:	e062      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	6899      	ldr	r1, [r3, #8]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f000 f9af 	bl	800455c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800420c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	609a      	str	r2, [r3, #8]
      break;
 8004216:	e04f      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6899      	ldr	r1, [r3, #8]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f000 f998 	bl	800455c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800423a:	609a      	str	r2, [r3, #8]
      break;
 800423c:	e03c      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	461a      	mov	r2, r3
 800424c:	f000 f90c 	bl	8004468 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2150      	movs	r1, #80	; 0x50
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f965 	bl	8004526 <TIM_ITRx_SetConfig>
      break;
 800425c:	e02c      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	461a      	mov	r2, r3
 800426c:	f000 f92b 	bl	80044c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2160      	movs	r1, #96	; 0x60
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f955 	bl	8004526 <TIM_ITRx_SetConfig>
      break;
 800427c:	e01c      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	461a      	mov	r2, r3
 800428c:	f000 f8ec 	bl	8004468 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2140      	movs	r1, #64	; 0x40
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f945 	bl	8004526 <TIM_ITRx_SetConfig>
      break;
 800429c:	e00c      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f000 f93c 	bl	8004526 <TIM_ITRx_SetConfig>
      break;
 80042ae:	e003      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      break;
 80042b4:	e000      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	fffeff88 	.word	0xfffeff88

080042d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a40      	ldr	r2, [pc, #256]	; (800443c <TIM_Base_SetConfig+0x114>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d013      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004346:	d00f      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a3d      	ldr	r2, [pc, #244]	; (8004440 <TIM_Base_SetConfig+0x118>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00b      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a3c      	ldr	r2, [pc, #240]	; (8004444 <TIM_Base_SetConfig+0x11c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d007      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a3b      	ldr	r2, [pc, #236]	; (8004448 <TIM_Base_SetConfig+0x120>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a3a      	ldr	r2, [pc, #232]	; (800444c <TIM_Base_SetConfig+0x124>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d108      	bne.n	800437a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a2f      	ldr	r2, [pc, #188]	; (800443c <TIM_Base_SetConfig+0x114>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02b      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004388:	d027      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2c      	ldr	r2, [pc, #176]	; (8004440 <TIM_Base_SetConfig+0x118>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d023      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2b      	ldr	r2, [pc, #172]	; (8004444 <TIM_Base_SetConfig+0x11c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01f      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2a      	ldr	r2, [pc, #168]	; (8004448 <TIM_Base_SetConfig+0x120>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01b      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a29      	ldr	r2, [pc, #164]	; (800444c <TIM_Base_SetConfig+0x124>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d017      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a28      	ldr	r2, [pc, #160]	; (8004450 <TIM_Base_SetConfig+0x128>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a27      	ldr	r2, [pc, #156]	; (8004454 <TIM_Base_SetConfig+0x12c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00f      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a26      	ldr	r2, [pc, #152]	; (8004458 <TIM_Base_SetConfig+0x130>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00b      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a25      	ldr	r2, [pc, #148]	; (800445c <TIM_Base_SetConfig+0x134>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a24      	ldr	r2, [pc, #144]	; (8004460 <TIM_Base_SetConfig+0x138>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a23      	ldr	r2, [pc, #140]	; (8004464 <TIM_Base_SetConfig+0x13c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d108      	bne.n	80043ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <TIM_Base_SetConfig+0x114>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0xf8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a0c      	ldr	r2, [pc, #48]	; (800444c <TIM_Base_SetConfig+0x124>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d103      	bne.n	8004428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	615a      	str	r2, [r3, #20]
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40010000 	.word	0x40010000
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800
 8004448:	40000c00 	.word	0x40000c00
 800444c:	40010400 	.word	0x40010400
 8004450:	40014000 	.word	0x40014000
 8004454:	40014400 	.word	0x40014400
 8004458:	40014800 	.word	0x40014800
 800445c:	40001800 	.word	0x40001800
 8004460:	40001c00 	.word	0x40001c00
 8004464:	40002000 	.word	0x40002000

08004468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f023 0201 	bic.w	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f023 030a 	bic.w	r3, r3, #10
 80044a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b087      	sub	sp, #28
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f023 0210 	bic.w	r2, r3, #16
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	031b      	lsls	r3, r3, #12
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004502:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	621a      	str	r2, [r3, #32]
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	f043 0307 	orr.w	r3, r3, #7
 8004548:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	609a      	str	r2, [r3, #8]
}
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	021a      	lsls	r2, r3, #8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	431a      	orrs	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4313      	orrs	r3, r2
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	609a      	str	r2, [r3, #8]
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e06d      	b.n	8004690 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a30      	ldr	r2, [pc, #192]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d004      	beq.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2f      	ldr	r2, [pc, #188]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d108      	bne.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a20      	ldr	r2, [pc, #128]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d022      	beq.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004626:	d01d      	beq.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d018      	beq.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1a      	ldr	r2, [pc, #104]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00e      	beq.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d009      	beq.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d10c      	bne.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800466a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	4313      	orrs	r3, r2
 8004674:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	40010000 	.word	0x40010000
 80046a0:	40010400 	.word	0x40010400
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800
 80046ac:	40000c00 	.word	0x40000c00
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40001800 	.word	0x40001800

080046b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e040      	b.n	8004788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fd f8b2 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2224      	movs	r2, #36	; 0x24
 8004720:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0201 	bic.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fbe6 	bl	8004f04 <UART_SetConfig>
 8004738:	4603      	mov	r3, r0
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e022      	b.n	8004788 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fe3e 	bl	80053cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fec5 	bl	8005510 <UART_CheckIdleState>
 8004786:	4603      	mov	r3, r0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	4613      	mov	r3, r2
 800479e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d171      	bne.n	800488c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_UART_Transmit+0x24>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e06a      	b.n	800488e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2221      	movs	r2, #33	; 0x21
 80047c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c6:	f7fd fa53 	bl	8001c70 <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e4:	d108      	bne.n	80047f8 <HAL_UART_Transmit+0x68>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	e003      	b.n	8004800 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004800:	e02c      	b.n	800485c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2200      	movs	r2, #0
 800480a:	2180      	movs	r1, #128	; 0x80
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 feb6 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e038      	b.n	800488e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004830:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	3302      	adds	r3, #2
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	e007      	b.n	800484a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	3301      	adds	r3, #1
 8004848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1cc      	bne.n	8004802 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2200      	movs	r2, #0
 8004870:	2140      	movs	r1, #64	; 0x40
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fe83 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e005      	b.n	800488e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b08a      	sub	sp, #40	; 0x28
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	4613      	mov	r3, r2
 80048a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d132      	bne.n	8004914 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_UART_Receive_IT+0x24>
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e02b      	b.n	8004916 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d018      	beq.n	8004904 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	613b      	str	r3, [r7, #16]
   return(result);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	69f9      	ldr	r1, [r7, #28]
 80048f6:	6a3a      	ldr	r2, [r7, #32]
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e6      	bne.n	80048d2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	461a      	mov	r2, r3
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fefe 	bl	800570c <UART_Start_Receive_IT>
 8004910:	4603      	mov	r3, r0
 8004912:	e000      	b.n	8004916 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004914:	2302      	movs	r3, #2
  }
}
 8004916:	4618      	mov	r0, r3
 8004918:	3728      	adds	r7, #40	; 0x28
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b0ba      	sub	sp, #232	; 0xe8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800494a:	f640 030f 	movw	r3, #2063	; 0x80f
 800494e:	4013      	ands	r3, r2
 8004950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d115      	bne.n	8004988 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00f      	beq.n	8004988 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8297 	beq.w	8004eac <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
      }
      return;
 8004986:	e291      	b.n	8004eac <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8117 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800499e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049a2:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_UART_IRQHandler+0x298>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 810a 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d011      	beq.n	80049dc <HAL_UART_IRQHandler+0xbc>
 80049b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00b      	beq.n	80049dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2201      	movs	r2, #1
 80049ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d2:	f043 0201 	orr.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d011      	beq.n	8004a0c <HAL_UART_IRQHandler+0xec>
 80049e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2202      	movs	r2, #2
 80049fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a02:	f043 0204 	orr.w	r2, r3, #4
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d011      	beq.n	8004a3c <HAL_UART_IRQHandler+0x11c>
 8004a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00b      	beq.n	8004a3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a32:	f043 0202 	orr.w	r2, r3, #2
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d017      	beq.n	8004a78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2208      	movs	r2, #8
 8004a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6e:	f043 0208 	orr.w	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d012      	beq.n	8004aaa <HAL_UART_IRQHandler+0x18a>
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00c      	beq.n	8004aaa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa0:	f043 0220 	orr.w	r2, r3, #32
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 81fd 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d005      	beq.n	8004b02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004afa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d04f      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fec8 	bl	8005898 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d141      	bne.n	8004b9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1d9      	bne.n	8004b16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d013      	beq.n	8004b92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6e:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <HAL_UART_IRQHandler+0x29c>)
 8004b70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd fe25 	bl	80027c6 <HAL_DMA_Abort_IT>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d017      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	e00f      	b.n	8004bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9a0 	bl	8004ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b98:	e00b      	b.n	8004bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f99c 	bl	8004ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	e007      	b.n	8004bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f998 	bl	8004ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004bb0:	e17e      	b.n	8004eb0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb2:	bf00      	nop
    return;
 8004bb4:	e17c      	b.n	8004eb0 <HAL_UART_IRQHandler+0x590>
 8004bb6:	bf00      	nop
 8004bb8:	04000120 	.word	0x04000120
 8004bbc:	08005961 	.word	0x08005961

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	f040 814c 	bne.w	8004e62 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8145 	beq.w	8004e62 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 813e 	beq.w	8004e62 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2210      	movs	r2, #16
 8004bec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	f040 80b6 	bne.w	8004d6a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8150 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	f080 8148 	bcs.w	8004eb4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c38:	f000 8086 	beq.w	8004d48 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1da      	bne.n	8004c3c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004caa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e1      	bne.n	8004c86 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ce6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ce8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e3      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d18:	f023 0310 	bic.w	r3, r3, #16
 8004d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e4      	bne.n	8004d08 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fd fccf 	bl	80026e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8c2 	bl	8004eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d68:	e0a4      	b.n	8004eb4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8096 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004d8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8091 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004db8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e4      	bne.n	8004d96 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	623b      	str	r3, [r7, #32]
   return(result);
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3308      	adds	r3, #8
 8004dec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004df0:	633a      	str	r2, [r7, #48]	; 0x30
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e3      	bne.n	8004dcc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f023 0310 	bic.w	r3, r3, #16
 8004e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e3a:	61fb      	str	r3, [r7, #28]
 8004e3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	617b      	str	r3, [r7, #20]
   return(result);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e4      	bne.n	8004e18 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e58:	4619      	mov	r1, r3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f846 	bl	8004eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e60:	e02a      	b.n	8004eb8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00e      	beq.n	8004e8c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01c      	beq.n	8004ebc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	4798      	blx	r3
    }
    return;
 8004e8a:	e017      	b.n	8004ebc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d012      	beq.n	8004ebe <HAL_UART_IRQHandler+0x59e>
 8004e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fd71 	bl	800598c <UART_EndTransmit_IT>
    return;
 8004eaa:	e008      	b.n	8004ebe <HAL_UART_IRQHandler+0x59e>
      return;
 8004eac:	bf00      	nop
 8004eae:	e006      	b.n	8004ebe <HAL_UART_IRQHandler+0x59e>
    return;
 8004eb0:	bf00      	nop
 8004eb2:	e004      	b.n	8004ebe <HAL_UART_IRQHandler+0x59e>
      return;
 8004eb4:	bf00      	nop
 8004eb6:	e002      	b.n	8004ebe <HAL_UART_IRQHandler+0x59e>
      return;
 8004eb8:	bf00      	nop
 8004eba:	e000      	b.n	8004ebe <HAL_UART_IRQHandler+0x59e>
    return;
 8004ebc:	bf00      	nop
  }

}
 8004ebe:	37e8      	adds	r7, #232	; 0xe8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4ba6      	ldr	r3, [pc, #664]	; (80051c8 <UART_SetConfig+0x2c4>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6979      	ldr	r1, [r7, #20]
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a94      	ldr	r2, [pc, #592]	; (80051cc <UART_SetConfig+0x2c8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d120      	bne.n	8004fc2 <UART_SetConfig+0xbe>
 8004f80:	4b93      	ldr	r3, [pc, #588]	; (80051d0 <UART_SetConfig+0x2cc>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d816      	bhi.n	8004fbc <UART_SetConfig+0xb8>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0x90>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fb1 	.word	0x08004fb1
 8004f9c:	08004fab 	.word	0x08004fab
 8004fa0:	08004fb7 	.word	0x08004fb7
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e150      	b.n	800524c <UART_SetConfig+0x348>
 8004faa:	2302      	movs	r3, #2
 8004fac:	77fb      	strb	r3, [r7, #31]
 8004fae:	e14d      	b.n	800524c <UART_SetConfig+0x348>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e14a      	b.n	800524c <UART_SetConfig+0x348>
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e147      	b.n	800524c <UART_SetConfig+0x348>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e144      	b.n	800524c <UART_SetConfig+0x348>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a83      	ldr	r2, [pc, #524]	; (80051d4 <UART_SetConfig+0x2d0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d132      	bne.n	8005032 <UART_SetConfig+0x12e>
 8004fcc:	4b80      	ldr	r3, [pc, #512]	; (80051d0 <UART_SetConfig+0x2cc>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	f003 030c 	and.w	r3, r3, #12
 8004fd6:	2b0c      	cmp	r3, #12
 8004fd8:	d828      	bhi.n	800502c <UART_SetConfig+0x128>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0xdc>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08005015 	.word	0x08005015
 8004fe4:	0800502d 	.word	0x0800502d
 8004fe8:	0800502d 	.word	0x0800502d
 8004fec:	0800502d 	.word	0x0800502d
 8004ff0:	08005021 	.word	0x08005021
 8004ff4:	0800502d 	.word	0x0800502d
 8004ff8:	0800502d 	.word	0x0800502d
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	0800501b 	.word	0x0800501b
 8005004:	0800502d 	.word	0x0800502d
 8005008:	0800502d 	.word	0x0800502d
 800500c:	0800502d 	.word	0x0800502d
 8005010:	08005027 	.word	0x08005027
 8005014:	2300      	movs	r3, #0
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e118      	b.n	800524c <UART_SetConfig+0x348>
 800501a:	2302      	movs	r3, #2
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e115      	b.n	800524c <UART_SetConfig+0x348>
 8005020:	2304      	movs	r3, #4
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e112      	b.n	800524c <UART_SetConfig+0x348>
 8005026:	2308      	movs	r3, #8
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e10f      	b.n	800524c <UART_SetConfig+0x348>
 800502c:	2310      	movs	r3, #16
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e10c      	b.n	800524c <UART_SetConfig+0x348>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a68      	ldr	r2, [pc, #416]	; (80051d8 <UART_SetConfig+0x2d4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d120      	bne.n	800507e <UART_SetConfig+0x17a>
 800503c:	4b64      	ldr	r3, [pc, #400]	; (80051d0 <UART_SetConfig+0x2cc>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005046:	2b30      	cmp	r3, #48	; 0x30
 8005048:	d013      	beq.n	8005072 <UART_SetConfig+0x16e>
 800504a:	2b30      	cmp	r3, #48	; 0x30
 800504c:	d814      	bhi.n	8005078 <UART_SetConfig+0x174>
 800504e:	2b20      	cmp	r3, #32
 8005050:	d009      	beq.n	8005066 <UART_SetConfig+0x162>
 8005052:	2b20      	cmp	r3, #32
 8005054:	d810      	bhi.n	8005078 <UART_SetConfig+0x174>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <UART_SetConfig+0x15c>
 800505a:	2b10      	cmp	r3, #16
 800505c:	d006      	beq.n	800506c <UART_SetConfig+0x168>
 800505e:	e00b      	b.n	8005078 <UART_SetConfig+0x174>
 8005060:	2300      	movs	r3, #0
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e0f2      	b.n	800524c <UART_SetConfig+0x348>
 8005066:	2302      	movs	r3, #2
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e0ef      	b.n	800524c <UART_SetConfig+0x348>
 800506c:	2304      	movs	r3, #4
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e0ec      	b.n	800524c <UART_SetConfig+0x348>
 8005072:	2308      	movs	r3, #8
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e0e9      	b.n	800524c <UART_SetConfig+0x348>
 8005078:	2310      	movs	r3, #16
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e0e6      	b.n	800524c <UART_SetConfig+0x348>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a56      	ldr	r2, [pc, #344]	; (80051dc <UART_SetConfig+0x2d8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d120      	bne.n	80050ca <UART_SetConfig+0x1c6>
 8005088:	4b51      	ldr	r3, [pc, #324]	; (80051d0 <UART_SetConfig+0x2cc>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005092:	2bc0      	cmp	r3, #192	; 0xc0
 8005094:	d013      	beq.n	80050be <UART_SetConfig+0x1ba>
 8005096:	2bc0      	cmp	r3, #192	; 0xc0
 8005098:	d814      	bhi.n	80050c4 <UART_SetConfig+0x1c0>
 800509a:	2b80      	cmp	r3, #128	; 0x80
 800509c:	d009      	beq.n	80050b2 <UART_SetConfig+0x1ae>
 800509e:	2b80      	cmp	r3, #128	; 0x80
 80050a0:	d810      	bhi.n	80050c4 <UART_SetConfig+0x1c0>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <UART_SetConfig+0x1a8>
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d006      	beq.n	80050b8 <UART_SetConfig+0x1b4>
 80050aa:	e00b      	b.n	80050c4 <UART_SetConfig+0x1c0>
 80050ac:	2300      	movs	r3, #0
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e0cc      	b.n	800524c <UART_SetConfig+0x348>
 80050b2:	2302      	movs	r3, #2
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e0c9      	b.n	800524c <UART_SetConfig+0x348>
 80050b8:	2304      	movs	r3, #4
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e0c6      	b.n	800524c <UART_SetConfig+0x348>
 80050be:	2308      	movs	r3, #8
 80050c0:	77fb      	strb	r3, [r7, #31]
 80050c2:	e0c3      	b.n	800524c <UART_SetConfig+0x348>
 80050c4:	2310      	movs	r3, #16
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e0c0      	b.n	800524c <UART_SetConfig+0x348>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a44      	ldr	r2, [pc, #272]	; (80051e0 <UART_SetConfig+0x2dc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d125      	bne.n	8005120 <UART_SetConfig+0x21c>
 80050d4:	4b3e      	ldr	r3, [pc, #248]	; (80051d0 <UART_SetConfig+0x2cc>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e2:	d017      	beq.n	8005114 <UART_SetConfig+0x210>
 80050e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e8:	d817      	bhi.n	800511a <UART_SetConfig+0x216>
 80050ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ee:	d00b      	beq.n	8005108 <UART_SetConfig+0x204>
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f4:	d811      	bhi.n	800511a <UART_SetConfig+0x216>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <UART_SetConfig+0x1fe>
 80050fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fe:	d006      	beq.n	800510e <UART_SetConfig+0x20a>
 8005100:	e00b      	b.n	800511a <UART_SetConfig+0x216>
 8005102:	2300      	movs	r3, #0
 8005104:	77fb      	strb	r3, [r7, #31]
 8005106:	e0a1      	b.n	800524c <UART_SetConfig+0x348>
 8005108:	2302      	movs	r3, #2
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e09e      	b.n	800524c <UART_SetConfig+0x348>
 800510e:	2304      	movs	r3, #4
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e09b      	b.n	800524c <UART_SetConfig+0x348>
 8005114:	2308      	movs	r3, #8
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e098      	b.n	800524c <UART_SetConfig+0x348>
 800511a:	2310      	movs	r3, #16
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e095      	b.n	800524c <UART_SetConfig+0x348>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a2f      	ldr	r2, [pc, #188]	; (80051e4 <UART_SetConfig+0x2e0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d125      	bne.n	8005176 <UART_SetConfig+0x272>
 800512a:	4b29      	ldr	r3, [pc, #164]	; (80051d0 <UART_SetConfig+0x2cc>)
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005130:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005138:	d017      	beq.n	800516a <UART_SetConfig+0x266>
 800513a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800513e:	d817      	bhi.n	8005170 <UART_SetConfig+0x26c>
 8005140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005144:	d00b      	beq.n	800515e <UART_SetConfig+0x25a>
 8005146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514a:	d811      	bhi.n	8005170 <UART_SetConfig+0x26c>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <UART_SetConfig+0x254>
 8005150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005154:	d006      	beq.n	8005164 <UART_SetConfig+0x260>
 8005156:	e00b      	b.n	8005170 <UART_SetConfig+0x26c>
 8005158:	2301      	movs	r3, #1
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e076      	b.n	800524c <UART_SetConfig+0x348>
 800515e:	2302      	movs	r3, #2
 8005160:	77fb      	strb	r3, [r7, #31]
 8005162:	e073      	b.n	800524c <UART_SetConfig+0x348>
 8005164:	2304      	movs	r3, #4
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e070      	b.n	800524c <UART_SetConfig+0x348>
 800516a:	2308      	movs	r3, #8
 800516c:	77fb      	strb	r3, [r7, #31]
 800516e:	e06d      	b.n	800524c <UART_SetConfig+0x348>
 8005170:	2310      	movs	r3, #16
 8005172:	77fb      	strb	r3, [r7, #31]
 8005174:	e06a      	b.n	800524c <UART_SetConfig+0x348>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <UART_SetConfig+0x2e4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d138      	bne.n	80051f2 <UART_SetConfig+0x2ee>
 8005180:	4b13      	ldr	r3, [pc, #76]	; (80051d0 <UART_SetConfig+0x2cc>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800518a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800518e:	d017      	beq.n	80051c0 <UART_SetConfig+0x2bc>
 8005190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005194:	d82a      	bhi.n	80051ec <UART_SetConfig+0x2e8>
 8005196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519a:	d00b      	beq.n	80051b4 <UART_SetConfig+0x2b0>
 800519c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a0:	d824      	bhi.n	80051ec <UART_SetConfig+0x2e8>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <UART_SetConfig+0x2aa>
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051aa:	d006      	beq.n	80051ba <UART_SetConfig+0x2b6>
 80051ac:	e01e      	b.n	80051ec <UART_SetConfig+0x2e8>
 80051ae:	2300      	movs	r3, #0
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	e04b      	b.n	800524c <UART_SetConfig+0x348>
 80051b4:	2302      	movs	r3, #2
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e048      	b.n	800524c <UART_SetConfig+0x348>
 80051ba:	2304      	movs	r3, #4
 80051bc:	77fb      	strb	r3, [r7, #31]
 80051be:	e045      	b.n	800524c <UART_SetConfig+0x348>
 80051c0:	2308      	movs	r3, #8
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e042      	b.n	800524c <UART_SetConfig+0x348>
 80051c6:	bf00      	nop
 80051c8:	efff69f3 	.word	0xefff69f3
 80051cc:	40011000 	.word	0x40011000
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40004400 	.word	0x40004400
 80051d8:	40004800 	.word	0x40004800
 80051dc:	40004c00 	.word	0x40004c00
 80051e0:	40005000 	.word	0x40005000
 80051e4:	40011400 	.word	0x40011400
 80051e8:	40007800 	.word	0x40007800
 80051ec:	2310      	movs	r3, #16
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e02c      	b.n	800524c <UART_SetConfig+0x348>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a72      	ldr	r2, [pc, #456]	; (80053c0 <UART_SetConfig+0x4bc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d125      	bne.n	8005248 <UART_SetConfig+0x344>
 80051fc:	4b71      	ldr	r3, [pc, #452]	; (80053c4 <UART_SetConfig+0x4c0>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005206:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800520a:	d017      	beq.n	800523c <UART_SetConfig+0x338>
 800520c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005210:	d817      	bhi.n	8005242 <UART_SetConfig+0x33e>
 8005212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005216:	d00b      	beq.n	8005230 <UART_SetConfig+0x32c>
 8005218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521c:	d811      	bhi.n	8005242 <UART_SetConfig+0x33e>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <UART_SetConfig+0x326>
 8005222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005226:	d006      	beq.n	8005236 <UART_SetConfig+0x332>
 8005228:	e00b      	b.n	8005242 <UART_SetConfig+0x33e>
 800522a:	2300      	movs	r3, #0
 800522c:	77fb      	strb	r3, [r7, #31]
 800522e:	e00d      	b.n	800524c <UART_SetConfig+0x348>
 8005230:	2302      	movs	r3, #2
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e00a      	b.n	800524c <UART_SetConfig+0x348>
 8005236:	2304      	movs	r3, #4
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	e007      	b.n	800524c <UART_SetConfig+0x348>
 800523c:	2308      	movs	r3, #8
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e004      	b.n	800524c <UART_SetConfig+0x348>
 8005242:	2310      	movs	r3, #16
 8005244:	77fb      	strb	r3, [r7, #31]
 8005246:	e001      	b.n	800524c <UART_SetConfig+0x348>
 8005248:	2310      	movs	r3, #16
 800524a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005254:	d15b      	bne.n	800530e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005256:	7ffb      	ldrb	r3, [r7, #31]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d828      	bhi.n	80052ae <UART_SetConfig+0x3aa>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0x360>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005289 	.word	0x08005289
 8005268:	08005291 	.word	0x08005291
 800526c:	08005299 	.word	0x08005299
 8005270:	080052af 	.word	0x080052af
 8005274:	0800529f 	.word	0x0800529f
 8005278:	080052af 	.word	0x080052af
 800527c:	080052af 	.word	0x080052af
 8005280:	080052af 	.word	0x080052af
 8005284:	080052a7 	.word	0x080052a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005288:	f7fe f926 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 800528c:	61b8      	str	r0, [r7, #24]
        break;
 800528e:	e013      	b.n	80052b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005290:	f7fe f936 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8005294:	61b8      	str	r0, [r7, #24]
        break;
 8005296:	e00f      	b.n	80052b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005298:	4b4b      	ldr	r3, [pc, #300]	; (80053c8 <UART_SetConfig+0x4c4>)
 800529a:	61bb      	str	r3, [r7, #24]
        break;
 800529c:	e00c      	b.n	80052b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529e:	f7fe f80b 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 80052a2:	61b8      	str	r0, [r7, #24]
        break;
 80052a4:	e008      	b.n	80052b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052aa:	61bb      	str	r3, [r7, #24]
        break;
 80052ac:	e004      	b.n	80052b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	77bb      	strb	r3, [r7, #30]
        break;
 80052b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d074      	beq.n	80053a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	005a      	lsls	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	441a      	add	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b0f      	cmp	r3, #15
 80052d8:	d916      	bls.n	8005308 <UART_SetConfig+0x404>
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e0:	d212      	bcs.n	8005308 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f023 030f 	bic.w	r3, r3, #15
 80052ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	89fa      	ldrh	r2, [r7, #14]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	e04f      	b.n	80053a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	77bb      	strb	r3, [r7, #30]
 800530c:	e04c      	b.n	80053a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800530e:	7ffb      	ldrb	r3, [r7, #31]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d828      	bhi.n	8005366 <UART_SetConfig+0x462>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <UART_SetConfig+0x418>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	08005341 	.word	0x08005341
 8005320:	08005349 	.word	0x08005349
 8005324:	08005351 	.word	0x08005351
 8005328:	08005367 	.word	0x08005367
 800532c:	08005357 	.word	0x08005357
 8005330:	08005367 	.word	0x08005367
 8005334:	08005367 	.word	0x08005367
 8005338:	08005367 	.word	0x08005367
 800533c:	0800535f 	.word	0x0800535f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005340:	f7fe f8ca 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8005344:	61b8      	str	r0, [r7, #24]
        break;
 8005346:	e013      	b.n	8005370 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005348:	f7fe f8da 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 800534c:	61b8      	str	r0, [r7, #24]
        break;
 800534e:	e00f      	b.n	8005370 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005350:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <UART_SetConfig+0x4c4>)
 8005352:	61bb      	str	r3, [r7, #24]
        break;
 8005354:	e00c      	b.n	8005370 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005356:	f7fd ffaf 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 800535a:	61b8      	str	r0, [r7, #24]
        break;
 800535c:	e008      	b.n	8005370 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005362:	61bb      	str	r3, [r7, #24]
        break;
 8005364:	e004      	b.n	8005370 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	77bb      	strb	r3, [r7, #30]
        break;
 800536e:	bf00      	nop
    }

    if (pclk != 0U)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d018      	beq.n	80053a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	085a      	lsrs	r2, r3, #1
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	441a      	add	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b0f      	cmp	r3, #15
 800538e:	d909      	bls.n	80053a4 <UART_SetConfig+0x4a0>
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005396:	d205      	bcs.n	80053a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	b29a      	uxth	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60da      	str	r2, [r3, #12]
 80053a2:	e001      	b.n	80053a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80053b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40007c00 	.word	0x40007c00
 80053c4:	40023800 	.word	0x40023800
 80053c8:	00f42400 	.word	0x00f42400

080053cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01a      	beq.n	80054e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ca:	d10a      	bne.n	80054e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
  }
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af02      	add	r7, sp, #8
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005520:	f7fc fba6 	bl	8001c70 <HAL_GetTick>
 8005524:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b08      	cmp	r3, #8
 8005532:	d10e      	bne.n	8005552 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f81b 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e011      	b.n	8005576 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b09c      	sub	sp, #112	; 0x70
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4613      	mov	r3, r2
 800558c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558e:	e0a7      	b.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	f000 80a3 	beq.w	80056e0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fc fb69 	bl	8001c70 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80055aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d13f      	bne.n	8005630 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055c4:	667b      	str	r3, [r7, #100]	; 0x64
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e6      	bne.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	663b      	str	r3, [r7, #96]	; 0x60
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005602:	64ba      	str	r2, [r7, #72]	; 0x48
 8005604:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e068      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	d050      	beq.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564c:	d148      	bne.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005656:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800566c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
 8005678:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800567c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e6      	bne.n	8005658 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	613b      	str	r3, [r7, #16]
   return(result);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f023 0301 	bic.w	r3, r3, #1
 80056a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056aa:	623a      	str	r2, [r7, #32]
 80056ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	69f9      	ldr	r1, [r7, #28]
 80056b0:	6a3a      	ldr	r2, [r7, #32]
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e5      	bne.n	800568a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e010      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4013      	ands	r3, r2
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	f43f af48 	beq.w	8005590 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3770      	adds	r7, #112	; 0x70
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800570c:	b480      	push	{r7}
 800570e:	b097      	sub	sp, #92	; 0x5c
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	88fa      	ldrh	r2, [r7, #6]
 800572c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573e:	d10e      	bne.n	800575e <UART_Start_Receive_IT+0x52>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <UART_Start_Receive_IT+0x48>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800574e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005752:	e02d      	b.n	80057b0 <UART_Start_Receive_IT+0xa4>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	22ff      	movs	r2, #255	; 0xff
 8005758:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800575c:	e028      	b.n	80057b0 <UART_Start_Receive_IT+0xa4>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10d      	bne.n	8005782 <UART_Start_Receive_IT+0x76>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <UART_Start_Receive_IT+0x6c>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	22ff      	movs	r2, #255	; 0xff
 8005772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005776:	e01b      	b.n	80057b0 <UART_Start_Receive_IT+0xa4>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	227f      	movs	r2, #127	; 0x7f
 800577c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005780:	e016      	b.n	80057b0 <UART_Start_Receive_IT+0xa4>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800578a:	d10d      	bne.n	80057a8 <UART_Start_Receive_IT+0x9c>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d104      	bne.n	800579e <UART_Start_Receive_IT+0x92>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	227f      	movs	r2, #127	; 0x7f
 8005798:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800579c:	e008      	b.n	80057b0 <UART_Start_Receive_IT+0xa4>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	223f      	movs	r2, #63	; 0x3f
 80057a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057a6:	e003      	b.n	80057b0 <UART_Start_Receive_IT+0xa4>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2222      	movs	r2, #34	; 0x22
 80057bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	657b      	str	r3, [r7, #84]	; 0x54
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3308      	adds	r3, #8
 80057de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80057e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e5      	bne.n	80057c0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fc:	d107      	bne.n	800580e <UART_Start_Receive_IT+0x102>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4a21      	ldr	r2, [pc, #132]	; (8005890 <UART_Start_Receive_IT+0x184>)
 800580a:	669a      	str	r2, [r3, #104]	; 0x68
 800580c:	e002      	b.n	8005814 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4a20      	ldr	r2, [pc, #128]	; (8005894 <UART_Start_Receive_IT+0x188>)
 8005812:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d019      	beq.n	8005850 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583a:	637b      	str	r3, [r7, #52]	; 0x34
 800583c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e6      	bne.n	800581c <UART_Start_Receive_IT+0x110>
 800584e:	e018      	b.n	8005882 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	613b      	str	r3, [r7, #16]
   return(result);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f043 0320 	orr.w	r3, r3, #32
 8005864:	653b      	str	r3, [r7, #80]	; 0x50
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586e:	623b      	str	r3, [r7, #32]
 8005870:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	69f9      	ldr	r1, [r7, #28]
 8005874:	6a3a      	ldr	r2, [r7, #32]
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	61bb      	str	r3, [r7, #24]
   return(result);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e6      	bne.n	8005850 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	375c      	adds	r7, #92	; 0x5c
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	08005b47 	.word	0x08005b47
 8005894:	080059e1 	.word	0x080059e1

08005898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b095      	sub	sp, #84	; 0x54
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058be:	643b      	str	r3, [r7, #64]	; 0x40
 80058c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e6      	bne.n	80058a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590a:	2b01      	cmp	r3, #1
 800590c:	d118      	bne.n	8005940 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	60bb      	str	r3, [r7, #8]
   return(result);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f023 0310 	bic.w	r3, r3, #16
 8005922:	647b      	str	r3, [r7, #68]	; 0x44
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	6979      	ldr	r1, [r7, #20]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	e841 2300 	strex	r3, r2, [r1]
 8005938:	613b      	str	r3, [r7, #16]
   return(result);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e6      	bne.n	800590e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005954:	bf00      	nop
 8005956:	3754      	adds	r7, #84	; 0x54
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f7ff faaa 	bl	8004ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	6979      	ldr	r1, [r7, #20]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	613b      	str	r3, [r7, #16]
   return(result);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e6      	bne.n	8005994 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fa76 	bl	8004ec4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d8:	bf00      	nop
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b096      	sub	sp, #88	; 0x58
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f8:	2b22      	cmp	r3, #34	; 0x22
 80059fa:	f040 8098 	bne.w	8005b2e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a08:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005a0c:	b2d9      	uxtb	r1, r3
 8005a0e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a18:	400a      	ands	r2, r1
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d17b      	bne.n	8005b3e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a64:	647b      	str	r3, [r7, #68]	; 0x44
 8005a66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e6      	bne.n	8005a46 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	e853 3f00 	ldrex	r3, [r3]
 8005a86:	623b      	str	r3, [r7, #32]
   return(result);
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3308      	adds	r3, #8
 8005a96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a98:	633a      	str	r2, [r7, #48]	; 0x30
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e5      	bne.n	8005a78 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d12e      	bne.n	8005b26 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0310 	bic.w	r3, r3, #16
 8005ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	69b9      	ldr	r1, [r7, #24]
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	617b      	str	r3, [r7, #20]
   return(result);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e6      	bne.n	8005ace <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d103      	bne.n	8005b16 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2210      	movs	r2, #16
 8005b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff f9e4 	bl	8004eec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b24:	e00b      	b.n	8005b3e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fb fdea 	bl	8001700 <HAL_UART_RxCpltCallback>
}
 8005b2c:	e007      	b.n	8005b3e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0208 	orr.w	r2, r2, #8
 8005b3c:	619a      	str	r2, [r3, #24]
}
 8005b3e:	bf00      	nop
 8005b40:	3758      	adds	r7, #88	; 0x58
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b096      	sub	sp, #88	; 0x58
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b5e:	2b22      	cmp	r3, #34	; 0x22
 8005b60:	f040 8098 	bne.w	8005c94 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b74:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005b78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b82:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b88:	1c9a      	adds	r2, r3, #2
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d17b      	bne.n	8005ca4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bca:	643b      	str	r3, [r7, #64]	; 0x40
 8005bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e6      	bne.n	8005bac <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e5      	bne.n	8005bde <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d12e      	bne.n	8005c8c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f023 0310 	bic.w	r3, r3, #16
 8005c48:	647b      	str	r3, [r7, #68]	; 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c52:	61bb      	str	r3, [r7, #24]
 8005c54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e6      	bne.n	8005c34 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d103      	bne.n	8005c7c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2210      	movs	r2, #16
 8005c7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff f931 	bl	8004eec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c8a:	e00b      	b.n	8005ca4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fb fd37 	bl	8001700 <HAL_UART_RxCpltCallback>
}
 8005c92:	e007      	b.n	8005ca4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0208 	orr.w	r2, r2, #8
 8005ca2:	619a      	str	r2, [r3, #24]
}
 8005ca4:	bf00      	nop
 8005ca6:	3758      	adds	r7, #88	; 0x58
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <__errno>:
 8005cac:	4b01      	ldr	r3, [pc, #4]	; (8005cb4 <__errno+0x8>)
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20000010 	.word	0x20000010

08005cb8 <__libc_init_array>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4d0d      	ldr	r5, [pc, #52]	; (8005cf0 <__libc_init_array+0x38>)
 8005cbc:	4c0d      	ldr	r4, [pc, #52]	; (8005cf4 <__libc_init_array+0x3c>)
 8005cbe:	1b64      	subs	r4, r4, r5
 8005cc0:	10a4      	asrs	r4, r4, #2
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	42a6      	cmp	r6, r4
 8005cc6:	d109      	bne.n	8005cdc <__libc_init_array+0x24>
 8005cc8:	4d0b      	ldr	r5, [pc, #44]	; (8005cf8 <__libc_init_array+0x40>)
 8005cca:	4c0c      	ldr	r4, [pc, #48]	; (8005cfc <__libc_init_array+0x44>)
 8005ccc:	f002 ff18 	bl	8008b00 <_init>
 8005cd0:	1b64      	subs	r4, r4, r5
 8005cd2:	10a4      	asrs	r4, r4, #2
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	42a6      	cmp	r6, r4
 8005cd8:	d105      	bne.n	8005ce6 <__libc_init_array+0x2e>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce0:	4798      	blx	r3
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__libc_init_array+0xc>
 8005ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cea:	4798      	blx	r3
 8005cec:	3601      	adds	r6, #1
 8005cee:	e7f2      	b.n	8005cd6 <__libc_init_array+0x1e>
 8005cf0:	0800904c 	.word	0x0800904c
 8005cf4:	0800904c 	.word	0x0800904c
 8005cf8:	0800904c 	.word	0x0800904c
 8005cfc:	08009050 	.word	0x08009050

08005d00 <memset>:
 8005d00:	4402      	add	r2, r0
 8005d02:	4603      	mov	r3, r0
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d100      	bne.n	8005d0a <memset+0xa>
 8005d08:	4770      	bx	lr
 8005d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d0e:	e7f9      	b.n	8005d04 <memset+0x4>

08005d10 <__cvt>:
 8005d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d14:	ec55 4b10 	vmov	r4, r5, d0
 8005d18:	2d00      	cmp	r5, #0
 8005d1a:	460e      	mov	r6, r1
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	462b      	mov	r3, r5
 8005d20:	bfbb      	ittet	lt
 8005d22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d26:	461d      	movlt	r5, r3
 8005d28:	2300      	movge	r3, #0
 8005d2a:	232d      	movlt	r3, #45	; 0x2d
 8005d2c:	700b      	strb	r3, [r1, #0]
 8005d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d34:	4691      	mov	r9, r2
 8005d36:	f023 0820 	bic.w	r8, r3, #32
 8005d3a:	bfbc      	itt	lt
 8005d3c:	4622      	movlt	r2, r4
 8005d3e:	4614      	movlt	r4, r2
 8005d40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d44:	d005      	beq.n	8005d52 <__cvt+0x42>
 8005d46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d4a:	d100      	bne.n	8005d4e <__cvt+0x3e>
 8005d4c:	3601      	adds	r6, #1
 8005d4e:	2102      	movs	r1, #2
 8005d50:	e000      	b.n	8005d54 <__cvt+0x44>
 8005d52:	2103      	movs	r1, #3
 8005d54:	ab03      	add	r3, sp, #12
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	ab02      	add	r3, sp, #8
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	ec45 4b10 	vmov	d0, r4, r5
 8005d60:	4653      	mov	r3, sl
 8005d62:	4632      	mov	r2, r6
 8005d64:	f000 fd00 	bl	8006768 <_dtoa_r>
 8005d68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d6c:	4607      	mov	r7, r0
 8005d6e:	d102      	bne.n	8005d76 <__cvt+0x66>
 8005d70:	f019 0f01 	tst.w	r9, #1
 8005d74:	d022      	beq.n	8005dbc <__cvt+0xac>
 8005d76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d7a:	eb07 0906 	add.w	r9, r7, r6
 8005d7e:	d110      	bne.n	8005da2 <__cvt+0x92>
 8005d80:	783b      	ldrb	r3, [r7, #0]
 8005d82:	2b30      	cmp	r3, #48	; 0x30
 8005d84:	d10a      	bne.n	8005d9c <__cvt+0x8c>
 8005d86:	2200      	movs	r2, #0
 8005d88:	2300      	movs	r3, #0
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	f7fa febb 	bl	8000b08 <__aeabi_dcmpeq>
 8005d92:	b918      	cbnz	r0, 8005d9c <__cvt+0x8c>
 8005d94:	f1c6 0601 	rsb	r6, r6, #1
 8005d98:	f8ca 6000 	str.w	r6, [sl]
 8005d9c:	f8da 3000 	ldr.w	r3, [sl]
 8005da0:	4499      	add	r9, r3
 8005da2:	2200      	movs	r2, #0
 8005da4:	2300      	movs	r3, #0
 8005da6:	4620      	mov	r0, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	f7fa fead 	bl	8000b08 <__aeabi_dcmpeq>
 8005dae:	b108      	cbz	r0, 8005db4 <__cvt+0xa4>
 8005db0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005db4:	2230      	movs	r2, #48	; 0x30
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	454b      	cmp	r3, r9
 8005dba:	d307      	bcc.n	8005dcc <__cvt+0xbc>
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dc0:	1bdb      	subs	r3, r3, r7
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	b004      	add	sp, #16
 8005dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dcc:	1c59      	adds	r1, r3, #1
 8005dce:	9103      	str	r1, [sp, #12]
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	e7f0      	b.n	8005db6 <__cvt+0xa6>

08005dd4 <__exponent>:
 8005dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	bfb8      	it	lt
 8005ddc:	4249      	neglt	r1, r1
 8005dde:	f803 2b02 	strb.w	r2, [r3], #2
 8005de2:	bfb4      	ite	lt
 8005de4:	222d      	movlt	r2, #45	; 0x2d
 8005de6:	222b      	movge	r2, #43	; 0x2b
 8005de8:	2909      	cmp	r1, #9
 8005dea:	7042      	strb	r2, [r0, #1]
 8005dec:	dd2a      	ble.n	8005e44 <__exponent+0x70>
 8005dee:	f10d 0407 	add.w	r4, sp, #7
 8005df2:	46a4      	mov	ip, r4
 8005df4:	270a      	movs	r7, #10
 8005df6:	46a6      	mov	lr, r4
 8005df8:	460a      	mov	r2, r1
 8005dfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8005dfe:	fb07 1516 	mls	r5, r7, r6, r1
 8005e02:	3530      	adds	r5, #48	; 0x30
 8005e04:	2a63      	cmp	r2, #99	; 0x63
 8005e06:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e0e:	4631      	mov	r1, r6
 8005e10:	dcf1      	bgt.n	8005df6 <__exponent+0x22>
 8005e12:	3130      	adds	r1, #48	; 0x30
 8005e14:	f1ae 0502 	sub.w	r5, lr, #2
 8005e18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e1c:	1c44      	adds	r4, r0, #1
 8005e1e:	4629      	mov	r1, r5
 8005e20:	4561      	cmp	r1, ip
 8005e22:	d30a      	bcc.n	8005e3a <__exponent+0x66>
 8005e24:	f10d 0209 	add.w	r2, sp, #9
 8005e28:	eba2 020e 	sub.w	r2, r2, lr
 8005e2c:	4565      	cmp	r5, ip
 8005e2e:	bf88      	it	hi
 8005e30:	2200      	movhi	r2, #0
 8005e32:	4413      	add	r3, r2
 8005e34:	1a18      	subs	r0, r3, r0
 8005e36:	b003      	add	sp, #12
 8005e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e42:	e7ed      	b.n	8005e20 <__exponent+0x4c>
 8005e44:	2330      	movs	r3, #48	; 0x30
 8005e46:	3130      	adds	r1, #48	; 0x30
 8005e48:	7083      	strb	r3, [r0, #2]
 8005e4a:	70c1      	strb	r1, [r0, #3]
 8005e4c:	1d03      	adds	r3, r0, #4
 8005e4e:	e7f1      	b.n	8005e34 <__exponent+0x60>

08005e50 <_printf_float>:
 8005e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e54:	ed2d 8b02 	vpush	{d8}
 8005e58:	b08d      	sub	sp, #52	; 0x34
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e60:	4616      	mov	r6, r2
 8005e62:	461f      	mov	r7, r3
 8005e64:	4605      	mov	r5, r0
 8005e66:	f001 fa6d 	bl	8007344 <_localeconv_r>
 8005e6a:	f8d0 a000 	ldr.w	sl, [r0]
 8005e6e:	4650      	mov	r0, sl
 8005e70:	f7fa f9ce 	bl	8000210 <strlen>
 8005e74:	2300      	movs	r3, #0
 8005e76:	930a      	str	r3, [sp, #40]	; 0x28
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	9305      	str	r3, [sp, #20]
 8005e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e84:	3307      	adds	r3, #7
 8005e86:	f023 0307 	bic.w	r3, r3, #7
 8005e8a:	f103 0208 	add.w	r2, r3, #8
 8005e8e:	f8c8 2000 	str.w	r2, [r8]
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ea2:	9307      	str	r3, [sp, #28]
 8005ea4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ea8:	ee08 0a10 	vmov	s16, r0
 8005eac:	4b9f      	ldr	r3, [pc, #636]	; (800612c <_printf_float+0x2dc>)
 8005eae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb6:	f7fa fe59 	bl	8000b6c <__aeabi_dcmpun>
 8005eba:	bb88      	cbnz	r0, 8005f20 <_printf_float+0xd0>
 8005ebc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ec0:	4b9a      	ldr	r3, [pc, #616]	; (800612c <_printf_float+0x2dc>)
 8005ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec6:	f7fa fe33 	bl	8000b30 <__aeabi_dcmple>
 8005eca:	bb48      	cbnz	r0, 8005f20 <_printf_float+0xd0>
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2300      	movs	r3, #0
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	f7fa fe22 	bl	8000b1c <__aeabi_dcmplt>
 8005ed8:	b110      	cbz	r0, 8005ee0 <_printf_float+0x90>
 8005eda:	232d      	movs	r3, #45	; 0x2d
 8005edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee0:	4b93      	ldr	r3, [pc, #588]	; (8006130 <_printf_float+0x2e0>)
 8005ee2:	4894      	ldr	r0, [pc, #592]	; (8006134 <_printf_float+0x2e4>)
 8005ee4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ee8:	bf94      	ite	ls
 8005eea:	4698      	movls	r8, r3
 8005eec:	4680      	movhi	r8, r0
 8005eee:	2303      	movs	r3, #3
 8005ef0:	6123      	str	r3, [r4, #16]
 8005ef2:	9b05      	ldr	r3, [sp, #20]
 8005ef4:	f023 0204 	bic.w	r2, r3, #4
 8005ef8:	6022      	str	r2, [r4, #0]
 8005efa:	f04f 0900 	mov.w	r9, #0
 8005efe:	9700      	str	r7, [sp, #0]
 8005f00:	4633      	mov	r3, r6
 8005f02:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f04:	4621      	mov	r1, r4
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 f9d8 	bl	80062bc <_printf_common>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	f040 8090 	bne.w	8006032 <_printf_float+0x1e2>
 8005f12:	f04f 30ff 	mov.w	r0, #4294967295
 8005f16:	b00d      	add	sp, #52	; 0x34
 8005f18:	ecbd 8b02 	vpop	{d8}
 8005f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f20:	4642      	mov	r2, r8
 8005f22:	464b      	mov	r3, r9
 8005f24:	4640      	mov	r0, r8
 8005f26:	4649      	mov	r1, r9
 8005f28:	f7fa fe20 	bl	8000b6c <__aeabi_dcmpun>
 8005f2c:	b140      	cbz	r0, 8005f40 <_printf_float+0xf0>
 8005f2e:	464b      	mov	r3, r9
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bfbc      	itt	lt
 8005f34:	232d      	movlt	r3, #45	; 0x2d
 8005f36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f3a:	487f      	ldr	r0, [pc, #508]	; (8006138 <_printf_float+0x2e8>)
 8005f3c:	4b7f      	ldr	r3, [pc, #508]	; (800613c <_printf_float+0x2ec>)
 8005f3e:	e7d1      	b.n	8005ee4 <_printf_float+0x94>
 8005f40:	6863      	ldr	r3, [r4, #4]
 8005f42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f46:	9206      	str	r2, [sp, #24]
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	d13f      	bne.n	8005fcc <_printf_float+0x17c>
 8005f4c:	2306      	movs	r3, #6
 8005f4e:	6063      	str	r3, [r4, #4]
 8005f50:	9b05      	ldr	r3, [sp, #20]
 8005f52:	6861      	ldr	r1, [r4, #4]
 8005f54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9303      	str	r3, [sp, #12]
 8005f5c:	ab0a      	add	r3, sp, #40	; 0x28
 8005f5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f62:	ab09      	add	r3, sp, #36	; 0x24
 8005f64:	ec49 8b10 	vmov	d0, r8, r9
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	6022      	str	r2, [r4, #0]
 8005f6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f70:	4628      	mov	r0, r5
 8005f72:	f7ff fecd 	bl	8005d10 <__cvt>
 8005f76:	9b06      	ldr	r3, [sp, #24]
 8005f78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f7a:	2b47      	cmp	r3, #71	; 0x47
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	d108      	bne.n	8005f92 <_printf_float+0x142>
 8005f80:	1cc8      	adds	r0, r1, #3
 8005f82:	db02      	blt.n	8005f8a <_printf_float+0x13a>
 8005f84:	6863      	ldr	r3, [r4, #4]
 8005f86:	4299      	cmp	r1, r3
 8005f88:	dd41      	ble.n	800600e <_printf_float+0x1be>
 8005f8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f8e:	fa5f fb8b 	uxtb.w	fp, fp
 8005f92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f96:	d820      	bhi.n	8005fda <_printf_float+0x18a>
 8005f98:	3901      	subs	r1, #1
 8005f9a:	465a      	mov	r2, fp
 8005f9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fa0:	9109      	str	r1, [sp, #36]	; 0x24
 8005fa2:	f7ff ff17 	bl	8005dd4 <__exponent>
 8005fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fa8:	1813      	adds	r3, r2, r0
 8005faa:	2a01      	cmp	r2, #1
 8005fac:	4681      	mov	r9, r0
 8005fae:	6123      	str	r3, [r4, #16]
 8005fb0:	dc02      	bgt.n	8005fb8 <_printf_float+0x168>
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	07d2      	lsls	r2, r2, #31
 8005fb6:	d501      	bpl.n	8005fbc <_printf_float+0x16c>
 8005fb8:	3301      	adds	r3, #1
 8005fba:	6123      	str	r3, [r4, #16]
 8005fbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d09c      	beq.n	8005efe <_printf_float+0xae>
 8005fc4:	232d      	movs	r3, #45	; 0x2d
 8005fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fca:	e798      	b.n	8005efe <_printf_float+0xae>
 8005fcc:	9a06      	ldr	r2, [sp, #24]
 8005fce:	2a47      	cmp	r2, #71	; 0x47
 8005fd0:	d1be      	bne.n	8005f50 <_printf_float+0x100>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1bc      	bne.n	8005f50 <_printf_float+0x100>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e7b9      	b.n	8005f4e <_printf_float+0xfe>
 8005fda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005fde:	d118      	bne.n	8006012 <_printf_float+0x1c2>
 8005fe0:	2900      	cmp	r1, #0
 8005fe2:	6863      	ldr	r3, [r4, #4]
 8005fe4:	dd0b      	ble.n	8005ffe <_printf_float+0x1ae>
 8005fe6:	6121      	str	r1, [r4, #16]
 8005fe8:	b913      	cbnz	r3, 8005ff0 <_printf_float+0x1a0>
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	07d0      	lsls	r0, r2, #31
 8005fee:	d502      	bpl.n	8005ff6 <_printf_float+0x1a6>
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	440b      	add	r3, r1
 8005ff4:	6123      	str	r3, [r4, #16]
 8005ff6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ff8:	f04f 0900 	mov.w	r9, #0
 8005ffc:	e7de      	b.n	8005fbc <_printf_float+0x16c>
 8005ffe:	b913      	cbnz	r3, 8006006 <_printf_float+0x1b6>
 8006000:	6822      	ldr	r2, [r4, #0]
 8006002:	07d2      	lsls	r2, r2, #31
 8006004:	d501      	bpl.n	800600a <_printf_float+0x1ba>
 8006006:	3302      	adds	r3, #2
 8006008:	e7f4      	b.n	8005ff4 <_printf_float+0x1a4>
 800600a:	2301      	movs	r3, #1
 800600c:	e7f2      	b.n	8005ff4 <_printf_float+0x1a4>
 800600e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006014:	4299      	cmp	r1, r3
 8006016:	db05      	blt.n	8006024 <_printf_float+0x1d4>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	6121      	str	r1, [r4, #16]
 800601c:	07d8      	lsls	r0, r3, #31
 800601e:	d5ea      	bpl.n	8005ff6 <_printf_float+0x1a6>
 8006020:	1c4b      	adds	r3, r1, #1
 8006022:	e7e7      	b.n	8005ff4 <_printf_float+0x1a4>
 8006024:	2900      	cmp	r1, #0
 8006026:	bfd4      	ite	le
 8006028:	f1c1 0202 	rsble	r2, r1, #2
 800602c:	2201      	movgt	r2, #1
 800602e:	4413      	add	r3, r2
 8006030:	e7e0      	b.n	8005ff4 <_printf_float+0x1a4>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	055a      	lsls	r2, r3, #21
 8006036:	d407      	bmi.n	8006048 <_printf_float+0x1f8>
 8006038:	6923      	ldr	r3, [r4, #16]
 800603a:	4642      	mov	r2, r8
 800603c:	4631      	mov	r1, r6
 800603e:	4628      	mov	r0, r5
 8006040:	47b8      	blx	r7
 8006042:	3001      	adds	r0, #1
 8006044:	d12c      	bne.n	80060a0 <_printf_float+0x250>
 8006046:	e764      	b.n	8005f12 <_printf_float+0xc2>
 8006048:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800604c:	f240 80e0 	bls.w	8006210 <_printf_float+0x3c0>
 8006050:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006054:	2200      	movs	r2, #0
 8006056:	2300      	movs	r3, #0
 8006058:	f7fa fd56 	bl	8000b08 <__aeabi_dcmpeq>
 800605c:	2800      	cmp	r0, #0
 800605e:	d034      	beq.n	80060ca <_printf_float+0x27a>
 8006060:	4a37      	ldr	r2, [pc, #220]	; (8006140 <_printf_float+0x2f0>)
 8006062:	2301      	movs	r3, #1
 8006064:	4631      	mov	r1, r6
 8006066:	4628      	mov	r0, r5
 8006068:	47b8      	blx	r7
 800606a:	3001      	adds	r0, #1
 800606c:	f43f af51 	beq.w	8005f12 <_printf_float+0xc2>
 8006070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006074:	429a      	cmp	r2, r3
 8006076:	db02      	blt.n	800607e <_printf_float+0x22e>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	07d8      	lsls	r0, r3, #31
 800607c:	d510      	bpl.n	80060a0 <_printf_float+0x250>
 800607e:	ee18 3a10 	vmov	r3, s16
 8006082:	4652      	mov	r2, sl
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	47b8      	blx	r7
 800608a:	3001      	adds	r0, #1
 800608c:	f43f af41 	beq.w	8005f12 <_printf_float+0xc2>
 8006090:	f04f 0800 	mov.w	r8, #0
 8006094:	f104 091a 	add.w	r9, r4, #26
 8006098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800609a:	3b01      	subs	r3, #1
 800609c:	4543      	cmp	r3, r8
 800609e:	dc09      	bgt.n	80060b4 <_printf_float+0x264>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	079b      	lsls	r3, r3, #30
 80060a4:	f100 8105 	bmi.w	80062b2 <_printf_float+0x462>
 80060a8:	68e0      	ldr	r0, [r4, #12]
 80060aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ac:	4298      	cmp	r0, r3
 80060ae:	bfb8      	it	lt
 80060b0:	4618      	movlt	r0, r3
 80060b2:	e730      	b.n	8005f16 <_printf_float+0xc6>
 80060b4:	2301      	movs	r3, #1
 80060b6:	464a      	mov	r2, r9
 80060b8:	4631      	mov	r1, r6
 80060ba:	4628      	mov	r0, r5
 80060bc:	47b8      	blx	r7
 80060be:	3001      	adds	r0, #1
 80060c0:	f43f af27 	beq.w	8005f12 <_printf_float+0xc2>
 80060c4:	f108 0801 	add.w	r8, r8, #1
 80060c8:	e7e6      	b.n	8006098 <_printf_float+0x248>
 80060ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dc39      	bgt.n	8006144 <_printf_float+0x2f4>
 80060d0:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <_printf_float+0x2f0>)
 80060d2:	2301      	movs	r3, #1
 80060d4:	4631      	mov	r1, r6
 80060d6:	4628      	mov	r0, r5
 80060d8:	47b8      	blx	r7
 80060da:	3001      	adds	r0, #1
 80060dc:	f43f af19 	beq.w	8005f12 <_printf_float+0xc2>
 80060e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060e4:	4313      	orrs	r3, r2
 80060e6:	d102      	bne.n	80060ee <_printf_float+0x29e>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	07d9      	lsls	r1, r3, #31
 80060ec:	d5d8      	bpl.n	80060a0 <_printf_float+0x250>
 80060ee:	ee18 3a10 	vmov	r3, s16
 80060f2:	4652      	mov	r2, sl
 80060f4:	4631      	mov	r1, r6
 80060f6:	4628      	mov	r0, r5
 80060f8:	47b8      	blx	r7
 80060fa:	3001      	adds	r0, #1
 80060fc:	f43f af09 	beq.w	8005f12 <_printf_float+0xc2>
 8006100:	f04f 0900 	mov.w	r9, #0
 8006104:	f104 0a1a 	add.w	sl, r4, #26
 8006108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800610a:	425b      	negs	r3, r3
 800610c:	454b      	cmp	r3, r9
 800610e:	dc01      	bgt.n	8006114 <_printf_float+0x2c4>
 8006110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006112:	e792      	b.n	800603a <_printf_float+0x1ea>
 8006114:	2301      	movs	r3, #1
 8006116:	4652      	mov	r2, sl
 8006118:	4631      	mov	r1, r6
 800611a:	4628      	mov	r0, r5
 800611c:	47b8      	blx	r7
 800611e:	3001      	adds	r0, #1
 8006120:	f43f aef7 	beq.w	8005f12 <_printf_float+0xc2>
 8006124:	f109 0901 	add.w	r9, r9, #1
 8006128:	e7ee      	b.n	8006108 <_printf_float+0x2b8>
 800612a:	bf00      	nop
 800612c:	7fefffff 	.word	0x7fefffff
 8006130:	08008c6c 	.word	0x08008c6c
 8006134:	08008c70 	.word	0x08008c70
 8006138:	08008c78 	.word	0x08008c78
 800613c:	08008c74 	.word	0x08008c74
 8006140:	08008c7c 	.word	0x08008c7c
 8006144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006148:	429a      	cmp	r2, r3
 800614a:	bfa8      	it	ge
 800614c:	461a      	movge	r2, r3
 800614e:	2a00      	cmp	r2, #0
 8006150:	4691      	mov	r9, r2
 8006152:	dc37      	bgt.n	80061c4 <_printf_float+0x374>
 8006154:	f04f 0b00 	mov.w	fp, #0
 8006158:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800615c:	f104 021a 	add.w	r2, r4, #26
 8006160:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006162:	9305      	str	r3, [sp, #20]
 8006164:	eba3 0309 	sub.w	r3, r3, r9
 8006168:	455b      	cmp	r3, fp
 800616a:	dc33      	bgt.n	80061d4 <_printf_float+0x384>
 800616c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006170:	429a      	cmp	r2, r3
 8006172:	db3b      	blt.n	80061ec <_printf_float+0x39c>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	07da      	lsls	r2, r3, #31
 8006178:	d438      	bmi.n	80061ec <_printf_float+0x39c>
 800617a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800617c:	9a05      	ldr	r2, [sp, #20]
 800617e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006180:	1a9a      	subs	r2, r3, r2
 8006182:	eba3 0901 	sub.w	r9, r3, r1
 8006186:	4591      	cmp	r9, r2
 8006188:	bfa8      	it	ge
 800618a:	4691      	movge	r9, r2
 800618c:	f1b9 0f00 	cmp.w	r9, #0
 8006190:	dc35      	bgt.n	80061fe <_printf_float+0x3ae>
 8006192:	f04f 0800 	mov.w	r8, #0
 8006196:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800619a:	f104 0a1a 	add.w	sl, r4, #26
 800619e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	eba3 0309 	sub.w	r3, r3, r9
 80061a8:	4543      	cmp	r3, r8
 80061aa:	f77f af79 	ble.w	80060a0 <_printf_float+0x250>
 80061ae:	2301      	movs	r3, #1
 80061b0:	4652      	mov	r2, sl
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	f43f aeaa 	beq.w	8005f12 <_printf_float+0xc2>
 80061be:	f108 0801 	add.w	r8, r8, #1
 80061c2:	e7ec      	b.n	800619e <_printf_float+0x34e>
 80061c4:	4613      	mov	r3, r2
 80061c6:	4631      	mov	r1, r6
 80061c8:	4642      	mov	r2, r8
 80061ca:	4628      	mov	r0, r5
 80061cc:	47b8      	blx	r7
 80061ce:	3001      	adds	r0, #1
 80061d0:	d1c0      	bne.n	8006154 <_printf_float+0x304>
 80061d2:	e69e      	b.n	8005f12 <_printf_float+0xc2>
 80061d4:	2301      	movs	r3, #1
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	9205      	str	r2, [sp, #20]
 80061dc:	47b8      	blx	r7
 80061de:	3001      	adds	r0, #1
 80061e0:	f43f ae97 	beq.w	8005f12 <_printf_float+0xc2>
 80061e4:	9a05      	ldr	r2, [sp, #20]
 80061e6:	f10b 0b01 	add.w	fp, fp, #1
 80061ea:	e7b9      	b.n	8006160 <_printf_float+0x310>
 80061ec:	ee18 3a10 	vmov	r3, s16
 80061f0:	4652      	mov	r2, sl
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	d1be      	bne.n	800617a <_printf_float+0x32a>
 80061fc:	e689      	b.n	8005f12 <_printf_float+0xc2>
 80061fe:	9a05      	ldr	r2, [sp, #20]
 8006200:	464b      	mov	r3, r9
 8006202:	4442      	add	r2, r8
 8006204:	4631      	mov	r1, r6
 8006206:	4628      	mov	r0, r5
 8006208:	47b8      	blx	r7
 800620a:	3001      	adds	r0, #1
 800620c:	d1c1      	bne.n	8006192 <_printf_float+0x342>
 800620e:	e680      	b.n	8005f12 <_printf_float+0xc2>
 8006210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006212:	2a01      	cmp	r2, #1
 8006214:	dc01      	bgt.n	800621a <_printf_float+0x3ca>
 8006216:	07db      	lsls	r3, r3, #31
 8006218:	d538      	bpl.n	800628c <_printf_float+0x43c>
 800621a:	2301      	movs	r3, #1
 800621c:	4642      	mov	r2, r8
 800621e:	4631      	mov	r1, r6
 8006220:	4628      	mov	r0, r5
 8006222:	47b8      	blx	r7
 8006224:	3001      	adds	r0, #1
 8006226:	f43f ae74 	beq.w	8005f12 <_printf_float+0xc2>
 800622a:	ee18 3a10 	vmov	r3, s16
 800622e:	4652      	mov	r2, sl
 8006230:	4631      	mov	r1, r6
 8006232:	4628      	mov	r0, r5
 8006234:	47b8      	blx	r7
 8006236:	3001      	adds	r0, #1
 8006238:	f43f ae6b 	beq.w	8005f12 <_printf_float+0xc2>
 800623c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006240:	2200      	movs	r2, #0
 8006242:	2300      	movs	r3, #0
 8006244:	f7fa fc60 	bl	8000b08 <__aeabi_dcmpeq>
 8006248:	b9d8      	cbnz	r0, 8006282 <_printf_float+0x432>
 800624a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800624c:	f108 0201 	add.w	r2, r8, #1
 8006250:	3b01      	subs	r3, #1
 8006252:	4631      	mov	r1, r6
 8006254:	4628      	mov	r0, r5
 8006256:	47b8      	blx	r7
 8006258:	3001      	adds	r0, #1
 800625a:	d10e      	bne.n	800627a <_printf_float+0x42a>
 800625c:	e659      	b.n	8005f12 <_printf_float+0xc2>
 800625e:	2301      	movs	r3, #1
 8006260:	4652      	mov	r2, sl
 8006262:	4631      	mov	r1, r6
 8006264:	4628      	mov	r0, r5
 8006266:	47b8      	blx	r7
 8006268:	3001      	adds	r0, #1
 800626a:	f43f ae52 	beq.w	8005f12 <_printf_float+0xc2>
 800626e:	f108 0801 	add.w	r8, r8, #1
 8006272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006274:	3b01      	subs	r3, #1
 8006276:	4543      	cmp	r3, r8
 8006278:	dcf1      	bgt.n	800625e <_printf_float+0x40e>
 800627a:	464b      	mov	r3, r9
 800627c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006280:	e6dc      	b.n	800603c <_printf_float+0x1ec>
 8006282:	f04f 0800 	mov.w	r8, #0
 8006286:	f104 0a1a 	add.w	sl, r4, #26
 800628a:	e7f2      	b.n	8006272 <_printf_float+0x422>
 800628c:	2301      	movs	r3, #1
 800628e:	4642      	mov	r2, r8
 8006290:	e7df      	b.n	8006252 <_printf_float+0x402>
 8006292:	2301      	movs	r3, #1
 8006294:	464a      	mov	r2, r9
 8006296:	4631      	mov	r1, r6
 8006298:	4628      	mov	r0, r5
 800629a:	47b8      	blx	r7
 800629c:	3001      	adds	r0, #1
 800629e:	f43f ae38 	beq.w	8005f12 <_printf_float+0xc2>
 80062a2:	f108 0801 	add.w	r8, r8, #1
 80062a6:	68e3      	ldr	r3, [r4, #12]
 80062a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062aa:	1a5b      	subs	r3, r3, r1
 80062ac:	4543      	cmp	r3, r8
 80062ae:	dcf0      	bgt.n	8006292 <_printf_float+0x442>
 80062b0:	e6fa      	b.n	80060a8 <_printf_float+0x258>
 80062b2:	f04f 0800 	mov.w	r8, #0
 80062b6:	f104 0919 	add.w	r9, r4, #25
 80062ba:	e7f4      	b.n	80062a6 <_printf_float+0x456>

080062bc <_printf_common>:
 80062bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c0:	4616      	mov	r6, r2
 80062c2:	4699      	mov	r9, r3
 80062c4:	688a      	ldr	r2, [r1, #8]
 80062c6:	690b      	ldr	r3, [r1, #16]
 80062c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062cc:	4293      	cmp	r3, r2
 80062ce:	bfb8      	it	lt
 80062d0:	4613      	movlt	r3, r2
 80062d2:	6033      	str	r3, [r6, #0]
 80062d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062d8:	4607      	mov	r7, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	b10a      	cbz	r2, 80062e2 <_printf_common+0x26>
 80062de:	3301      	adds	r3, #1
 80062e0:	6033      	str	r3, [r6, #0]
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	0699      	lsls	r1, r3, #26
 80062e6:	bf42      	ittt	mi
 80062e8:	6833      	ldrmi	r3, [r6, #0]
 80062ea:	3302      	addmi	r3, #2
 80062ec:	6033      	strmi	r3, [r6, #0]
 80062ee:	6825      	ldr	r5, [r4, #0]
 80062f0:	f015 0506 	ands.w	r5, r5, #6
 80062f4:	d106      	bne.n	8006304 <_printf_common+0x48>
 80062f6:	f104 0a19 	add.w	sl, r4, #25
 80062fa:	68e3      	ldr	r3, [r4, #12]
 80062fc:	6832      	ldr	r2, [r6, #0]
 80062fe:	1a9b      	subs	r3, r3, r2
 8006300:	42ab      	cmp	r3, r5
 8006302:	dc26      	bgt.n	8006352 <_printf_common+0x96>
 8006304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006308:	1e13      	subs	r3, r2, #0
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	bf18      	it	ne
 800630e:	2301      	movne	r3, #1
 8006310:	0692      	lsls	r2, r2, #26
 8006312:	d42b      	bmi.n	800636c <_printf_common+0xb0>
 8006314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006318:	4649      	mov	r1, r9
 800631a:	4638      	mov	r0, r7
 800631c:	47c0      	blx	r8
 800631e:	3001      	adds	r0, #1
 8006320:	d01e      	beq.n	8006360 <_printf_common+0xa4>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	68e5      	ldr	r5, [r4, #12]
 8006326:	6832      	ldr	r2, [r6, #0]
 8006328:	f003 0306 	and.w	r3, r3, #6
 800632c:	2b04      	cmp	r3, #4
 800632e:	bf08      	it	eq
 8006330:	1aad      	subeq	r5, r5, r2
 8006332:	68a3      	ldr	r3, [r4, #8]
 8006334:	6922      	ldr	r2, [r4, #16]
 8006336:	bf0c      	ite	eq
 8006338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800633c:	2500      	movne	r5, #0
 800633e:	4293      	cmp	r3, r2
 8006340:	bfc4      	itt	gt
 8006342:	1a9b      	subgt	r3, r3, r2
 8006344:	18ed      	addgt	r5, r5, r3
 8006346:	2600      	movs	r6, #0
 8006348:	341a      	adds	r4, #26
 800634a:	42b5      	cmp	r5, r6
 800634c:	d11a      	bne.n	8006384 <_printf_common+0xc8>
 800634e:	2000      	movs	r0, #0
 8006350:	e008      	b.n	8006364 <_printf_common+0xa8>
 8006352:	2301      	movs	r3, #1
 8006354:	4652      	mov	r2, sl
 8006356:	4649      	mov	r1, r9
 8006358:	4638      	mov	r0, r7
 800635a:	47c0      	blx	r8
 800635c:	3001      	adds	r0, #1
 800635e:	d103      	bne.n	8006368 <_printf_common+0xac>
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006368:	3501      	adds	r5, #1
 800636a:	e7c6      	b.n	80062fa <_printf_common+0x3e>
 800636c:	18e1      	adds	r1, r4, r3
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	2030      	movs	r0, #48	; 0x30
 8006372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006376:	4422      	add	r2, r4
 8006378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800637c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006380:	3302      	adds	r3, #2
 8006382:	e7c7      	b.n	8006314 <_printf_common+0x58>
 8006384:	2301      	movs	r3, #1
 8006386:	4622      	mov	r2, r4
 8006388:	4649      	mov	r1, r9
 800638a:	4638      	mov	r0, r7
 800638c:	47c0      	blx	r8
 800638e:	3001      	adds	r0, #1
 8006390:	d0e6      	beq.n	8006360 <_printf_common+0xa4>
 8006392:	3601      	adds	r6, #1
 8006394:	e7d9      	b.n	800634a <_printf_common+0x8e>
	...

08006398 <_printf_i>:
 8006398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800639c:	7e0f      	ldrb	r7, [r1, #24]
 800639e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063a0:	2f78      	cmp	r7, #120	; 0x78
 80063a2:	4691      	mov	r9, r2
 80063a4:	4680      	mov	r8, r0
 80063a6:	460c      	mov	r4, r1
 80063a8:	469a      	mov	sl, r3
 80063aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063ae:	d807      	bhi.n	80063c0 <_printf_i+0x28>
 80063b0:	2f62      	cmp	r7, #98	; 0x62
 80063b2:	d80a      	bhi.n	80063ca <_printf_i+0x32>
 80063b4:	2f00      	cmp	r7, #0
 80063b6:	f000 80d8 	beq.w	800656a <_printf_i+0x1d2>
 80063ba:	2f58      	cmp	r7, #88	; 0x58
 80063bc:	f000 80a3 	beq.w	8006506 <_printf_i+0x16e>
 80063c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063c8:	e03a      	b.n	8006440 <_printf_i+0xa8>
 80063ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ce:	2b15      	cmp	r3, #21
 80063d0:	d8f6      	bhi.n	80063c0 <_printf_i+0x28>
 80063d2:	a101      	add	r1, pc, #4	; (adr r1, 80063d8 <_printf_i+0x40>)
 80063d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063d8:	08006431 	.word	0x08006431
 80063dc:	08006445 	.word	0x08006445
 80063e0:	080063c1 	.word	0x080063c1
 80063e4:	080063c1 	.word	0x080063c1
 80063e8:	080063c1 	.word	0x080063c1
 80063ec:	080063c1 	.word	0x080063c1
 80063f0:	08006445 	.word	0x08006445
 80063f4:	080063c1 	.word	0x080063c1
 80063f8:	080063c1 	.word	0x080063c1
 80063fc:	080063c1 	.word	0x080063c1
 8006400:	080063c1 	.word	0x080063c1
 8006404:	08006551 	.word	0x08006551
 8006408:	08006475 	.word	0x08006475
 800640c:	08006533 	.word	0x08006533
 8006410:	080063c1 	.word	0x080063c1
 8006414:	080063c1 	.word	0x080063c1
 8006418:	08006573 	.word	0x08006573
 800641c:	080063c1 	.word	0x080063c1
 8006420:	08006475 	.word	0x08006475
 8006424:	080063c1 	.word	0x080063c1
 8006428:	080063c1 	.word	0x080063c1
 800642c:	0800653b 	.word	0x0800653b
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	1d1a      	adds	r2, r3, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	602a      	str	r2, [r5, #0]
 8006438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800643c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006440:	2301      	movs	r3, #1
 8006442:	e0a3      	b.n	800658c <_printf_i+0x1f4>
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	6829      	ldr	r1, [r5, #0]
 8006448:	0606      	lsls	r6, r0, #24
 800644a:	f101 0304 	add.w	r3, r1, #4
 800644e:	d50a      	bpl.n	8006466 <_printf_i+0xce>
 8006450:	680e      	ldr	r6, [r1, #0]
 8006452:	602b      	str	r3, [r5, #0]
 8006454:	2e00      	cmp	r6, #0
 8006456:	da03      	bge.n	8006460 <_printf_i+0xc8>
 8006458:	232d      	movs	r3, #45	; 0x2d
 800645a:	4276      	negs	r6, r6
 800645c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006460:	485e      	ldr	r0, [pc, #376]	; (80065dc <_printf_i+0x244>)
 8006462:	230a      	movs	r3, #10
 8006464:	e019      	b.n	800649a <_printf_i+0x102>
 8006466:	680e      	ldr	r6, [r1, #0]
 8006468:	602b      	str	r3, [r5, #0]
 800646a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800646e:	bf18      	it	ne
 8006470:	b236      	sxthne	r6, r6
 8006472:	e7ef      	b.n	8006454 <_printf_i+0xbc>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	6820      	ldr	r0, [r4, #0]
 8006478:	1d19      	adds	r1, r3, #4
 800647a:	6029      	str	r1, [r5, #0]
 800647c:	0601      	lsls	r1, r0, #24
 800647e:	d501      	bpl.n	8006484 <_printf_i+0xec>
 8006480:	681e      	ldr	r6, [r3, #0]
 8006482:	e002      	b.n	800648a <_printf_i+0xf2>
 8006484:	0646      	lsls	r6, r0, #25
 8006486:	d5fb      	bpl.n	8006480 <_printf_i+0xe8>
 8006488:	881e      	ldrh	r6, [r3, #0]
 800648a:	4854      	ldr	r0, [pc, #336]	; (80065dc <_printf_i+0x244>)
 800648c:	2f6f      	cmp	r7, #111	; 0x6f
 800648e:	bf0c      	ite	eq
 8006490:	2308      	moveq	r3, #8
 8006492:	230a      	movne	r3, #10
 8006494:	2100      	movs	r1, #0
 8006496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800649a:	6865      	ldr	r5, [r4, #4]
 800649c:	60a5      	str	r5, [r4, #8]
 800649e:	2d00      	cmp	r5, #0
 80064a0:	bfa2      	ittt	ge
 80064a2:	6821      	ldrge	r1, [r4, #0]
 80064a4:	f021 0104 	bicge.w	r1, r1, #4
 80064a8:	6021      	strge	r1, [r4, #0]
 80064aa:	b90e      	cbnz	r6, 80064b0 <_printf_i+0x118>
 80064ac:	2d00      	cmp	r5, #0
 80064ae:	d04d      	beq.n	800654c <_printf_i+0x1b4>
 80064b0:	4615      	mov	r5, r2
 80064b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80064b6:	fb03 6711 	mls	r7, r3, r1, r6
 80064ba:	5dc7      	ldrb	r7, [r0, r7]
 80064bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064c0:	4637      	mov	r7, r6
 80064c2:	42bb      	cmp	r3, r7
 80064c4:	460e      	mov	r6, r1
 80064c6:	d9f4      	bls.n	80064b2 <_printf_i+0x11a>
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d10b      	bne.n	80064e4 <_printf_i+0x14c>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	07de      	lsls	r6, r3, #31
 80064d0:	d508      	bpl.n	80064e4 <_printf_i+0x14c>
 80064d2:	6923      	ldr	r3, [r4, #16]
 80064d4:	6861      	ldr	r1, [r4, #4]
 80064d6:	4299      	cmp	r1, r3
 80064d8:	bfde      	ittt	le
 80064da:	2330      	movle	r3, #48	; 0x30
 80064dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064e4:	1b52      	subs	r2, r2, r5
 80064e6:	6122      	str	r2, [r4, #16]
 80064e8:	f8cd a000 	str.w	sl, [sp]
 80064ec:	464b      	mov	r3, r9
 80064ee:	aa03      	add	r2, sp, #12
 80064f0:	4621      	mov	r1, r4
 80064f2:	4640      	mov	r0, r8
 80064f4:	f7ff fee2 	bl	80062bc <_printf_common>
 80064f8:	3001      	adds	r0, #1
 80064fa:	d14c      	bne.n	8006596 <_printf_i+0x1fe>
 80064fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006500:	b004      	add	sp, #16
 8006502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006506:	4835      	ldr	r0, [pc, #212]	; (80065dc <_printf_i+0x244>)
 8006508:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800650c:	6829      	ldr	r1, [r5, #0]
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	f851 6b04 	ldr.w	r6, [r1], #4
 8006514:	6029      	str	r1, [r5, #0]
 8006516:	061d      	lsls	r5, r3, #24
 8006518:	d514      	bpl.n	8006544 <_printf_i+0x1ac>
 800651a:	07df      	lsls	r7, r3, #31
 800651c:	bf44      	itt	mi
 800651e:	f043 0320 	orrmi.w	r3, r3, #32
 8006522:	6023      	strmi	r3, [r4, #0]
 8006524:	b91e      	cbnz	r6, 800652e <_printf_i+0x196>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	f023 0320 	bic.w	r3, r3, #32
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	2310      	movs	r3, #16
 8006530:	e7b0      	b.n	8006494 <_printf_i+0xfc>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	f043 0320 	orr.w	r3, r3, #32
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	2378      	movs	r3, #120	; 0x78
 800653c:	4828      	ldr	r0, [pc, #160]	; (80065e0 <_printf_i+0x248>)
 800653e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006542:	e7e3      	b.n	800650c <_printf_i+0x174>
 8006544:	0659      	lsls	r1, r3, #25
 8006546:	bf48      	it	mi
 8006548:	b2b6      	uxthmi	r6, r6
 800654a:	e7e6      	b.n	800651a <_printf_i+0x182>
 800654c:	4615      	mov	r5, r2
 800654e:	e7bb      	b.n	80064c8 <_printf_i+0x130>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	6826      	ldr	r6, [r4, #0]
 8006554:	6961      	ldr	r1, [r4, #20]
 8006556:	1d18      	adds	r0, r3, #4
 8006558:	6028      	str	r0, [r5, #0]
 800655a:	0635      	lsls	r5, r6, #24
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	d501      	bpl.n	8006564 <_printf_i+0x1cc>
 8006560:	6019      	str	r1, [r3, #0]
 8006562:	e002      	b.n	800656a <_printf_i+0x1d2>
 8006564:	0670      	lsls	r0, r6, #25
 8006566:	d5fb      	bpl.n	8006560 <_printf_i+0x1c8>
 8006568:	8019      	strh	r1, [r3, #0]
 800656a:	2300      	movs	r3, #0
 800656c:	6123      	str	r3, [r4, #16]
 800656e:	4615      	mov	r5, r2
 8006570:	e7ba      	b.n	80064e8 <_printf_i+0x150>
 8006572:	682b      	ldr	r3, [r5, #0]
 8006574:	1d1a      	adds	r2, r3, #4
 8006576:	602a      	str	r2, [r5, #0]
 8006578:	681d      	ldr	r5, [r3, #0]
 800657a:	6862      	ldr	r2, [r4, #4]
 800657c:	2100      	movs	r1, #0
 800657e:	4628      	mov	r0, r5
 8006580:	f7f9 fe4e 	bl	8000220 <memchr>
 8006584:	b108      	cbz	r0, 800658a <_printf_i+0x1f2>
 8006586:	1b40      	subs	r0, r0, r5
 8006588:	6060      	str	r0, [r4, #4]
 800658a:	6863      	ldr	r3, [r4, #4]
 800658c:	6123      	str	r3, [r4, #16]
 800658e:	2300      	movs	r3, #0
 8006590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006594:	e7a8      	b.n	80064e8 <_printf_i+0x150>
 8006596:	6923      	ldr	r3, [r4, #16]
 8006598:	462a      	mov	r2, r5
 800659a:	4649      	mov	r1, r9
 800659c:	4640      	mov	r0, r8
 800659e:	47d0      	blx	sl
 80065a0:	3001      	adds	r0, #1
 80065a2:	d0ab      	beq.n	80064fc <_printf_i+0x164>
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	079b      	lsls	r3, r3, #30
 80065a8:	d413      	bmi.n	80065d2 <_printf_i+0x23a>
 80065aa:	68e0      	ldr	r0, [r4, #12]
 80065ac:	9b03      	ldr	r3, [sp, #12]
 80065ae:	4298      	cmp	r0, r3
 80065b0:	bfb8      	it	lt
 80065b2:	4618      	movlt	r0, r3
 80065b4:	e7a4      	b.n	8006500 <_printf_i+0x168>
 80065b6:	2301      	movs	r3, #1
 80065b8:	4632      	mov	r2, r6
 80065ba:	4649      	mov	r1, r9
 80065bc:	4640      	mov	r0, r8
 80065be:	47d0      	blx	sl
 80065c0:	3001      	adds	r0, #1
 80065c2:	d09b      	beq.n	80064fc <_printf_i+0x164>
 80065c4:	3501      	adds	r5, #1
 80065c6:	68e3      	ldr	r3, [r4, #12]
 80065c8:	9903      	ldr	r1, [sp, #12]
 80065ca:	1a5b      	subs	r3, r3, r1
 80065cc:	42ab      	cmp	r3, r5
 80065ce:	dcf2      	bgt.n	80065b6 <_printf_i+0x21e>
 80065d0:	e7eb      	b.n	80065aa <_printf_i+0x212>
 80065d2:	2500      	movs	r5, #0
 80065d4:	f104 0619 	add.w	r6, r4, #25
 80065d8:	e7f5      	b.n	80065c6 <_printf_i+0x22e>
 80065da:	bf00      	nop
 80065dc:	08008c7e 	.word	0x08008c7e
 80065e0:	08008c8f 	.word	0x08008c8f

080065e4 <siprintf>:
 80065e4:	b40e      	push	{r1, r2, r3}
 80065e6:	b500      	push	{lr}
 80065e8:	b09c      	sub	sp, #112	; 0x70
 80065ea:	ab1d      	add	r3, sp, #116	; 0x74
 80065ec:	9002      	str	r0, [sp, #8]
 80065ee:	9006      	str	r0, [sp, #24]
 80065f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065f4:	4809      	ldr	r0, [pc, #36]	; (800661c <siprintf+0x38>)
 80065f6:	9107      	str	r1, [sp, #28]
 80065f8:	9104      	str	r1, [sp, #16]
 80065fa:	4909      	ldr	r1, [pc, #36]	; (8006620 <siprintf+0x3c>)
 80065fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006600:	9105      	str	r1, [sp, #20]
 8006602:	6800      	ldr	r0, [r0, #0]
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	a902      	add	r1, sp, #8
 8006608:	f001 fb8c 	bl	8007d24 <_svfiprintf_r>
 800660c:	9b02      	ldr	r3, [sp, #8]
 800660e:	2200      	movs	r2, #0
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	b01c      	add	sp, #112	; 0x70
 8006614:	f85d eb04 	ldr.w	lr, [sp], #4
 8006618:	b003      	add	sp, #12
 800661a:	4770      	bx	lr
 800661c:	20000010 	.word	0x20000010
 8006620:	ffff0208 	.word	0xffff0208

08006624 <strstr>:
 8006624:	780a      	ldrb	r2, [r1, #0]
 8006626:	b570      	push	{r4, r5, r6, lr}
 8006628:	b96a      	cbnz	r2, 8006646 <strstr+0x22>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	429a      	cmp	r2, r3
 800662e:	d109      	bne.n	8006644 <strstr+0x20>
 8006630:	460c      	mov	r4, r1
 8006632:	4605      	mov	r5, r0
 8006634:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f6      	beq.n	800662a <strstr+0x6>
 800663c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006640:	429e      	cmp	r6, r3
 8006642:	d0f7      	beq.n	8006634 <strstr+0x10>
 8006644:	3001      	adds	r0, #1
 8006646:	7803      	ldrb	r3, [r0, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1ef      	bne.n	800662c <strstr+0x8>
 800664c:	4618      	mov	r0, r3
 800664e:	e7ec      	b.n	800662a <strstr+0x6>

08006650 <quorem>:
 8006650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	6903      	ldr	r3, [r0, #16]
 8006656:	690c      	ldr	r4, [r1, #16]
 8006658:	42a3      	cmp	r3, r4
 800665a:	4607      	mov	r7, r0
 800665c:	f2c0 8081 	blt.w	8006762 <quorem+0x112>
 8006660:	3c01      	subs	r4, #1
 8006662:	f101 0814 	add.w	r8, r1, #20
 8006666:	f100 0514 	add.w	r5, r0, #20
 800666a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800666e:	9301      	str	r3, [sp, #4]
 8006670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006678:	3301      	adds	r3, #1
 800667a:	429a      	cmp	r2, r3
 800667c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006680:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006684:	fbb2 f6f3 	udiv	r6, r2, r3
 8006688:	d331      	bcc.n	80066ee <quorem+0x9e>
 800668a:	f04f 0e00 	mov.w	lr, #0
 800668e:	4640      	mov	r0, r8
 8006690:	46ac      	mov	ip, r5
 8006692:	46f2      	mov	sl, lr
 8006694:	f850 2b04 	ldr.w	r2, [r0], #4
 8006698:	b293      	uxth	r3, r2
 800669a:	fb06 e303 	mla	r3, r6, r3, lr
 800669e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	ebaa 0303 	sub.w	r3, sl, r3
 80066a8:	f8dc a000 	ldr.w	sl, [ip]
 80066ac:	0c12      	lsrs	r2, r2, #16
 80066ae:	fa13 f38a 	uxtah	r3, r3, sl
 80066b2:	fb06 e202 	mla	r2, r6, r2, lr
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	9b00      	ldr	r3, [sp, #0]
 80066ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066be:	b292      	uxth	r2, r2
 80066c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80066cc:	4581      	cmp	r9, r0
 80066ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066d2:	f84c 3b04 	str.w	r3, [ip], #4
 80066d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066da:	d2db      	bcs.n	8006694 <quorem+0x44>
 80066dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80066e0:	b92b      	cbnz	r3, 80066ee <quorem+0x9e>
 80066e2:	9b01      	ldr	r3, [sp, #4]
 80066e4:	3b04      	subs	r3, #4
 80066e6:	429d      	cmp	r5, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	d32e      	bcc.n	800674a <quorem+0xfa>
 80066ec:	613c      	str	r4, [r7, #16]
 80066ee:	4638      	mov	r0, r7
 80066f0:	f001 f8c4 	bl	800787c <__mcmp>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	db24      	blt.n	8006742 <quorem+0xf2>
 80066f8:	3601      	adds	r6, #1
 80066fa:	4628      	mov	r0, r5
 80066fc:	f04f 0c00 	mov.w	ip, #0
 8006700:	f858 2b04 	ldr.w	r2, [r8], #4
 8006704:	f8d0 e000 	ldr.w	lr, [r0]
 8006708:	b293      	uxth	r3, r2
 800670a:	ebac 0303 	sub.w	r3, ip, r3
 800670e:	0c12      	lsrs	r2, r2, #16
 8006710:	fa13 f38e 	uxtah	r3, r3, lr
 8006714:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800671c:	b29b      	uxth	r3, r3
 800671e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006722:	45c1      	cmp	r9, r8
 8006724:	f840 3b04 	str.w	r3, [r0], #4
 8006728:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800672c:	d2e8      	bcs.n	8006700 <quorem+0xb0>
 800672e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006736:	b922      	cbnz	r2, 8006742 <quorem+0xf2>
 8006738:	3b04      	subs	r3, #4
 800673a:	429d      	cmp	r5, r3
 800673c:	461a      	mov	r2, r3
 800673e:	d30a      	bcc.n	8006756 <quorem+0x106>
 8006740:	613c      	str	r4, [r7, #16]
 8006742:	4630      	mov	r0, r6
 8006744:	b003      	add	sp, #12
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	6812      	ldr	r2, [r2, #0]
 800674c:	3b04      	subs	r3, #4
 800674e:	2a00      	cmp	r2, #0
 8006750:	d1cc      	bne.n	80066ec <quorem+0x9c>
 8006752:	3c01      	subs	r4, #1
 8006754:	e7c7      	b.n	80066e6 <quorem+0x96>
 8006756:	6812      	ldr	r2, [r2, #0]
 8006758:	3b04      	subs	r3, #4
 800675a:	2a00      	cmp	r2, #0
 800675c:	d1f0      	bne.n	8006740 <quorem+0xf0>
 800675e:	3c01      	subs	r4, #1
 8006760:	e7eb      	b.n	800673a <quorem+0xea>
 8006762:	2000      	movs	r0, #0
 8006764:	e7ee      	b.n	8006744 <quorem+0xf4>
	...

08006768 <_dtoa_r>:
 8006768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676c:	ed2d 8b04 	vpush	{d8-d9}
 8006770:	ec57 6b10 	vmov	r6, r7, d0
 8006774:	b093      	sub	sp, #76	; 0x4c
 8006776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006778:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800677c:	9106      	str	r1, [sp, #24]
 800677e:	ee10 aa10 	vmov	sl, s0
 8006782:	4604      	mov	r4, r0
 8006784:	9209      	str	r2, [sp, #36]	; 0x24
 8006786:	930c      	str	r3, [sp, #48]	; 0x30
 8006788:	46bb      	mov	fp, r7
 800678a:	b975      	cbnz	r5, 80067aa <_dtoa_r+0x42>
 800678c:	2010      	movs	r0, #16
 800678e:	f000 fddd 	bl	800734c <malloc>
 8006792:	4602      	mov	r2, r0
 8006794:	6260      	str	r0, [r4, #36]	; 0x24
 8006796:	b920      	cbnz	r0, 80067a2 <_dtoa_r+0x3a>
 8006798:	4ba7      	ldr	r3, [pc, #668]	; (8006a38 <_dtoa_r+0x2d0>)
 800679a:	21ea      	movs	r1, #234	; 0xea
 800679c:	48a7      	ldr	r0, [pc, #668]	; (8006a3c <_dtoa_r+0x2d4>)
 800679e:	f001 fbd1 	bl	8007f44 <__assert_func>
 80067a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067a6:	6005      	str	r5, [r0, #0]
 80067a8:	60c5      	str	r5, [r0, #12]
 80067aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ac:	6819      	ldr	r1, [r3, #0]
 80067ae:	b151      	cbz	r1, 80067c6 <_dtoa_r+0x5e>
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	604a      	str	r2, [r1, #4]
 80067b4:	2301      	movs	r3, #1
 80067b6:	4093      	lsls	r3, r2
 80067b8:	608b      	str	r3, [r1, #8]
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 fe1c 	bl	80073f8 <_Bfree>
 80067c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	1e3b      	subs	r3, r7, #0
 80067c8:	bfaa      	itet	ge
 80067ca:	2300      	movge	r3, #0
 80067cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80067d0:	f8c8 3000 	strge.w	r3, [r8]
 80067d4:	4b9a      	ldr	r3, [pc, #616]	; (8006a40 <_dtoa_r+0x2d8>)
 80067d6:	bfbc      	itt	lt
 80067d8:	2201      	movlt	r2, #1
 80067da:	f8c8 2000 	strlt.w	r2, [r8]
 80067de:	ea33 030b 	bics.w	r3, r3, fp
 80067e2:	d11b      	bne.n	800681c <_dtoa_r+0xb4>
 80067e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067f0:	4333      	orrs	r3, r6
 80067f2:	f000 8592 	beq.w	800731a <_dtoa_r+0xbb2>
 80067f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067f8:	b963      	cbnz	r3, 8006814 <_dtoa_r+0xac>
 80067fa:	4b92      	ldr	r3, [pc, #584]	; (8006a44 <_dtoa_r+0x2dc>)
 80067fc:	e022      	b.n	8006844 <_dtoa_r+0xdc>
 80067fe:	4b92      	ldr	r3, [pc, #584]	; (8006a48 <_dtoa_r+0x2e0>)
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	3308      	adds	r3, #8
 8006804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	9801      	ldr	r0, [sp, #4]
 800680a:	b013      	add	sp, #76	; 0x4c
 800680c:	ecbd 8b04 	vpop	{d8-d9}
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	4b8b      	ldr	r3, [pc, #556]	; (8006a44 <_dtoa_r+0x2dc>)
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	3303      	adds	r3, #3
 800681a:	e7f3      	b.n	8006804 <_dtoa_r+0x9c>
 800681c:	2200      	movs	r2, #0
 800681e:	2300      	movs	r3, #0
 8006820:	4650      	mov	r0, sl
 8006822:	4659      	mov	r1, fp
 8006824:	f7fa f970 	bl	8000b08 <__aeabi_dcmpeq>
 8006828:	ec4b ab19 	vmov	d9, sl, fp
 800682c:	4680      	mov	r8, r0
 800682e:	b158      	cbz	r0, 8006848 <_dtoa_r+0xe0>
 8006830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006832:	2301      	movs	r3, #1
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 856b 	beq.w	8007314 <_dtoa_r+0xbac>
 800683e:	4883      	ldr	r0, [pc, #524]	; (8006a4c <_dtoa_r+0x2e4>)
 8006840:	6018      	str	r0, [r3, #0]
 8006842:	1e43      	subs	r3, r0, #1
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	e7df      	b.n	8006808 <_dtoa_r+0xa0>
 8006848:	ec4b ab10 	vmov	d0, sl, fp
 800684c:	aa10      	add	r2, sp, #64	; 0x40
 800684e:	a911      	add	r1, sp, #68	; 0x44
 8006850:	4620      	mov	r0, r4
 8006852:	f001 f8b9 	bl	80079c8 <__d2b>
 8006856:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800685a:	ee08 0a10 	vmov	s16, r0
 800685e:	2d00      	cmp	r5, #0
 8006860:	f000 8084 	beq.w	800696c <_dtoa_r+0x204>
 8006864:	ee19 3a90 	vmov	r3, s19
 8006868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800686c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006870:	4656      	mov	r6, sl
 8006872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800687a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800687e:	4b74      	ldr	r3, [pc, #464]	; (8006a50 <_dtoa_r+0x2e8>)
 8006880:	2200      	movs	r2, #0
 8006882:	4630      	mov	r0, r6
 8006884:	4639      	mov	r1, r7
 8006886:	f7f9 fd1f 	bl	80002c8 <__aeabi_dsub>
 800688a:	a365      	add	r3, pc, #404	; (adr r3, 8006a20 <_dtoa_r+0x2b8>)
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f7f9 fed2 	bl	8000638 <__aeabi_dmul>
 8006894:	a364      	add	r3, pc, #400	; (adr r3, 8006a28 <_dtoa_r+0x2c0>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f7f9 fd17 	bl	80002cc <__adddf3>
 800689e:	4606      	mov	r6, r0
 80068a0:	4628      	mov	r0, r5
 80068a2:	460f      	mov	r7, r1
 80068a4:	f7f9 fe5e 	bl	8000564 <__aeabi_i2d>
 80068a8:	a361      	add	r3, pc, #388	; (adr r3, 8006a30 <_dtoa_r+0x2c8>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f7f9 fec3 	bl	8000638 <__aeabi_dmul>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4630      	mov	r0, r6
 80068b8:	4639      	mov	r1, r7
 80068ba:	f7f9 fd07 	bl	80002cc <__adddf3>
 80068be:	4606      	mov	r6, r0
 80068c0:	460f      	mov	r7, r1
 80068c2:	f7fa f969 	bl	8000b98 <__aeabi_d2iz>
 80068c6:	2200      	movs	r2, #0
 80068c8:	9000      	str	r0, [sp, #0]
 80068ca:	2300      	movs	r3, #0
 80068cc:	4630      	mov	r0, r6
 80068ce:	4639      	mov	r1, r7
 80068d0:	f7fa f924 	bl	8000b1c <__aeabi_dcmplt>
 80068d4:	b150      	cbz	r0, 80068ec <_dtoa_r+0x184>
 80068d6:	9800      	ldr	r0, [sp, #0]
 80068d8:	f7f9 fe44 	bl	8000564 <__aeabi_i2d>
 80068dc:	4632      	mov	r2, r6
 80068de:	463b      	mov	r3, r7
 80068e0:	f7fa f912 	bl	8000b08 <__aeabi_dcmpeq>
 80068e4:	b910      	cbnz	r0, 80068ec <_dtoa_r+0x184>
 80068e6:	9b00      	ldr	r3, [sp, #0]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	9b00      	ldr	r3, [sp, #0]
 80068ee:	2b16      	cmp	r3, #22
 80068f0:	d85a      	bhi.n	80069a8 <_dtoa_r+0x240>
 80068f2:	9a00      	ldr	r2, [sp, #0]
 80068f4:	4b57      	ldr	r3, [pc, #348]	; (8006a54 <_dtoa_r+0x2ec>)
 80068f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	ec51 0b19 	vmov	r0, r1, d9
 8006902:	f7fa f90b 	bl	8000b1c <__aeabi_dcmplt>
 8006906:	2800      	cmp	r0, #0
 8006908:	d050      	beq.n	80069ac <_dtoa_r+0x244>
 800690a:	9b00      	ldr	r3, [sp, #0]
 800690c:	3b01      	subs	r3, #1
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	2300      	movs	r3, #0
 8006912:	930b      	str	r3, [sp, #44]	; 0x2c
 8006914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006916:	1b5d      	subs	r5, r3, r5
 8006918:	1e6b      	subs	r3, r5, #1
 800691a:	9305      	str	r3, [sp, #20]
 800691c:	bf45      	ittet	mi
 800691e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006922:	9304      	strmi	r3, [sp, #16]
 8006924:	2300      	movpl	r3, #0
 8006926:	2300      	movmi	r3, #0
 8006928:	bf4c      	ite	mi
 800692a:	9305      	strmi	r3, [sp, #20]
 800692c:	9304      	strpl	r3, [sp, #16]
 800692e:	9b00      	ldr	r3, [sp, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	db3d      	blt.n	80069b0 <_dtoa_r+0x248>
 8006934:	9b05      	ldr	r3, [sp, #20]
 8006936:	9a00      	ldr	r2, [sp, #0]
 8006938:	920a      	str	r2, [sp, #40]	; 0x28
 800693a:	4413      	add	r3, r2
 800693c:	9305      	str	r3, [sp, #20]
 800693e:	2300      	movs	r3, #0
 8006940:	9307      	str	r3, [sp, #28]
 8006942:	9b06      	ldr	r3, [sp, #24]
 8006944:	2b09      	cmp	r3, #9
 8006946:	f200 8089 	bhi.w	8006a5c <_dtoa_r+0x2f4>
 800694a:	2b05      	cmp	r3, #5
 800694c:	bfc4      	itt	gt
 800694e:	3b04      	subgt	r3, #4
 8006950:	9306      	strgt	r3, [sp, #24]
 8006952:	9b06      	ldr	r3, [sp, #24]
 8006954:	f1a3 0302 	sub.w	r3, r3, #2
 8006958:	bfcc      	ite	gt
 800695a:	2500      	movgt	r5, #0
 800695c:	2501      	movle	r5, #1
 800695e:	2b03      	cmp	r3, #3
 8006960:	f200 8087 	bhi.w	8006a72 <_dtoa_r+0x30a>
 8006964:	e8df f003 	tbb	[pc, r3]
 8006968:	59383a2d 	.word	0x59383a2d
 800696c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006970:	441d      	add	r5, r3
 8006972:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006976:	2b20      	cmp	r3, #32
 8006978:	bfc1      	itttt	gt
 800697a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800697e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006982:	fa0b f303 	lslgt.w	r3, fp, r3
 8006986:	fa26 f000 	lsrgt.w	r0, r6, r0
 800698a:	bfda      	itte	le
 800698c:	f1c3 0320 	rsble	r3, r3, #32
 8006990:	fa06 f003 	lslle.w	r0, r6, r3
 8006994:	4318      	orrgt	r0, r3
 8006996:	f7f9 fdd5 	bl	8000544 <__aeabi_ui2d>
 800699a:	2301      	movs	r3, #1
 800699c:	4606      	mov	r6, r0
 800699e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80069a2:	3d01      	subs	r5, #1
 80069a4:	930e      	str	r3, [sp, #56]	; 0x38
 80069a6:	e76a      	b.n	800687e <_dtoa_r+0x116>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e7b2      	b.n	8006912 <_dtoa_r+0x1aa>
 80069ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80069ae:	e7b1      	b.n	8006914 <_dtoa_r+0x1ac>
 80069b0:	9b04      	ldr	r3, [sp, #16]
 80069b2:	9a00      	ldr	r2, [sp, #0]
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	9304      	str	r3, [sp, #16]
 80069b8:	4253      	negs	r3, r2
 80069ba:	9307      	str	r3, [sp, #28]
 80069bc:	2300      	movs	r3, #0
 80069be:	930a      	str	r3, [sp, #40]	; 0x28
 80069c0:	e7bf      	b.n	8006942 <_dtoa_r+0x1da>
 80069c2:	2300      	movs	r3, #0
 80069c4:	9308      	str	r3, [sp, #32]
 80069c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	dc55      	bgt.n	8006a78 <_dtoa_r+0x310>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069d2:	461a      	mov	r2, r3
 80069d4:	9209      	str	r2, [sp, #36]	; 0x24
 80069d6:	e00c      	b.n	80069f2 <_dtoa_r+0x28a>
 80069d8:	2301      	movs	r3, #1
 80069da:	e7f3      	b.n	80069c4 <_dtoa_r+0x25c>
 80069dc:	2300      	movs	r3, #0
 80069de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e0:	9308      	str	r3, [sp, #32]
 80069e2:	9b00      	ldr	r3, [sp, #0]
 80069e4:	4413      	add	r3, r2
 80069e6:	9302      	str	r3, [sp, #8]
 80069e8:	3301      	adds	r3, #1
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	9303      	str	r3, [sp, #12]
 80069ee:	bfb8      	it	lt
 80069f0:	2301      	movlt	r3, #1
 80069f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80069f4:	2200      	movs	r2, #0
 80069f6:	6042      	str	r2, [r0, #4]
 80069f8:	2204      	movs	r2, #4
 80069fa:	f102 0614 	add.w	r6, r2, #20
 80069fe:	429e      	cmp	r6, r3
 8006a00:	6841      	ldr	r1, [r0, #4]
 8006a02:	d93d      	bls.n	8006a80 <_dtoa_r+0x318>
 8006a04:	4620      	mov	r0, r4
 8006a06:	f000 fcb7 	bl	8007378 <_Balloc>
 8006a0a:	9001      	str	r0, [sp, #4]
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d13b      	bne.n	8006a88 <_dtoa_r+0x320>
 8006a10:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <_dtoa_r+0x2f0>)
 8006a12:	4602      	mov	r2, r0
 8006a14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a18:	e6c0      	b.n	800679c <_dtoa_r+0x34>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e7df      	b.n	80069de <_dtoa_r+0x276>
 8006a1e:	bf00      	nop
 8006a20:	636f4361 	.word	0x636f4361
 8006a24:	3fd287a7 	.word	0x3fd287a7
 8006a28:	8b60c8b3 	.word	0x8b60c8b3
 8006a2c:	3fc68a28 	.word	0x3fc68a28
 8006a30:	509f79fb 	.word	0x509f79fb
 8006a34:	3fd34413 	.word	0x3fd34413
 8006a38:	08008cad 	.word	0x08008cad
 8006a3c:	08008cc4 	.word	0x08008cc4
 8006a40:	7ff00000 	.word	0x7ff00000
 8006a44:	08008ca9 	.word	0x08008ca9
 8006a48:	08008ca0 	.word	0x08008ca0
 8006a4c:	08008c7d 	.word	0x08008c7d
 8006a50:	3ff80000 	.word	0x3ff80000
 8006a54:	08008db8 	.word	0x08008db8
 8006a58:	08008d1f 	.word	0x08008d1f
 8006a5c:	2501      	movs	r5, #1
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9306      	str	r3, [sp, #24]
 8006a62:	9508      	str	r5, [sp, #32]
 8006a64:	f04f 33ff 	mov.w	r3, #4294967295
 8006a68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2312      	movs	r3, #18
 8006a70:	e7b0      	b.n	80069d4 <_dtoa_r+0x26c>
 8006a72:	2301      	movs	r3, #1
 8006a74:	9308      	str	r3, [sp, #32]
 8006a76:	e7f5      	b.n	8006a64 <_dtoa_r+0x2fc>
 8006a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a7e:	e7b8      	b.n	80069f2 <_dtoa_r+0x28a>
 8006a80:	3101      	adds	r1, #1
 8006a82:	6041      	str	r1, [r0, #4]
 8006a84:	0052      	lsls	r2, r2, #1
 8006a86:	e7b8      	b.n	80069fa <_dtoa_r+0x292>
 8006a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a8a:	9a01      	ldr	r2, [sp, #4]
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	9b03      	ldr	r3, [sp, #12]
 8006a90:	2b0e      	cmp	r3, #14
 8006a92:	f200 809d 	bhi.w	8006bd0 <_dtoa_r+0x468>
 8006a96:	2d00      	cmp	r5, #0
 8006a98:	f000 809a 	beq.w	8006bd0 <_dtoa_r+0x468>
 8006a9c:	9b00      	ldr	r3, [sp, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	dd32      	ble.n	8006b08 <_dtoa_r+0x3a0>
 8006aa2:	4ab7      	ldr	r2, [pc, #732]	; (8006d80 <_dtoa_r+0x618>)
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006aac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ab0:	9b00      	ldr	r3, [sp, #0]
 8006ab2:	05d8      	lsls	r0, r3, #23
 8006ab4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ab8:	d516      	bpl.n	8006ae8 <_dtoa_r+0x380>
 8006aba:	4bb2      	ldr	r3, [pc, #712]	; (8006d84 <_dtoa_r+0x61c>)
 8006abc:	ec51 0b19 	vmov	r0, r1, d9
 8006ac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ac4:	f7f9 fee2 	bl	800088c <__aeabi_ddiv>
 8006ac8:	f007 070f 	and.w	r7, r7, #15
 8006acc:	4682      	mov	sl, r0
 8006ace:	468b      	mov	fp, r1
 8006ad0:	2503      	movs	r5, #3
 8006ad2:	4eac      	ldr	r6, [pc, #688]	; (8006d84 <_dtoa_r+0x61c>)
 8006ad4:	b957      	cbnz	r7, 8006aec <_dtoa_r+0x384>
 8006ad6:	4642      	mov	r2, r8
 8006ad8:	464b      	mov	r3, r9
 8006ada:	4650      	mov	r0, sl
 8006adc:	4659      	mov	r1, fp
 8006ade:	f7f9 fed5 	bl	800088c <__aeabi_ddiv>
 8006ae2:	4682      	mov	sl, r0
 8006ae4:	468b      	mov	fp, r1
 8006ae6:	e028      	b.n	8006b3a <_dtoa_r+0x3d2>
 8006ae8:	2502      	movs	r5, #2
 8006aea:	e7f2      	b.n	8006ad2 <_dtoa_r+0x36a>
 8006aec:	07f9      	lsls	r1, r7, #31
 8006aee:	d508      	bpl.n	8006b02 <_dtoa_r+0x39a>
 8006af0:	4640      	mov	r0, r8
 8006af2:	4649      	mov	r1, r9
 8006af4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006af8:	f7f9 fd9e 	bl	8000638 <__aeabi_dmul>
 8006afc:	3501      	adds	r5, #1
 8006afe:	4680      	mov	r8, r0
 8006b00:	4689      	mov	r9, r1
 8006b02:	107f      	asrs	r7, r7, #1
 8006b04:	3608      	adds	r6, #8
 8006b06:	e7e5      	b.n	8006ad4 <_dtoa_r+0x36c>
 8006b08:	f000 809b 	beq.w	8006c42 <_dtoa_r+0x4da>
 8006b0c:	9b00      	ldr	r3, [sp, #0]
 8006b0e:	4f9d      	ldr	r7, [pc, #628]	; (8006d84 <_dtoa_r+0x61c>)
 8006b10:	425e      	negs	r6, r3
 8006b12:	4b9b      	ldr	r3, [pc, #620]	; (8006d80 <_dtoa_r+0x618>)
 8006b14:	f006 020f 	and.w	r2, r6, #15
 8006b18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	ec51 0b19 	vmov	r0, r1, d9
 8006b24:	f7f9 fd88 	bl	8000638 <__aeabi_dmul>
 8006b28:	1136      	asrs	r6, r6, #4
 8006b2a:	4682      	mov	sl, r0
 8006b2c:	468b      	mov	fp, r1
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2502      	movs	r5, #2
 8006b32:	2e00      	cmp	r6, #0
 8006b34:	d17a      	bne.n	8006c2c <_dtoa_r+0x4c4>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1d3      	bne.n	8006ae2 <_dtoa_r+0x37a>
 8006b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8082 	beq.w	8006c46 <_dtoa_r+0x4de>
 8006b42:	4b91      	ldr	r3, [pc, #580]	; (8006d88 <_dtoa_r+0x620>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	4650      	mov	r0, sl
 8006b48:	4659      	mov	r1, fp
 8006b4a:	f7f9 ffe7 	bl	8000b1c <__aeabi_dcmplt>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d079      	beq.n	8006c46 <_dtoa_r+0x4de>
 8006b52:	9b03      	ldr	r3, [sp, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d076      	beq.n	8006c46 <_dtoa_r+0x4de>
 8006b58:	9b02      	ldr	r3, [sp, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	dd36      	ble.n	8006bcc <_dtoa_r+0x464>
 8006b5e:	9b00      	ldr	r3, [sp, #0]
 8006b60:	4650      	mov	r0, sl
 8006b62:	4659      	mov	r1, fp
 8006b64:	1e5f      	subs	r7, r3, #1
 8006b66:	2200      	movs	r2, #0
 8006b68:	4b88      	ldr	r3, [pc, #544]	; (8006d8c <_dtoa_r+0x624>)
 8006b6a:	f7f9 fd65 	bl	8000638 <__aeabi_dmul>
 8006b6e:	9e02      	ldr	r6, [sp, #8]
 8006b70:	4682      	mov	sl, r0
 8006b72:	468b      	mov	fp, r1
 8006b74:	3501      	adds	r5, #1
 8006b76:	4628      	mov	r0, r5
 8006b78:	f7f9 fcf4 	bl	8000564 <__aeabi_i2d>
 8006b7c:	4652      	mov	r2, sl
 8006b7e:	465b      	mov	r3, fp
 8006b80:	f7f9 fd5a 	bl	8000638 <__aeabi_dmul>
 8006b84:	4b82      	ldr	r3, [pc, #520]	; (8006d90 <_dtoa_r+0x628>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	f7f9 fba0 	bl	80002cc <__adddf3>
 8006b8c:	46d0      	mov	r8, sl
 8006b8e:	46d9      	mov	r9, fp
 8006b90:	4682      	mov	sl, r0
 8006b92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006b96:	2e00      	cmp	r6, #0
 8006b98:	d158      	bne.n	8006c4c <_dtoa_r+0x4e4>
 8006b9a:	4b7e      	ldr	r3, [pc, #504]	; (8006d94 <_dtoa_r+0x62c>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	f7f9 fb91 	bl	80002c8 <__aeabi_dsub>
 8006ba6:	4652      	mov	r2, sl
 8006ba8:	465b      	mov	r3, fp
 8006baa:	4680      	mov	r8, r0
 8006bac:	4689      	mov	r9, r1
 8006bae:	f7f9 ffd3 	bl	8000b58 <__aeabi_dcmpgt>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f040 8295 	bne.w	80070e2 <_dtoa_r+0x97a>
 8006bb8:	4652      	mov	r2, sl
 8006bba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	f7f9 ffab 	bl	8000b1c <__aeabi_dcmplt>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f040 8289 	bne.w	80070de <_dtoa_r+0x976>
 8006bcc:	ec5b ab19 	vmov	sl, fp, d9
 8006bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f2c0 8148 	blt.w	8006e68 <_dtoa_r+0x700>
 8006bd8:	9a00      	ldr	r2, [sp, #0]
 8006bda:	2a0e      	cmp	r2, #14
 8006bdc:	f300 8144 	bgt.w	8006e68 <_dtoa_r+0x700>
 8006be0:	4b67      	ldr	r3, [pc, #412]	; (8006d80 <_dtoa_r+0x618>)
 8006be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006be6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f280 80d5 	bge.w	8006d9c <_dtoa_r+0x634>
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f300 80d1 	bgt.w	8006d9c <_dtoa_r+0x634>
 8006bfa:	f040 826f 	bne.w	80070dc <_dtoa_r+0x974>
 8006bfe:	4b65      	ldr	r3, [pc, #404]	; (8006d94 <_dtoa_r+0x62c>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	4640      	mov	r0, r8
 8006c04:	4649      	mov	r1, r9
 8006c06:	f7f9 fd17 	bl	8000638 <__aeabi_dmul>
 8006c0a:	4652      	mov	r2, sl
 8006c0c:	465b      	mov	r3, fp
 8006c0e:	f7f9 ff99 	bl	8000b44 <__aeabi_dcmpge>
 8006c12:	9e03      	ldr	r6, [sp, #12]
 8006c14:	4637      	mov	r7, r6
 8006c16:	2800      	cmp	r0, #0
 8006c18:	f040 8245 	bne.w	80070a6 <_dtoa_r+0x93e>
 8006c1c:	9d01      	ldr	r5, [sp, #4]
 8006c1e:	2331      	movs	r3, #49	; 0x31
 8006c20:	f805 3b01 	strb.w	r3, [r5], #1
 8006c24:	9b00      	ldr	r3, [sp, #0]
 8006c26:	3301      	adds	r3, #1
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	e240      	b.n	80070ae <_dtoa_r+0x946>
 8006c2c:	07f2      	lsls	r2, r6, #31
 8006c2e:	d505      	bpl.n	8006c3c <_dtoa_r+0x4d4>
 8006c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c34:	f7f9 fd00 	bl	8000638 <__aeabi_dmul>
 8006c38:	3501      	adds	r5, #1
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	1076      	asrs	r6, r6, #1
 8006c3e:	3708      	adds	r7, #8
 8006c40:	e777      	b.n	8006b32 <_dtoa_r+0x3ca>
 8006c42:	2502      	movs	r5, #2
 8006c44:	e779      	b.n	8006b3a <_dtoa_r+0x3d2>
 8006c46:	9f00      	ldr	r7, [sp, #0]
 8006c48:	9e03      	ldr	r6, [sp, #12]
 8006c4a:	e794      	b.n	8006b76 <_dtoa_r+0x40e>
 8006c4c:	9901      	ldr	r1, [sp, #4]
 8006c4e:	4b4c      	ldr	r3, [pc, #304]	; (8006d80 <_dtoa_r+0x618>)
 8006c50:	4431      	add	r1, r6
 8006c52:	910d      	str	r1, [sp, #52]	; 0x34
 8006c54:	9908      	ldr	r1, [sp, #32]
 8006c56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c5e:	2900      	cmp	r1, #0
 8006c60:	d043      	beq.n	8006cea <_dtoa_r+0x582>
 8006c62:	494d      	ldr	r1, [pc, #308]	; (8006d98 <_dtoa_r+0x630>)
 8006c64:	2000      	movs	r0, #0
 8006c66:	f7f9 fe11 	bl	800088c <__aeabi_ddiv>
 8006c6a:	4652      	mov	r2, sl
 8006c6c:	465b      	mov	r3, fp
 8006c6e:	f7f9 fb2b 	bl	80002c8 <__aeabi_dsub>
 8006c72:	9d01      	ldr	r5, [sp, #4]
 8006c74:	4682      	mov	sl, r0
 8006c76:	468b      	mov	fp, r1
 8006c78:	4649      	mov	r1, r9
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	f7f9 ff8c 	bl	8000b98 <__aeabi_d2iz>
 8006c80:	4606      	mov	r6, r0
 8006c82:	f7f9 fc6f 	bl	8000564 <__aeabi_i2d>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	f7f9 fb1b 	bl	80002c8 <__aeabi_dsub>
 8006c92:	3630      	adds	r6, #48	; 0x30
 8006c94:	f805 6b01 	strb.w	r6, [r5], #1
 8006c98:	4652      	mov	r2, sl
 8006c9a:	465b      	mov	r3, fp
 8006c9c:	4680      	mov	r8, r0
 8006c9e:	4689      	mov	r9, r1
 8006ca0:	f7f9 ff3c 	bl	8000b1c <__aeabi_dcmplt>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d163      	bne.n	8006d70 <_dtoa_r+0x608>
 8006ca8:	4642      	mov	r2, r8
 8006caa:	464b      	mov	r3, r9
 8006cac:	4936      	ldr	r1, [pc, #216]	; (8006d88 <_dtoa_r+0x620>)
 8006cae:	2000      	movs	r0, #0
 8006cb0:	f7f9 fb0a 	bl	80002c8 <__aeabi_dsub>
 8006cb4:	4652      	mov	r2, sl
 8006cb6:	465b      	mov	r3, fp
 8006cb8:	f7f9 ff30 	bl	8000b1c <__aeabi_dcmplt>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	f040 80b5 	bne.w	8006e2c <_dtoa_r+0x6c4>
 8006cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cc4:	429d      	cmp	r5, r3
 8006cc6:	d081      	beq.n	8006bcc <_dtoa_r+0x464>
 8006cc8:	4b30      	ldr	r3, [pc, #192]	; (8006d8c <_dtoa_r+0x624>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	4650      	mov	r0, sl
 8006cce:	4659      	mov	r1, fp
 8006cd0:	f7f9 fcb2 	bl	8000638 <__aeabi_dmul>
 8006cd4:	4b2d      	ldr	r3, [pc, #180]	; (8006d8c <_dtoa_r+0x624>)
 8006cd6:	4682      	mov	sl, r0
 8006cd8:	468b      	mov	fp, r1
 8006cda:	4640      	mov	r0, r8
 8006cdc:	4649      	mov	r1, r9
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f7f9 fcaa 	bl	8000638 <__aeabi_dmul>
 8006ce4:	4680      	mov	r8, r0
 8006ce6:	4689      	mov	r9, r1
 8006ce8:	e7c6      	b.n	8006c78 <_dtoa_r+0x510>
 8006cea:	4650      	mov	r0, sl
 8006cec:	4659      	mov	r1, fp
 8006cee:	f7f9 fca3 	bl	8000638 <__aeabi_dmul>
 8006cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cf4:	9d01      	ldr	r5, [sp, #4]
 8006cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cf8:	4682      	mov	sl, r0
 8006cfa:	468b      	mov	fp, r1
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	4640      	mov	r0, r8
 8006d00:	f7f9 ff4a 	bl	8000b98 <__aeabi_d2iz>
 8006d04:	4606      	mov	r6, r0
 8006d06:	f7f9 fc2d 	bl	8000564 <__aeabi_i2d>
 8006d0a:	3630      	adds	r6, #48	; 0x30
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4640      	mov	r0, r8
 8006d12:	4649      	mov	r1, r9
 8006d14:	f7f9 fad8 	bl	80002c8 <__aeabi_dsub>
 8006d18:	f805 6b01 	strb.w	r6, [r5], #1
 8006d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d1e:	429d      	cmp	r5, r3
 8006d20:	4680      	mov	r8, r0
 8006d22:	4689      	mov	r9, r1
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	d124      	bne.n	8006d74 <_dtoa_r+0x60c>
 8006d2a:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <_dtoa_r+0x630>)
 8006d2c:	4650      	mov	r0, sl
 8006d2e:	4659      	mov	r1, fp
 8006d30:	f7f9 facc 	bl	80002cc <__adddf3>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4640      	mov	r0, r8
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	f7f9 ff0c 	bl	8000b58 <__aeabi_dcmpgt>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d173      	bne.n	8006e2c <_dtoa_r+0x6c4>
 8006d44:	4652      	mov	r2, sl
 8006d46:	465b      	mov	r3, fp
 8006d48:	4913      	ldr	r1, [pc, #76]	; (8006d98 <_dtoa_r+0x630>)
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	f7f9 fabc 	bl	80002c8 <__aeabi_dsub>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4640      	mov	r0, r8
 8006d56:	4649      	mov	r1, r9
 8006d58:	f7f9 fee0 	bl	8000b1c <__aeabi_dcmplt>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	f43f af35 	beq.w	8006bcc <_dtoa_r+0x464>
 8006d62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d64:	1e6b      	subs	r3, r5, #1
 8006d66:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d6c:	2b30      	cmp	r3, #48	; 0x30
 8006d6e:	d0f8      	beq.n	8006d62 <_dtoa_r+0x5fa>
 8006d70:	9700      	str	r7, [sp, #0]
 8006d72:	e049      	b.n	8006e08 <_dtoa_r+0x6a0>
 8006d74:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <_dtoa_r+0x624>)
 8006d76:	f7f9 fc5f 	bl	8000638 <__aeabi_dmul>
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	4689      	mov	r9, r1
 8006d7e:	e7bd      	b.n	8006cfc <_dtoa_r+0x594>
 8006d80:	08008db8 	.word	0x08008db8
 8006d84:	08008d90 	.word	0x08008d90
 8006d88:	3ff00000 	.word	0x3ff00000
 8006d8c:	40240000 	.word	0x40240000
 8006d90:	401c0000 	.word	0x401c0000
 8006d94:	40140000 	.word	0x40140000
 8006d98:	3fe00000 	.word	0x3fe00000
 8006d9c:	9d01      	ldr	r5, [sp, #4]
 8006d9e:	4656      	mov	r6, sl
 8006da0:	465f      	mov	r7, fp
 8006da2:	4642      	mov	r2, r8
 8006da4:	464b      	mov	r3, r9
 8006da6:	4630      	mov	r0, r6
 8006da8:	4639      	mov	r1, r7
 8006daa:	f7f9 fd6f 	bl	800088c <__aeabi_ddiv>
 8006dae:	f7f9 fef3 	bl	8000b98 <__aeabi_d2iz>
 8006db2:	4682      	mov	sl, r0
 8006db4:	f7f9 fbd6 	bl	8000564 <__aeabi_i2d>
 8006db8:	4642      	mov	r2, r8
 8006dba:	464b      	mov	r3, r9
 8006dbc:	f7f9 fc3c 	bl	8000638 <__aeabi_dmul>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	4639      	mov	r1, r7
 8006dc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006dcc:	f7f9 fa7c 	bl	80002c8 <__aeabi_dsub>
 8006dd0:	f805 6b01 	strb.w	r6, [r5], #1
 8006dd4:	9e01      	ldr	r6, [sp, #4]
 8006dd6:	9f03      	ldr	r7, [sp, #12]
 8006dd8:	1bae      	subs	r6, r5, r6
 8006dda:	42b7      	cmp	r7, r6
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	d135      	bne.n	8006e4e <_dtoa_r+0x6e6>
 8006de2:	f7f9 fa73 	bl	80002cc <__adddf3>
 8006de6:	4642      	mov	r2, r8
 8006de8:	464b      	mov	r3, r9
 8006dea:	4606      	mov	r6, r0
 8006dec:	460f      	mov	r7, r1
 8006dee:	f7f9 feb3 	bl	8000b58 <__aeabi_dcmpgt>
 8006df2:	b9d0      	cbnz	r0, 8006e2a <_dtoa_r+0x6c2>
 8006df4:	4642      	mov	r2, r8
 8006df6:	464b      	mov	r3, r9
 8006df8:	4630      	mov	r0, r6
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	f7f9 fe84 	bl	8000b08 <__aeabi_dcmpeq>
 8006e00:	b110      	cbz	r0, 8006e08 <_dtoa_r+0x6a0>
 8006e02:	f01a 0f01 	tst.w	sl, #1
 8006e06:	d110      	bne.n	8006e2a <_dtoa_r+0x6c2>
 8006e08:	4620      	mov	r0, r4
 8006e0a:	ee18 1a10 	vmov	r1, s16
 8006e0e:	f000 faf3 	bl	80073f8 <_Bfree>
 8006e12:	2300      	movs	r3, #0
 8006e14:	9800      	ldr	r0, [sp, #0]
 8006e16:	702b      	strb	r3, [r5, #0]
 8006e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	6018      	str	r0, [r3, #0]
 8006e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f43f acf1 	beq.w	8006808 <_dtoa_r+0xa0>
 8006e26:	601d      	str	r5, [r3, #0]
 8006e28:	e4ee      	b.n	8006808 <_dtoa_r+0xa0>
 8006e2a:	9f00      	ldr	r7, [sp, #0]
 8006e2c:	462b      	mov	r3, r5
 8006e2e:	461d      	mov	r5, r3
 8006e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e34:	2a39      	cmp	r2, #57	; 0x39
 8006e36:	d106      	bne.n	8006e46 <_dtoa_r+0x6de>
 8006e38:	9a01      	ldr	r2, [sp, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d1f7      	bne.n	8006e2e <_dtoa_r+0x6c6>
 8006e3e:	9901      	ldr	r1, [sp, #4]
 8006e40:	2230      	movs	r2, #48	; 0x30
 8006e42:	3701      	adds	r7, #1
 8006e44:	700a      	strb	r2, [r1, #0]
 8006e46:	781a      	ldrb	r2, [r3, #0]
 8006e48:	3201      	adds	r2, #1
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	e790      	b.n	8006d70 <_dtoa_r+0x608>
 8006e4e:	4ba6      	ldr	r3, [pc, #664]	; (80070e8 <_dtoa_r+0x980>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	f7f9 fbf1 	bl	8000638 <__aeabi_dmul>
 8006e56:	2200      	movs	r2, #0
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	460f      	mov	r7, r1
 8006e5e:	f7f9 fe53 	bl	8000b08 <__aeabi_dcmpeq>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d09d      	beq.n	8006da2 <_dtoa_r+0x63a>
 8006e66:	e7cf      	b.n	8006e08 <_dtoa_r+0x6a0>
 8006e68:	9a08      	ldr	r2, [sp, #32]
 8006e6a:	2a00      	cmp	r2, #0
 8006e6c:	f000 80d7 	beq.w	800701e <_dtoa_r+0x8b6>
 8006e70:	9a06      	ldr	r2, [sp, #24]
 8006e72:	2a01      	cmp	r2, #1
 8006e74:	f300 80ba 	bgt.w	8006fec <_dtoa_r+0x884>
 8006e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	f000 80b2 	beq.w	8006fe4 <_dtoa_r+0x87c>
 8006e80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e84:	9e07      	ldr	r6, [sp, #28]
 8006e86:	9d04      	ldr	r5, [sp, #16]
 8006e88:	9a04      	ldr	r2, [sp, #16]
 8006e8a:	441a      	add	r2, r3
 8006e8c:	9204      	str	r2, [sp, #16]
 8006e8e:	9a05      	ldr	r2, [sp, #20]
 8006e90:	2101      	movs	r1, #1
 8006e92:	441a      	add	r2, r3
 8006e94:	4620      	mov	r0, r4
 8006e96:	9205      	str	r2, [sp, #20]
 8006e98:	f000 fb66 	bl	8007568 <__i2b>
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	2d00      	cmp	r5, #0
 8006ea0:	dd0c      	ble.n	8006ebc <_dtoa_r+0x754>
 8006ea2:	9b05      	ldr	r3, [sp, #20]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dd09      	ble.n	8006ebc <_dtoa_r+0x754>
 8006ea8:	42ab      	cmp	r3, r5
 8006eaa:	9a04      	ldr	r2, [sp, #16]
 8006eac:	bfa8      	it	ge
 8006eae:	462b      	movge	r3, r5
 8006eb0:	1ad2      	subs	r2, r2, r3
 8006eb2:	9204      	str	r2, [sp, #16]
 8006eb4:	9a05      	ldr	r2, [sp, #20]
 8006eb6:	1aed      	subs	r5, r5, r3
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	9305      	str	r3, [sp, #20]
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	b31b      	cbz	r3, 8006f08 <_dtoa_r+0x7a0>
 8006ec0:	9b08      	ldr	r3, [sp, #32]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 80af 	beq.w	8007026 <_dtoa_r+0x8be>
 8006ec8:	2e00      	cmp	r6, #0
 8006eca:	dd13      	ble.n	8006ef4 <_dtoa_r+0x78c>
 8006ecc:	4639      	mov	r1, r7
 8006ece:	4632      	mov	r2, r6
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 fc09 	bl	80076e8 <__pow5mult>
 8006ed6:	ee18 2a10 	vmov	r2, s16
 8006eda:	4601      	mov	r1, r0
 8006edc:	4607      	mov	r7, r0
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 fb58 	bl	8007594 <__multiply>
 8006ee4:	ee18 1a10 	vmov	r1, s16
 8006ee8:	4680      	mov	r8, r0
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 fa84 	bl	80073f8 <_Bfree>
 8006ef0:	ee08 8a10 	vmov	s16, r8
 8006ef4:	9b07      	ldr	r3, [sp, #28]
 8006ef6:	1b9a      	subs	r2, r3, r6
 8006ef8:	d006      	beq.n	8006f08 <_dtoa_r+0x7a0>
 8006efa:	ee18 1a10 	vmov	r1, s16
 8006efe:	4620      	mov	r0, r4
 8006f00:	f000 fbf2 	bl	80076e8 <__pow5mult>
 8006f04:	ee08 0a10 	vmov	s16, r0
 8006f08:	2101      	movs	r1, #1
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 fb2c 	bl	8007568 <__i2b>
 8006f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	4606      	mov	r6, r0
 8006f16:	f340 8088 	ble.w	800702a <_dtoa_r+0x8c2>
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	4601      	mov	r1, r0
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f000 fbe2 	bl	80076e8 <__pow5mult>
 8006f24:	9b06      	ldr	r3, [sp, #24]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	4606      	mov	r6, r0
 8006f2a:	f340 8081 	ble.w	8007030 <_dtoa_r+0x8c8>
 8006f2e:	f04f 0800 	mov.w	r8, #0
 8006f32:	6933      	ldr	r3, [r6, #16]
 8006f34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f38:	6918      	ldr	r0, [r3, #16]
 8006f3a:	f000 fac5 	bl	80074c8 <__hi0bits>
 8006f3e:	f1c0 0020 	rsb	r0, r0, #32
 8006f42:	9b05      	ldr	r3, [sp, #20]
 8006f44:	4418      	add	r0, r3
 8006f46:	f010 001f 	ands.w	r0, r0, #31
 8006f4a:	f000 8092 	beq.w	8007072 <_dtoa_r+0x90a>
 8006f4e:	f1c0 0320 	rsb	r3, r0, #32
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	f340 808a 	ble.w	800706c <_dtoa_r+0x904>
 8006f58:	f1c0 001c 	rsb	r0, r0, #28
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	4403      	add	r3, r0
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	9b05      	ldr	r3, [sp, #20]
 8006f64:	4403      	add	r3, r0
 8006f66:	4405      	add	r5, r0
 8006f68:	9305      	str	r3, [sp, #20]
 8006f6a:	9b04      	ldr	r3, [sp, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dd07      	ble.n	8006f80 <_dtoa_r+0x818>
 8006f70:	ee18 1a10 	vmov	r1, s16
 8006f74:	461a      	mov	r2, r3
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 fc10 	bl	800779c <__lshift>
 8006f7c:	ee08 0a10 	vmov	s16, r0
 8006f80:	9b05      	ldr	r3, [sp, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	dd05      	ble.n	8006f92 <_dtoa_r+0x82a>
 8006f86:	4631      	mov	r1, r6
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 fc06 	bl	800779c <__lshift>
 8006f90:	4606      	mov	r6, r0
 8006f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d06e      	beq.n	8007076 <_dtoa_r+0x90e>
 8006f98:	ee18 0a10 	vmov	r0, s16
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	f000 fc6d 	bl	800787c <__mcmp>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	da67      	bge.n	8007076 <_dtoa_r+0x90e>
 8006fa6:	9b00      	ldr	r3, [sp, #0]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	ee18 1a10 	vmov	r1, s16
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	220a      	movs	r2, #10
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f000 fa41 	bl	800743c <__multadd>
 8006fba:	9b08      	ldr	r3, [sp, #32]
 8006fbc:	ee08 0a10 	vmov	s16, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 81b1 	beq.w	8007328 <_dtoa_r+0xbc0>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	4639      	mov	r1, r7
 8006fca:	220a      	movs	r2, #10
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 fa35 	bl	800743c <__multadd>
 8006fd2:	9b02      	ldr	r3, [sp, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	f300 808e 	bgt.w	80070f8 <_dtoa_r+0x990>
 8006fdc:	9b06      	ldr	r3, [sp, #24]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	dc51      	bgt.n	8007086 <_dtoa_r+0x91e>
 8006fe2:	e089      	b.n	80070f8 <_dtoa_r+0x990>
 8006fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fea:	e74b      	b.n	8006e84 <_dtoa_r+0x71c>
 8006fec:	9b03      	ldr	r3, [sp, #12]
 8006fee:	1e5e      	subs	r6, r3, #1
 8006ff0:	9b07      	ldr	r3, [sp, #28]
 8006ff2:	42b3      	cmp	r3, r6
 8006ff4:	bfbf      	itttt	lt
 8006ff6:	9b07      	ldrlt	r3, [sp, #28]
 8006ff8:	9607      	strlt	r6, [sp, #28]
 8006ffa:	1af2      	sublt	r2, r6, r3
 8006ffc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ffe:	bfb6      	itet	lt
 8007000:	189b      	addlt	r3, r3, r2
 8007002:	1b9e      	subge	r6, r3, r6
 8007004:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	bfb8      	it	lt
 800700a:	2600      	movlt	r6, #0
 800700c:	2b00      	cmp	r3, #0
 800700e:	bfb7      	itett	lt
 8007010:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007014:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007018:	1a9d      	sublt	r5, r3, r2
 800701a:	2300      	movlt	r3, #0
 800701c:	e734      	b.n	8006e88 <_dtoa_r+0x720>
 800701e:	9e07      	ldr	r6, [sp, #28]
 8007020:	9d04      	ldr	r5, [sp, #16]
 8007022:	9f08      	ldr	r7, [sp, #32]
 8007024:	e73b      	b.n	8006e9e <_dtoa_r+0x736>
 8007026:	9a07      	ldr	r2, [sp, #28]
 8007028:	e767      	b.n	8006efa <_dtoa_r+0x792>
 800702a:	9b06      	ldr	r3, [sp, #24]
 800702c:	2b01      	cmp	r3, #1
 800702e:	dc18      	bgt.n	8007062 <_dtoa_r+0x8fa>
 8007030:	f1ba 0f00 	cmp.w	sl, #0
 8007034:	d115      	bne.n	8007062 <_dtoa_r+0x8fa>
 8007036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800703a:	b993      	cbnz	r3, 8007062 <_dtoa_r+0x8fa>
 800703c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007040:	0d1b      	lsrs	r3, r3, #20
 8007042:	051b      	lsls	r3, r3, #20
 8007044:	b183      	cbz	r3, 8007068 <_dtoa_r+0x900>
 8007046:	9b04      	ldr	r3, [sp, #16]
 8007048:	3301      	adds	r3, #1
 800704a:	9304      	str	r3, [sp, #16]
 800704c:	9b05      	ldr	r3, [sp, #20]
 800704e:	3301      	adds	r3, #1
 8007050:	9305      	str	r3, [sp, #20]
 8007052:	f04f 0801 	mov.w	r8, #1
 8007056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007058:	2b00      	cmp	r3, #0
 800705a:	f47f af6a 	bne.w	8006f32 <_dtoa_r+0x7ca>
 800705e:	2001      	movs	r0, #1
 8007060:	e76f      	b.n	8006f42 <_dtoa_r+0x7da>
 8007062:	f04f 0800 	mov.w	r8, #0
 8007066:	e7f6      	b.n	8007056 <_dtoa_r+0x8ee>
 8007068:	4698      	mov	r8, r3
 800706a:	e7f4      	b.n	8007056 <_dtoa_r+0x8ee>
 800706c:	f43f af7d 	beq.w	8006f6a <_dtoa_r+0x802>
 8007070:	4618      	mov	r0, r3
 8007072:	301c      	adds	r0, #28
 8007074:	e772      	b.n	8006f5c <_dtoa_r+0x7f4>
 8007076:	9b03      	ldr	r3, [sp, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dc37      	bgt.n	80070ec <_dtoa_r+0x984>
 800707c:	9b06      	ldr	r3, [sp, #24]
 800707e:	2b02      	cmp	r3, #2
 8007080:	dd34      	ble.n	80070ec <_dtoa_r+0x984>
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	9302      	str	r3, [sp, #8]
 8007086:	9b02      	ldr	r3, [sp, #8]
 8007088:	b96b      	cbnz	r3, 80070a6 <_dtoa_r+0x93e>
 800708a:	4631      	mov	r1, r6
 800708c:	2205      	movs	r2, #5
 800708e:	4620      	mov	r0, r4
 8007090:	f000 f9d4 	bl	800743c <__multadd>
 8007094:	4601      	mov	r1, r0
 8007096:	4606      	mov	r6, r0
 8007098:	ee18 0a10 	vmov	r0, s16
 800709c:	f000 fbee 	bl	800787c <__mcmp>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	f73f adbb 	bgt.w	8006c1c <_dtoa_r+0x4b4>
 80070a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a8:	9d01      	ldr	r5, [sp, #4]
 80070aa:	43db      	mvns	r3, r3
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	f04f 0800 	mov.w	r8, #0
 80070b2:	4631      	mov	r1, r6
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 f99f 	bl	80073f8 <_Bfree>
 80070ba:	2f00      	cmp	r7, #0
 80070bc:	f43f aea4 	beq.w	8006e08 <_dtoa_r+0x6a0>
 80070c0:	f1b8 0f00 	cmp.w	r8, #0
 80070c4:	d005      	beq.n	80070d2 <_dtoa_r+0x96a>
 80070c6:	45b8      	cmp	r8, r7
 80070c8:	d003      	beq.n	80070d2 <_dtoa_r+0x96a>
 80070ca:	4641      	mov	r1, r8
 80070cc:	4620      	mov	r0, r4
 80070ce:	f000 f993 	bl	80073f8 <_Bfree>
 80070d2:	4639      	mov	r1, r7
 80070d4:	4620      	mov	r0, r4
 80070d6:	f000 f98f 	bl	80073f8 <_Bfree>
 80070da:	e695      	b.n	8006e08 <_dtoa_r+0x6a0>
 80070dc:	2600      	movs	r6, #0
 80070de:	4637      	mov	r7, r6
 80070e0:	e7e1      	b.n	80070a6 <_dtoa_r+0x93e>
 80070e2:	9700      	str	r7, [sp, #0]
 80070e4:	4637      	mov	r7, r6
 80070e6:	e599      	b.n	8006c1c <_dtoa_r+0x4b4>
 80070e8:	40240000 	.word	0x40240000
 80070ec:	9b08      	ldr	r3, [sp, #32]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80ca 	beq.w	8007288 <_dtoa_r+0xb20>
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	9302      	str	r3, [sp, #8]
 80070f8:	2d00      	cmp	r5, #0
 80070fa:	dd05      	ble.n	8007108 <_dtoa_r+0x9a0>
 80070fc:	4639      	mov	r1, r7
 80070fe:	462a      	mov	r2, r5
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fb4b 	bl	800779c <__lshift>
 8007106:	4607      	mov	r7, r0
 8007108:	f1b8 0f00 	cmp.w	r8, #0
 800710c:	d05b      	beq.n	80071c6 <_dtoa_r+0xa5e>
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	4620      	mov	r0, r4
 8007112:	f000 f931 	bl	8007378 <_Balloc>
 8007116:	4605      	mov	r5, r0
 8007118:	b928      	cbnz	r0, 8007126 <_dtoa_r+0x9be>
 800711a:	4b87      	ldr	r3, [pc, #540]	; (8007338 <_dtoa_r+0xbd0>)
 800711c:	4602      	mov	r2, r0
 800711e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007122:	f7ff bb3b 	b.w	800679c <_dtoa_r+0x34>
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	3202      	adds	r2, #2
 800712a:	0092      	lsls	r2, r2, #2
 800712c:	f107 010c 	add.w	r1, r7, #12
 8007130:	300c      	adds	r0, #12
 8007132:	f000 f913 	bl	800735c <memcpy>
 8007136:	2201      	movs	r2, #1
 8007138:	4629      	mov	r1, r5
 800713a:	4620      	mov	r0, r4
 800713c:	f000 fb2e 	bl	800779c <__lshift>
 8007140:	9b01      	ldr	r3, [sp, #4]
 8007142:	f103 0901 	add.w	r9, r3, #1
 8007146:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800714a:	4413      	add	r3, r2
 800714c:	9305      	str	r3, [sp, #20]
 800714e:	f00a 0301 	and.w	r3, sl, #1
 8007152:	46b8      	mov	r8, r7
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	4607      	mov	r7, r0
 8007158:	4631      	mov	r1, r6
 800715a:	ee18 0a10 	vmov	r0, s16
 800715e:	f7ff fa77 	bl	8006650 <quorem>
 8007162:	4641      	mov	r1, r8
 8007164:	9002      	str	r0, [sp, #8]
 8007166:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800716a:	ee18 0a10 	vmov	r0, s16
 800716e:	f000 fb85 	bl	800787c <__mcmp>
 8007172:	463a      	mov	r2, r7
 8007174:	9003      	str	r0, [sp, #12]
 8007176:	4631      	mov	r1, r6
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fb9b 	bl	80078b4 <__mdiff>
 800717e:	68c2      	ldr	r2, [r0, #12]
 8007180:	f109 3bff 	add.w	fp, r9, #4294967295
 8007184:	4605      	mov	r5, r0
 8007186:	bb02      	cbnz	r2, 80071ca <_dtoa_r+0xa62>
 8007188:	4601      	mov	r1, r0
 800718a:	ee18 0a10 	vmov	r0, s16
 800718e:	f000 fb75 	bl	800787c <__mcmp>
 8007192:	4602      	mov	r2, r0
 8007194:	4629      	mov	r1, r5
 8007196:	4620      	mov	r0, r4
 8007198:	9207      	str	r2, [sp, #28]
 800719a:	f000 f92d 	bl	80073f8 <_Bfree>
 800719e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80071a2:	ea43 0102 	orr.w	r1, r3, r2
 80071a6:	9b04      	ldr	r3, [sp, #16]
 80071a8:	430b      	orrs	r3, r1
 80071aa:	464d      	mov	r5, r9
 80071ac:	d10f      	bne.n	80071ce <_dtoa_r+0xa66>
 80071ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80071b2:	d02a      	beq.n	800720a <_dtoa_r+0xaa2>
 80071b4:	9b03      	ldr	r3, [sp, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	dd02      	ble.n	80071c0 <_dtoa_r+0xa58>
 80071ba:	9b02      	ldr	r3, [sp, #8]
 80071bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80071c0:	f88b a000 	strb.w	sl, [fp]
 80071c4:	e775      	b.n	80070b2 <_dtoa_r+0x94a>
 80071c6:	4638      	mov	r0, r7
 80071c8:	e7ba      	b.n	8007140 <_dtoa_r+0x9d8>
 80071ca:	2201      	movs	r2, #1
 80071cc:	e7e2      	b.n	8007194 <_dtoa_r+0xa2c>
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	db04      	blt.n	80071de <_dtoa_r+0xa76>
 80071d4:	9906      	ldr	r1, [sp, #24]
 80071d6:	430b      	orrs	r3, r1
 80071d8:	9904      	ldr	r1, [sp, #16]
 80071da:	430b      	orrs	r3, r1
 80071dc:	d122      	bne.n	8007224 <_dtoa_r+0xabc>
 80071de:	2a00      	cmp	r2, #0
 80071e0:	ddee      	ble.n	80071c0 <_dtoa_r+0xa58>
 80071e2:	ee18 1a10 	vmov	r1, s16
 80071e6:	2201      	movs	r2, #1
 80071e8:	4620      	mov	r0, r4
 80071ea:	f000 fad7 	bl	800779c <__lshift>
 80071ee:	4631      	mov	r1, r6
 80071f0:	ee08 0a10 	vmov	s16, r0
 80071f4:	f000 fb42 	bl	800787c <__mcmp>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	dc03      	bgt.n	8007204 <_dtoa_r+0xa9c>
 80071fc:	d1e0      	bne.n	80071c0 <_dtoa_r+0xa58>
 80071fe:	f01a 0f01 	tst.w	sl, #1
 8007202:	d0dd      	beq.n	80071c0 <_dtoa_r+0xa58>
 8007204:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007208:	d1d7      	bne.n	80071ba <_dtoa_r+0xa52>
 800720a:	2339      	movs	r3, #57	; 0x39
 800720c:	f88b 3000 	strb.w	r3, [fp]
 8007210:	462b      	mov	r3, r5
 8007212:	461d      	mov	r5, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800721a:	2a39      	cmp	r2, #57	; 0x39
 800721c:	d071      	beq.n	8007302 <_dtoa_r+0xb9a>
 800721e:	3201      	adds	r2, #1
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	e746      	b.n	80070b2 <_dtoa_r+0x94a>
 8007224:	2a00      	cmp	r2, #0
 8007226:	dd07      	ble.n	8007238 <_dtoa_r+0xad0>
 8007228:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800722c:	d0ed      	beq.n	800720a <_dtoa_r+0xaa2>
 800722e:	f10a 0301 	add.w	r3, sl, #1
 8007232:	f88b 3000 	strb.w	r3, [fp]
 8007236:	e73c      	b.n	80070b2 <_dtoa_r+0x94a>
 8007238:	9b05      	ldr	r3, [sp, #20]
 800723a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800723e:	4599      	cmp	r9, r3
 8007240:	d047      	beq.n	80072d2 <_dtoa_r+0xb6a>
 8007242:	ee18 1a10 	vmov	r1, s16
 8007246:	2300      	movs	r3, #0
 8007248:	220a      	movs	r2, #10
 800724a:	4620      	mov	r0, r4
 800724c:	f000 f8f6 	bl	800743c <__multadd>
 8007250:	45b8      	cmp	r8, r7
 8007252:	ee08 0a10 	vmov	s16, r0
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	f04f 020a 	mov.w	r2, #10
 800725e:	4641      	mov	r1, r8
 8007260:	4620      	mov	r0, r4
 8007262:	d106      	bne.n	8007272 <_dtoa_r+0xb0a>
 8007264:	f000 f8ea 	bl	800743c <__multadd>
 8007268:	4680      	mov	r8, r0
 800726a:	4607      	mov	r7, r0
 800726c:	f109 0901 	add.w	r9, r9, #1
 8007270:	e772      	b.n	8007158 <_dtoa_r+0x9f0>
 8007272:	f000 f8e3 	bl	800743c <__multadd>
 8007276:	4639      	mov	r1, r7
 8007278:	4680      	mov	r8, r0
 800727a:	2300      	movs	r3, #0
 800727c:	220a      	movs	r2, #10
 800727e:	4620      	mov	r0, r4
 8007280:	f000 f8dc 	bl	800743c <__multadd>
 8007284:	4607      	mov	r7, r0
 8007286:	e7f1      	b.n	800726c <_dtoa_r+0xb04>
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	9302      	str	r3, [sp, #8]
 800728c:	9d01      	ldr	r5, [sp, #4]
 800728e:	ee18 0a10 	vmov	r0, s16
 8007292:	4631      	mov	r1, r6
 8007294:	f7ff f9dc 	bl	8006650 <quorem>
 8007298:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800729c:	9b01      	ldr	r3, [sp, #4]
 800729e:	f805 ab01 	strb.w	sl, [r5], #1
 80072a2:	1aea      	subs	r2, r5, r3
 80072a4:	9b02      	ldr	r3, [sp, #8]
 80072a6:	4293      	cmp	r3, r2
 80072a8:	dd09      	ble.n	80072be <_dtoa_r+0xb56>
 80072aa:	ee18 1a10 	vmov	r1, s16
 80072ae:	2300      	movs	r3, #0
 80072b0:	220a      	movs	r2, #10
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 f8c2 	bl	800743c <__multadd>
 80072b8:	ee08 0a10 	vmov	s16, r0
 80072bc:	e7e7      	b.n	800728e <_dtoa_r+0xb26>
 80072be:	9b02      	ldr	r3, [sp, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bfc8      	it	gt
 80072c4:	461d      	movgt	r5, r3
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	bfd8      	it	le
 80072ca:	2501      	movle	r5, #1
 80072cc:	441d      	add	r5, r3
 80072ce:	f04f 0800 	mov.w	r8, #0
 80072d2:	ee18 1a10 	vmov	r1, s16
 80072d6:	2201      	movs	r2, #1
 80072d8:	4620      	mov	r0, r4
 80072da:	f000 fa5f 	bl	800779c <__lshift>
 80072de:	4631      	mov	r1, r6
 80072e0:	ee08 0a10 	vmov	s16, r0
 80072e4:	f000 faca 	bl	800787c <__mcmp>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	dc91      	bgt.n	8007210 <_dtoa_r+0xaa8>
 80072ec:	d102      	bne.n	80072f4 <_dtoa_r+0xb8c>
 80072ee:	f01a 0f01 	tst.w	sl, #1
 80072f2:	d18d      	bne.n	8007210 <_dtoa_r+0xaa8>
 80072f4:	462b      	mov	r3, r5
 80072f6:	461d      	mov	r5, r3
 80072f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072fc:	2a30      	cmp	r2, #48	; 0x30
 80072fe:	d0fa      	beq.n	80072f6 <_dtoa_r+0xb8e>
 8007300:	e6d7      	b.n	80070b2 <_dtoa_r+0x94a>
 8007302:	9a01      	ldr	r2, [sp, #4]
 8007304:	429a      	cmp	r2, r3
 8007306:	d184      	bne.n	8007212 <_dtoa_r+0xaaa>
 8007308:	9b00      	ldr	r3, [sp, #0]
 800730a:	3301      	adds	r3, #1
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	2331      	movs	r3, #49	; 0x31
 8007310:	7013      	strb	r3, [r2, #0]
 8007312:	e6ce      	b.n	80070b2 <_dtoa_r+0x94a>
 8007314:	4b09      	ldr	r3, [pc, #36]	; (800733c <_dtoa_r+0xbd4>)
 8007316:	f7ff ba95 	b.w	8006844 <_dtoa_r+0xdc>
 800731a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800731c:	2b00      	cmp	r3, #0
 800731e:	f47f aa6e 	bne.w	80067fe <_dtoa_r+0x96>
 8007322:	4b07      	ldr	r3, [pc, #28]	; (8007340 <_dtoa_r+0xbd8>)
 8007324:	f7ff ba8e 	b.w	8006844 <_dtoa_r+0xdc>
 8007328:	9b02      	ldr	r3, [sp, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	dcae      	bgt.n	800728c <_dtoa_r+0xb24>
 800732e:	9b06      	ldr	r3, [sp, #24]
 8007330:	2b02      	cmp	r3, #2
 8007332:	f73f aea8 	bgt.w	8007086 <_dtoa_r+0x91e>
 8007336:	e7a9      	b.n	800728c <_dtoa_r+0xb24>
 8007338:	08008d1f 	.word	0x08008d1f
 800733c:	08008c7c 	.word	0x08008c7c
 8007340:	08008ca0 	.word	0x08008ca0

08007344 <_localeconv_r>:
 8007344:	4800      	ldr	r0, [pc, #0]	; (8007348 <_localeconv_r+0x4>)
 8007346:	4770      	bx	lr
 8007348:	20000164 	.word	0x20000164

0800734c <malloc>:
 800734c:	4b02      	ldr	r3, [pc, #8]	; (8007358 <malloc+0xc>)
 800734e:	4601      	mov	r1, r0
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	f000 bc17 	b.w	8007b84 <_malloc_r>
 8007356:	bf00      	nop
 8007358:	20000010 	.word	0x20000010

0800735c <memcpy>:
 800735c:	440a      	add	r2, r1
 800735e:	4291      	cmp	r1, r2
 8007360:	f100 33ff 	add.w	r3, r0, #4294967295
 8007364:	d100      	bne.n	8007368 <memcpy+0xc>
 8007366:	4770      	bx	lr
 8007368:	b510      	push	{r4, lr}
 800736a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800736e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007372:	4291      	cmp	r1, r2
 8007374:	d1f9      	bne.n	800736a <memcpy+0xe>
 8007376:	bd10      	pop	{r4, pc}

08007378 <_Balloc>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800737c:	4604      	mov	r4, r0
 800737e:	460d      	mov	r5, r1
 8007380:	b976      	cbnz	r6, 80073a0 <_Balloc+0x28>
 8007382:	2010      	movs	r0, #16
 8007384:	f7ff ffe2 	bl	800734c <malloc>
 8007388:	4602      	mov	r2, r0
 800738a:	6260      	str	r0, [r4, #36]	; 0x24
 800738c:	b920      	cbnz	r0, 8007398 <_Balloc+0x20>
 800738e:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <_Balloc+0x78>)
 8007390:	4818      	ldr	r0, [pc, #96]	; (80073f4 <_Balloc+0x7c>)
 8007392:	2166      	movs	r1, #102	; 0x66
 8007394:	f000 fdd6 	bl	8007f44 <__assert_func>
 8007398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800739c:	6006      	str	r6, [r0, #0]
 800739e:	60c6      	str	r6, [r0, #12]
 80073a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80073a2:	68f3      	ldr	r3, [r6, #12]
 80073a4:	b183      	cbz	r3, 80073c8 <_Balloc+0x50>
 80073a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073ae:	b9b8      	cbnz	r0, 80073e0 <_Balloc+0x68>
 80073b0:	2101      	movs	r1, #1
 80073b2:	fa01 f605 	lsl.w	r6, r1, r5
 80073b6:	1d72      	adds	r2, r6, #5
 80073b8:	0092      	lsls	r2, r2, #2
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 fb60 	bl	8007a80 <_calloc_r>
 80073c0:	b160      	cbz	r0, 80073dc <_Balloc+0x64>
 80073c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073c6:	e00e      	b.n	80073e6 <_Balloc+0x6e>
 80073c8:	2221      	movs	r2, #33	; 0x21
 80073ca:	2104      	movs	r1, #4
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 fb57 	bl	8007a80 <_calloc_r>
 80073d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073d4:	60f0      	str	r0, [r6, #12]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e4      	bne.n	80073a6 <_Balloc+0x2e>
 80073dc:	2000      	movs	r0, #0
 80073de:	bd70      	pop	{r4, r5, r6, pc}
 80073e0:	6802      	ldr	r2, [r0, #0]
 80073e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073e6:	2300      	movs	r3, #0
 80073e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073ec:	e7f7      	b.n	80073de <_Balloc+0x66>
 80073ee:	bf00      	nop
 80073f0:	08008cad 	.word	0x08008cad
 80073f4:	08008d30 	.word	0x08008d30

080073f8 <_Bfree>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073fc:	4605      	mov	r5, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	b976      	cbnz	r6, 8007420 <_Bfree+0x28>
 8007402:	2010      	movs	r0, #16
 8007404:	f7ff ffa2 	bl	800734c <malloc>
 8007408:	4602      	mov	r2, r0
 800740a:	6268      	str	r0, [r5, #36]	; 0x24
 800740c:	b920      	cbnz	r0, 8007418 <_Bfree+0x20>
 800740e:	4b09      	ldr	r3, [pc, #36]	; (8007434 <_Bfree+0x3c>)
 8007410:	4809      	ldr	r0, [pc, #36]	; (8007438 <_Bfree+0x40>)
 8007412:	218a      	movs	r1, #138	; 0x8a
 8007414:	f000 fd96 	bl	8007f44 <__assert_func>
 8007418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800741c:	6006      	str	r6, [r0, #0]
 800741e:	60c6      	str	r6, [r0, #12]
 8007420:	b13c      	cbz	r4, 8007432 <_Bfree+0x3a>
 8007422:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007424:	6862      	ldr	r2, [r4, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800742c:	6021      	str	r1, [r4, #0]
 800742e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007432:	bd70      	pop	{r4, r5, r6, pc}
 8007434:	08008cad 	.word	0x08008cad
 8007438:	08008d30 	.word	0x08008d30

0800743c <__multadd>:
 800743c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007440:	690d      	ldr	r5, [r1, #16]
 8007442:	4607      	mov	r7, r0
 8007444:	460c      	mov	r4, r1
 8007446:	461e      	mov	r6, r3
 8007448:	f101 0c14 	add.w	ip, r1, #20
 800744c:	2000      	movs	r0, #0
 800744e:	f8dc 3000 	ldr.w	r3, [ip]
 8007452:	b299      	uxth	r1, r3
 8007454:	fb02 6101 	mla	r1, r2, r1, r6
 8007458:	0c1e      	lsrs	r6, r3, #16
 800745a:	0c0b      	lsrs	r3, r1, #16
 800745c:	fb02 3306 	mla	r3, r2, r6, r3
 8007460:	b289      	uxth	r1, r1
 8007462:	3001      	adds	r0, #1
 8007464:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007468:	4285      	cmp	r5, r0
 800746a:	f84c 1b04 	str.w	r1, [ip], #4
 800746e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007472:	dcec      	bgt.n	800744e <__multadd+0x12>
 8007474:	b30e      	cbz	r6, 80074ba <__multadd+0x7e>
 8007476:	68a3      	ldr	r3, [r4, #8]
 8007478:	42ab      	cmp	r3, r5
 800747a:	dc19      	bgt.n	80074b0 <__multadd+0x74>
 800747c:	6861      	ldr	r1, [r4, #4]
 800747e:	4638      	mov	r0, r7
 8007480:	3101      	adds	r1, #1
 8007482:	f7ff ff79 	bl	8007378 <_Balloc>
 8007486:	4680      	mov	r8, r0
 8007488:	b928      	cbnz	r0, 8007496 <__multadd+0x5a>
 800748a:	4602      	mov	r2, r0
 800748c:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <__multadd+0x84>)
 800748e:	480d      	ldr	r0, [pc, #52]	; (80074c4 <__multadd+0x88>)
 8007490:	21b5      	movs	r1, #181	; 0xb5
 8007492:	f000 fd57 	bl	8007f44 <__assert_func>
 8007496:	6922      	ldr	r2, [r4, #16]
 8007498:	3202      	adds	r2, #2
 800749a:	f104 010c 	add.w	r1, r4, #12
 800749e:	0092      	lsls	r2, r2, #2
 80074a0:	300c      	adds	r0, #12
 80074a2:	f7ff ff5b 	bl	800735c <memcpy>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4638      	mov	r0, r7
 80074aa:	f7ff ffa5 	bl	80073f8 <_Bfree>
 80074ae:	4644      	mov	r4, r8
 80074b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074b4:	3501      	adds	r5, #1
 80074b6:	615e      	str	r6, [r3, #20]
 80074b8:	6125      	str	r5, [r4, #16]
 80074ba:	4620      	mov	r0, r4
 80074bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c0:	08008d1f 	.word	0x08008d1f
 80074c4:	08008d30 	.word	0x08008d30

080074c8 <__hi0bits>:
 80074c8:	0c03      	lsrs	r3, r0, #16
 80074ca:	041b      	lsls	r3, r3, #16
 80074cc:	b9d3      	cbnz	r3, 8007504 <__hi0bits+0x3c>
 80074ce:	0400      	lsls	r0, r0, #16
 80074d0:	2310      	movs	r3, #16
 80074d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074d6:	bf04      	itt	eq
 80074d8:	0200      	lsleq	r0, r0, #8
 80074da:	3308      	addeq	r3, #8
 80074dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074e0:	bf04      	itt	eq
 80074e2:	0100      	lsleq	r0, r0, #4
 80074e4:	3304      	addeq	r3, #4
 80074e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074ea:	bf04      	itt	eq
 80074ec:	0080      	lsleq	r0, r0, #2
 80074ee:	3302      	addeq	r3, #2
 80074f0:	2800      	cmp	r0, #0
 80074f2:	db05      	blt.n	8007500 <__hi0bits+0x38>
 80074f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074f8:	f103 0301 	add.w	r3, r3, #1
 80074fc:	bf08      	it	eq
 80074fe:	2320      	moveq	r3, #32
 8007500:	4618      	mov	r0, r3
 8007502:	4770      	bx	lr
 8007504:	2300      	movs	r3, #0
 8007506:	e7e4      	b.n	80074d2 <__hi0bits+0xa>

08007508 <__lo0bits>:
 8007508:	6803      	ldr	r3, [r0, #0]
 800750a:	f013 0207 	ands.w	r2, r3, #7
 800750e:	4601      	mov	r1, r0
 8007510:	d00b      	beq.n	800752a <__lo0bits+0x22>
 8007512:	07da      	lsls	r2, r3, #31
 8007514:	d423      	bmi.n	800755e <__lo0bits+0x56>
 8007516:	0798      	lsls	r0, r3, #30
 8007518:	bf49      	itett	mi
 800751a:	085b      	lsrmi	r3, r3, #1
 800751c:	089b      	lsrpl	r3, r3, #2
 800751e:	2001      	movmi	r0, #1
 8007520:	600b      	strmi	r3, [r1, #0]
 8007522:	bf5c      	itt	pl
 8007524:	600b      	strpl	r3, [r1, #0]
 8007526:	2002      	movpl	r0, #2
 8007528:	4770      	bx	lr
 800752a:	b298      	uxth	r0, r3
 800752c:	b9a8      	cbnz	r0, 800755a <__lo0bits+0x52>
 800752e:	0c1b      	lsrs	r3, r3, #16
 8007530:	2010      	movs	r0, #16
 8007532:	b2da      	uxtb	r2, r3
 8007534:	b90a      	cbnz	r2, 800753a <__lo0bits+0x32>
 8007536:	3008      	adds	r0, #8
 8007538:	0a1b      	lsrs	r3, r3, #8
 800753a:	071a      	lsls	r2, r3, #28
 800753c:	bf04      	itt	eq
 800753e:	091b      	lsreq	r3, r3, #4
 8007540:	3004      	addeq	r0, #4
 8007542:	079a      	lsls	r2, r3, #30
 8007544:	bf04      	itt	eq
 8007546:	089b      	lsreq	r3, r3, #2
 8007548:	3002      	addeq	r0, #2
 800754a:	07da      	lsls	r2, r3, #31
 800754c:	d403      	bmi.n	8007556 <__lo0bits+0x4e>
 800754e:	085b      	lsrs	r3, r3, #1
 8007550:	f100 0001 	add.w	r0, r0, #1
 8007554:	d005      	beq.n	8007562 <__lo0bits+0x5a>
 8007556:	600b      	str	r3, [r1, #0]
 8007558:	4770      	bx	lr
 800755a:	4610      	mov	r0, r2
 800755c:	e7e9      	b.n	8007532 <__lo0bits+0x2a>
 800755e:	2000      	movs	r0, #0
 8007560:	4770      	bx	lr
 8007562:	2020      	movs	r0, #32
 8007564:	4770      	bx	lr
	...

08007568 <__i2b>:
 8007568:	b510      	push	{r4, lr}
 800756a:	460c      	mov	r4, r1
 800756c:	2101      	movs	r1, #1
 800756e:	f7ff ff03 	bl	8007378 <_Balloc>
 8007572:	4602      	mov	r2, r0
 8007574:	b928      	cbnz	r0, 8007582 <__i2b+0x1a>
 8007576:	4b05      	ldr	r3, [pc, #20]	; (800758c <__i2b+0x24>)
 8007578:	4805      	ldr	r0, [pc, #20]	; (8007590 <__i2b+0x28>)
 800757a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800757e:	f000 fce1 	bl	8007f44 <__assert_func>
 8007582:	2301      	movs	r3, #1
 8007584:	6144      	str	r4, [r0, #20]
 8007586:	6103      	str	r3, [r0, #16]
 8007588:	bd10      	pop	{r4, pc}
 800758a:	bf00      	nop
 800758c:	08008d1f 	.word	0x08008d1f
 8007590:	08008d30 	.word	0x08008d30

08007594 <__multiply>:
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	4691      	mov	r9, r2
 800759a:	690a      	ldr	r2, [r1, #16]
 800759c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	bfb8      	it	lt
 80075a4:	460b      	movlt	r3, r1
 80075a6:	460c      	mov	r4, r1
 80075a8:	bfbc      	itt	lt
 80075aa:	464c      	movlt	r4, r9
 80075ac:	4699      	movlt	r9, r3
 80075ae:	6927      	ldr	r7, [r4, #16]
 80075b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075b4:	68a3      	ldr	r3, [r4, #8]
 80075b6:	6861      	ldr	r1, [r4, #4]
 80075b8:	eb07 060a 	add.w	r6, r7, sl
 80075bc:	42b3      	cmp	r3, r6
 80075be:	b085      	sub	sp, #20
 80075c0:	bfb8      	it	lt
 80075c2:	3101      	addlt	r1, #1
 80075c4:	f7ff fed8 	bl	8007378 <_Balloc>
 80075c8:	b930      	cbnz	r0, 80075d8 <__multiply+0x44>
 80075ca:	4602      	mov	r2, r0
 80075cc:	4b44      	ldr	r3, [pc, #272]	; (80076e0 <__multiply+0x14c>)
 80075ce:	4845      	ldr	r0, [pc, #276]	; (80076e4 <__multiply+0x150>)
 80075d0:	f240 115d 	movw	r1, #349	; 0x15d
 80075d4:	f000 fcb6 	bl	8007f44 <__assert_func>
 80075d8:	f100 0514 	add.w	r5, r0, #20
 80075dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075e0:	462b      	mov	r3, r5
 80075e2:	2200      	movs	r2, #0
 80075e4:	4543      	cmp	r3, r8
 80075e6:	d321      	bcc.n	800762c <__multiply+0x98>
 80075e8:	f104 0314 	add.w	r3, r4, #20
 80075ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075f0:	f109 0314 	add.w	r3, r9, #20
 80075f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075f8:	9202      	str	r2, [sp, #8]
 80075fa:	1b3a      	subs	r2, r7, r4
 80075fc:	3a15      	subs	r2, #21
 80075fe:	f022 0203 	bic.w	r2, r2, #3
 8007602:	3204      	adds	r2, #4
 8007604:	f104 0115 	add.w	r1, r4, #21
 8007608:	428f      	cmp	r7, r1
 800760a:	bf38      	it	cc
 800760c:	2204      	movcc	r2, #4
 800760e:	9201      	str	r2, [sp, #4]
 8007610:	9a02      	ldr	r2, [sp, #8]
 8007612:	9303      	str	r3, [sp, #12]
 8007614:	429a      	cmp	r2, r3
 8007616:	d80c      	bhi.n	8007632 <__multiply+0x9e>
 8007618:	2e00      	cmp	r6, #0
 800761a:	dd03      	ble.n	8007624 <__multiply+0x90>
 800761c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007620:	2b00      	cmp	r3, #0
 8007622:	d05a      	beq.n	80076da <__multiply+0x146>
 8007624:	6106      	str	r6, [r0, #16]
 8007626:	b005      	add	sp, #20
 8007628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762c:	f843 2b04 	str.w	r2, [r3], #4
 8007630:	e7d8      	b.n	80075e4 <__multiply+0x50>
 8007632:	f8b3 a000 	ldrh.w	sl, [r3]
 8007636:	f1ba 0f00 	cmp.w	sl, #0
 800763a:	d024      	beq.n	8007686 <__multiply+0xf2>
 800763c:	f104 0e14 	add.w	lr, r4, #20
 8007640:	46a9      	mov	r9, r5
 8007642:	f04f 0c00 	mov.w	ip, #0
 8007646:	f85e 2b04 	ldr.w	r2, [lr], #4
 800764a:	f8d9 1000 	ldr.w	r1, [r9]
 800764e:	fa1f fb82 	uxth.w	fp, r2
 8007652:	b289      	uxth	r1, r1
 8007654:	fb0a 110b 	mla	r1, sl, fp, r1
 8007658:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800765c:	f8d9 2000 	ldr.w	r2, [r9]
 8007660:	4461      	add	r1, ip
 8007662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007666:	fb0a c20b 	mla	r2, sl, fp, ip
 800766a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800766e:	b289      	uxth	r1, r1
 8007670:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007674:	4577      	cmp	r7, lr
 8007676:	f849 1b04 	str.w	r1, [r9], #4
 800767a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800767e:	d8e2      	bhi.n	8007646 <__multiply+0xb2>
 8007680:	9a01      	ldr	r2, [sp, #4]
 8007682:	f845 c002 	str.w	ip, [r5, r2]
 8007686:	9a03      	ldr	r2, [sp, #12]
 8007688:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800768c:	3304      	adds	r3, #4
 800768e:	f1b9 0f00 	cmp.w	r9, #0
 8007692:	d020      	beq.n	80076d6 <__multiply+0x142>
 8007694:	6829      	ldr	r1, [r5, #0]
 8007696:	f104 0c14 	add.w	ip, r4, #20
 800769a:	46ae      	mov	lr, r5
 800769c:	f04f 0a00 	mov.w	sl, #0
 80076a0:	f8bc b000 	ldrh.w	fp, [ip]
 80076a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80076a8:	fb09 220b 	mla	r2, r9, fp, r2
 80076ac:	4492      	add	sl, r2
 80076ae:	b289      	uxth	r1, r1
 80076b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80076b4:	f84e 1b04 	str.w	r1, [lr], #4
 80076b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80076bc:	f8be 1000 	ldrh.w	r1, [lr]
 80076c0:	0c12      	lsrs	r2, r2, #16
 80076c2:	fb09 1102 	mla	r1, r9, r2, r1
 80076c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80076ca:	4567      	cmp	r7, ip
 80076cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076d0:	d8e6      	bhi.n	80076a0 <__multiply+0x10c>
 80076d2:	9a01      	ldr	r2, [sp, #4]
 80076d4:	50a9      	str	r1, [r5, r2]
 80076d6:	3504      	adds	r5, #4
 80076d8:	e79a      	b.n	8007610 <__multiply+0x7c>
 80076da:	3e01      	subs	r6, #1
 80076dc:	e79c      	b.n	8007618 <__multiply+0x84>
 80076de:	bf00      	nop
 80076e0:	08008d1f 	.word	0x08008d1f
 80076e4:	08008d30 	.word	0x08008d30

080076e8 <__pow5mult>:
 80076e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ec:	4615      	mov	r5, r2
 80076ee:	f012 0203 	ands.w	r2, r2, #3
 80076f2:	4606      	mov	r6, r0
 80076f4:	460f      	mov	r7, r1
 80076f6:	d007      	beq.n	8007708 <__pow5mult+0x20>
 80076f8:	4c25      	ldr	r4, [pc, #148]	; (8007790 <__pow5mult+0xa8>)
 80076fa:	3a01      	subs	r2, #1
 80076fc:	2300      	movs	r3, #0
 80076fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007702:	f7ff fe9b 	bl	800743c <__multadd>
 8007706:	4607      	mov	r7, r0
 8007708:	10ad      	asrs	r5, r5, #2
 800770a:	d03d      	beq.n	8007788 <__pow5mult+0xa0>
 800770c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800770e:	b97c      	cbnz	r4, 8007730 <__pow5mult+0x48>
 8007710:	2010      	movs	r0, #16
 8007712:	f7ff fe1b 	bl	800734c <malloc>
 8007716:	4602      	mov	r2, r0
 8007718:	6270      	str	r0, [r6, #36]	; 0x24
 800771a:	b928      	cbnz	r0, 8007728 <__pow5mult+0x40>
 800771c:	4b1d      	ldr	r3, [pc, #116]	; (8007794 <__pow5mult+0xac>)
 800771e:	481e      	ldr	r0, [pc, #120]	; (8007798 <__pow5mult+0xb0>)
 8007720:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007724:	f000 fc0e 	bl	8007f44 <__assert_func>
 8007728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800772c:	6004      	str	r4, [r0, #0]
 800772e:	60c4      	str	r4, [r0, #12]
 8007730:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007738:	b94c      	cbnz	r4, 800774e <__pow5mult+0x66>
 800773a:	f240 2171 	movw	r1, #625	; 0x271
 800773e:	4630      	mov	r0, r6
 8007740:	f7ff ff12 	bl	8007568 <__i2b>
 8007744:	2300      	movs	r3, #0
 8007746:	f8c8 0008 	str.w	r0, [r8, #8]
 800774a:	4604      	mov	r4, r0
 800774c:	6003      	str	r3, [r0, #0]
 800774e:	f04f 0900 	mov.w	r9, #0
 8007752:	07eb      	lsls	r3, r5, #31
 8007754:	d50a      	bpl.n	800776c <__pow5mult+0x84>
 8007756:	4639      	mov	r1, r7
 8007758:	4622      	mov	r2, r4
 800775a:	4630      	mov	r0, r6
 800775c:	f7ff ff1a 	bl	8007594 <__multiply>
 8007760:	4639      	mov	r1, r7
 8007762:	4680      	mov	r8, r0
 8007764:	4630      	mov	r0, r6
 8007766:	f7ff fe47 	bl	80073f8 <_Bfree>
 800776a:	4647      	mov	r7, r8
 800776c:	106d      	asrs	r5, r5, #1
 800776e:	d00b      	beq.n	8007788 <__pow5mult+0xa0>
 8007770:	6820      	ldr	r0, [r4, #0]
 8007772:	b938      	cbnz	r0, 8007784 <__pow5mult+0x9c>
 8007774:	4622      	mov	r2, r4
 8007776:	4621      	mov	r1, r4
 8007778:	4630      	mov	r0, r6
 800777a:	f7ff ff0b 	bl	8007594 <__multiply>
 800777e:	6020      	str	r0, [r4, #0]
 8007780:	f8c0 9000 	str.w	r9, [r0]
 8007784:	4604      	mov	r4, r0
 8007786:	e7e4      	b.n	8007752 <__pow5mult+0x6a>
 8007788:	4638      	mov	r0, r7
 800778a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800778e:	bf00      	nop
 8007790:	08008e80 	.word	0x08008e80
 8007794:	08008cad 	.word	0x08008cad
 8007798:	08008d30 	.word	0x08008d30

0800779c <__lshift>:
 800779c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a0:	460c      	mov	r4, r1
 80077a2:	6849      	ldr	r1, [r1, #4]
 80077a4:	6923      	ldr	r3, [r4, #16]
 80077a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077aa:	68a3      	ldr	r3, [r4, #8]
 80077ac:	4607      	mov	r7, r0
 80077ae:	4691      	mov	r9, r2
 80077b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077b4:	f108 0601 	add.w	r6, r8, #1
 80077b8:	42b3      	cmp	r3, r6
 80077ba:	db0b      	blt.n	80077d4 <__lshift+0x38>
 80077bc:	4638      	mov	r0, r7
 80077be:	f7ff fddb 	bl	8007378 <_Balloc>
 80077c2:	4605      	mov	r5, r0
 80077c4:	b948      	cbnz	r0, 80077da <__lshift+0x3e>
 80077c6:	4602      	mov	r2, r0
 80077c8:	4b2a      	ldr	r3, [pc, #168]	; (8007874 <__lshift+0xd8>)
 80077ca:	482b      	ldr	r0, [pc, #172]	; (8007878 <__lshift+0xdc>)
 80077cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80077d0:	f000 fbb8 	bl	8007f44 <__assert_func>
 80077d4:	3101      	adds	r1, #1
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	e7ee      	b.n	80077b8 <__lshift+0x1c>
 80077da:	2300      	movs	r3, #0
 80077dc:	f100 0114 	add.w	r1, r0, #20
 80077e0:	f100 0210 	add.w	r2, r0, #16
 80077e4:	4618      	mov	r0, r3
 80077e6:	4553      	cmp	r3, sl
 80077e8:	db37      	blt.n	800785a <__lshift+0xbe>
 80077ea:	6920      	ldr	r0, [r4, #16]
 80077ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077f0:	f104 0314 	add.w	r3, r4, #20
 80077f4:	f019 091f 	ands.w	r9, r9, #31
 80077f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007800:	d02f      	beq.n	8007862 <__lshift+0xc6>
 8007802:	f1c9 0e20 	rsb	lr, r9, #32
 8007806:	468a      	mov	sl, r1
 8007808:	f04f 0c00 	mov.w	ip, #0
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	fa02 f209 	lsl.w	r2, r2, r9
 8007812:	ea42 020c 	orr.w	r2, r2, ip
 8007816:	f84a 2b04 	str.w	r2, [sl], #4
 800781a:	f853 2b04 	ldr.w	r2, [r3], #4
 800781e:	4298      	cmp	r0, r3
 8007820:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007824:	d8f2      	bhi.n	800780c <__lshift+0x70>
 8007826:	1b03      	subs	r3, r0, r4
 8007828:	3b15      	subs	r3, #21
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	3304      	adds	r3, #4
 8007830:	f104 0215 	add.w	r2, r4, #21
 8007834:	4290      	cmp	r0, r2
 8007836:	bf38      	it	cc
 8007838:	2304      	movcc	r3, #4
 800783a:	f841 c003 	str.w	ip, [r1, r3]
 800783e:	f1bc 0f00 	cmp.w	ip, #0
 8007842:	d001      	beq.n	8007848 <__lshift+0xac>
 8007844:	f108 0602 	add.w	r6, r8, #2
 8007848:	3e01      	subs	r6, #1
 800784a:	4638      	mov	r0, r7
 800784c:	612e      	str	r6, [r5, #16]
 800784e:	4621      	mov	r1, r4
 8007850:	f7ff fdd2 	bl	80073f8 <_Bfree>
 8007854:	4628      	mov	r0, r5
 8007856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785a:	f842 0f04 	str.w	r0, [r2, #4]!
 800785e:	3301      	adds	r3, #1
 8007860:	e7c1      	b.n	80077e6 <__lshift+0x4a>
 8007862:	3904      	subs	r1, #4
 8007864:	f853 2b04 	ldr.w	r2, [r3], #4
 8007868:	f841 2f04 	str.w	r2, [r1, #4]!
 800786c:	4298      	cmp	r0, r3
 800786e:	d8f9      	bhi.n	8007864 <__lshift+0xc8>
 8007870:	e7ea      	b.n	8007848 <__lshift+0xac>
 8007872:	bf00      	nop
 8007874:	08008d1f 	.word	0x08008d1f
 8007878:	08008d30 	.word	0x08008d30

0800787c <__mcmp>:
 800787c:	b530      	push	{r4, r5, lr}
 800787e:	6902      	ldr	r2, [r0, #16]
 8007880:	690c      	ldr	r4, [r1, #16]
 8007882:	1b12      	subs	r2, r2, r4
 8007884:	d10e      	bne.n	80078a4 <__mcmp+0x28>
 8007886:	f100 0314 	add.w	r3, r0, #20
 800788a:	3114      	adds	r1, #20
 800788c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007890:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007894:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007898:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800789c:	42a5      	cmp	r5, r4
 800789e:	d003      	beq.n	80078a8 <__mcmp+0x2c>
 80078a0:	d305      	bcc.n	80078ae <__mcmp+0x32>
 80078a2:	2201      	movs	r2, #1
 80078a4:	4610      	mov	r0, r2
 80078a6:	bd30      	pop	{r4, r5, pc}
 80078a8:	4283      	cmp	r3, r0
 80078aa:	d3f3      	bcc.n	8007894 <__mcmp+0x18>
 80078ac:	e7fa      	b.n	80078a4 <__mcmp+0x28>
 80078ae:	f04f 32ff 	mov.w	r2, #4294967295
 80078b2:	e7f7      	b.n	80078a4 <__mcmp+0x28>

080078b4 <__mdiff>:
 80078b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	4606      	mov	r6, r0
 80078bc:	4611      	mov	r1, r2
 80078be:	4620      	mov	r0, r4
 80078c0:	4690      	mov	r8, r2
 80078c2:	f7ff ffdb 	bl	800787c <__mcmp>
 80078c6:	1e05      	subs	r5, r0, #0
 80078c8:	d110      	bne.n	80078ec <__mdiff+0x38>
 80078ca:	4629      	mov	r1, r5
 80078cc:	4630      	mov	r0, r6
 80078ce:	f7ff fd53 	bl	8007378 <_Balloc>
 80078d2:	b930      	cbnz	r0, 80078e2 <__mdiff+0x2e>
 80078d4:	4b3a      	ldr	r3, [pc, #232]	; (80079c0 <__mdiff+0x10c>)
 80078d6:	4602      	mov	r2, r0
 80078d8:	f240 2132 	movw	r1, #562	; 0x232
 80078dc:	4839      	ldr	r0, [pc, #228]	; (80079c4 <__mdiff+0x110>)
 80078de:	f000 fb31 	bl	8007f44 <__assert_func>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ec:	bfa4      	itt	ge
 80078ee:	4643      	movge	r3, r8
 80078f0:	46a0      	movge	r8, r4
 80078f2:	4630      	mov	r0, r6
 80078f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078f8:	bfa6      	itte	ge
 80078fa:	461c      	movge	r4, r3
 80078fc:	2500      	movge	r5, #0
 80078fe:	2501      	movlt	r5, #1
 8007900:	f7ff fd3a 	bl	8007378 <_Balloc>
 8007904:	b920      	cbnz	r0, 8007910 <__mdiff+0x5c>
 8007906:	4b2e      	ldr	r3, [pc, #184]	; (80079c0 <__mdiff+0x10c>)
 8007908:	4602      	mov	r2, r0
 800790a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800790e:	e7e5      	b.n	80078dc <__mdiff+0x28>
 8007910:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007914:	6926      	ldr	r6, [r4, #16]
 8007916:	60c5      	str	r5, [r0, #12]
 8007918:	f104 0914 	add.w	r9, r4, #20
 800791c:	f108 0514 	add.w	r5, r8, #20
 8007920:	f100 0e14 	add.w	lr, r0, #20
 8007924:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800792c:	f108 0210 	add.w	r2, r8, #16
 8007930:	46f2      	mov	sl, lr
 8007932:	2100      	movs	r1, #0
 8007934:	f859 3b04 	ldr.w	r3, [r9], #4
 8007938:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800793c:	fa1f f883 	uxth.w	r8, r3
 8007940:	fa11 f18b 	uxtah	r1, r1, fp
 8007944:	0c1b      	lsrs	r3, r3, #16
 8007946:	eba1 0808 	sub.w	r8, r1, r8
 800794a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800794e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007952:	fa1f f888 	uxth.w	r8, r8
 8007956:	1419      	asrs	r1, r3, #16
 8007958:	454e      	cmp	r6, r9
 800795a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800795e:	f84a 3b04 	str.w	r3, [sl], #4
 8007962:	d8e7      	bhi.n	8007934 <__mdiff+0x80>
 8007964:	1b33      	subs	r3, r6, r4
 8007966:	3b15      	subs	r3, #21
 8007968:	f023 0303 	bic.w	r3, r3, #3
 800796c:	3304      	adds	r3, #4
 800796e:	3415      	adds	r4, #21
 8007970:	42a6      	cmp	r6, r4
 8007972:	bf38      	it	cc
 8007974:	2304      	movcc	r3, #4
 8007976:	441d      	add	r5, r3
 8007978:	4473      	add	r3, lr
 800797a:	469e      	mov	lr, r3
 800797c:	462e      	mov	r6, r5
 800797e:	4566      	cmp	r6, ip
 8007980:	d30e      	bcc.n	80079a0 <__mdiff+0xec>
 8007982:	f10c 0203 	add.w	r2, ip, #3
 8007986:	1b52      	subs	r2, r2, r5
 8007988:	f022 0203 	bic.w	r2, r2, #3
 800798c:	3d03      	subs	r5, #3
 800798e:	45ac      	cmp	ip, r5
 8007990:	bf38      	it	cc
 8007992:	2200      	movcc	r2, #0
 8007994:	441a      	add	r2, r3
 8007996:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800799a:	b17b      	cbz	r3, 80079bc <__mdiff+0x108>
 800799c:	6107      	str	r7, [r0, #16]
 800799e:	e7a3      	b.n	80078e8 <__mdiff+0x34>
 80079a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80079a4:	fa11 f288 	uxtah	r2, r1, r8
 80079a8:	1414      	asrs	r4, r2, #16
 80079aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80079ae:	b292      	uxth	r2, r2
 80079b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80079b4:	f84e 2b04 	str.w	r2, [lr], #4
 80079b8:	1421      	asrs	r1, r4, #16
 80079ba:	e7e0      	b.n	800797e <__mdiff+0xca>
 80079bc:	3f01      	subs	r7, #1
 80079be:	e7ea      	b.n	8007996 <__mdiff+0xe2>
 80079c0:	08008d1f 	.word	0x08008d1f
 80079c4:	08008d30 	.word	0x08008d30

080079c8 <__d2b>:
 80079c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	4689      	mov	r9, r1
 80079ce:	2101      	movs	r1, #1
 80079d0:	ec57 6b10 	vmov	r6, r7, d0
 80079d4:	4690      	mov	r8, r2
 80079d6:	f7ff fccf 	bl	8007378 <_Balloc>
 80079da:	4604      	mov	r4, r0
 80079dc:	b930      	cbnz	r0, 80079ec <__d2b+0x24>
 80079de:	4602      	mov	r2, r0
 80079e0:	4b25      	ldr	r3, [pc, #148]	; (8007a78 <__d2b+0xb0>)
 80079e2:	4826      	ldr	r0, [pc, #152]	; (8007a7c <__d2b+0xb4>)
 80079e4:	f240 310a 	movw	r1, #778	; 0x30a
 80079e8:	f000 faac 	bl	8007f44 <__assert_func>
 80079ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80079f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079f4:	bb35      	cbnz	r5, 8007a44 <__d2b+0x7c>
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	d028      	beq.n	8007a4e <__d2b+0x86>
 80079fc:	4668      	mov	r0, sp
 80079fe:	9600      	str	r6, [sp, #0]
 8007a00:	f7ff fd82 	bl	8007508 <__lo0bits>
 8007a04:	9900      	ldr	r1, [sp, #0]
 8007a06:	b300      	cbz	r0, 8007a4a <__d2b+0x82>
 8007a08:	9a01      	ldr	r2, [sp, #4]
 8007a0a:	f1c0 0320 	rsb	r3, r0, #32
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	430b      	orrs	r3, r1
 8007a14:	40c2      	lsrs	r2, r0
 8007a16:	6163      	str	r3, [r4, #20]
 8007a18:	9201      	str	r2, [sp, #4]
 8007a1a:	9b01      	ldr	r3, [sp, #4]
 8007a1c:	61a3      	str	r3, [r4, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bf14      	ite	ne
 8007a22:	2202      	movne	r2, #2
 8007a24:	2201      	moveq	r2, #1
 8007a26:	6122      	str	r2, [r4, #16]
 8007a28:	b1d5      	cbz	r5, 8007a60 <__d2b+0x98>
 8007a2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a2e:	4405      	add	r5, r0
 8007a30:	f8c9 5000 	str.w	r5, [r9]
 8007a34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a38:	f8c8 0000 	str.w	r0, [r8]
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	b003      	add	sp, #12
 8007a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a48:	e7d5      	b.n	80079f6 <__d2b+0x2e>
 8007a4a:	6161      	str	r1, [r4, #20]
 8007a4c:	e7e5      	b.n	8007a1a <__d2b+0x52>
 8007a4e:	a801      	add	r0, sp, #4
 8007a50:	f7ff fd5a 	bl	8007508 <__lo0bits>
 8007a54:	9b01      	ldr	r3, [sp, #4]
 8007a56:	6163      	str	r3, [r4, #20]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	6122      	str	r2, [r4, #16]
 8007a5c:	3020      	adds	r0, #32
 8007a5e:	e7e3      	b.n	8007a28 <__d2b+0x60>
 8007a60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a68:	f8c9 0000 	str.w	r0, [r9]
 8007a6c:	6918      	ldr	r0, [r3, #16]
 8007a6e:	f7ff fd2b 	bl	80074c8 <__hi0bits>
 8007a72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a76:	e7df      	b.n	8007a38 <__d2b+0x70>
 8007a78:	08008d1f 	.word	0x08008d1f
 8007a7c:	08008d30 	.word	0x08008d30

08007a80 <_calloc_r>:
 8007a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a82:	fba1 2402 	umull	r2, r4, r1, r2
 8007a86:	b94c      	cbnz	r4, 8007a9c <_calloc_r+0x1c>
 8007a88:	4611      	mov	r1, r2
 8007a8a:	9201      	str	r2, [sp, #4]
 8007a8c:	f000 f87a 	bl	8007b84 <_malloc_r>
 8007a90:	9a01      	ldr	r2, [sp, #4]
 8007a92:	4605      	mov	r5, r0
 8007a94:	b930      	cbnz	r0, 8007aa4 <_calloc_r+0x24>
 8007a96:	4628      	mov	r0, r5
 8007a98:	b003      	add	sp, #12
 8007a9a:	bd30      	pop	{r4, r5, pc}
 8007a9c:	220c      	movs	r2, #12
 8007a9e:	6002      	str	r2, [r0, #0]
 8007aa0:	2500      	movs	r5, #0
 8007aa2:	e7f8      	b.n	8007a96 <_calloc_r+0x16>
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	f7fe f92b 	bl	8005d00 <memset>
 8007aaa:	e7f4      	b.n	8007a96 <_calloc_r+0x16>

08007aac <_free_r>:
 8007aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aae:	2900      	cmp	r1, #0
 8007ab0:	d044      	beq.n	8007b3c <_free_r+0x90>
 8007ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab6:	9001      	str	r0, [sp, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f1a1 0404 	sub.w	r4, r1, #4
 8007abe:	bfb8      	it	lt
 8007ac0:	18e4      	addlt	r4, r4, r3
 8007ac2:	f000 fa9b 	bl	8007ffc <__malloc_lock>
 8007ac6:	4a1e      	ldr	r2, [pc, #120]	; (8007b40 <_free_r+0x94>)
 8007ac8:	9801      	ldr	r0, [sp, #4]
 8007aca:	6813      	ldr	r3, [r2, #0]
 8007acc:	b933      	cbnz	r3, 8007adc <_free_r+0x30>
 8007ace:	6063      	str	r3, [r4, #4]
 8007ad0:	6014      	str	r4, [r2, #0]
 8007ad2:	b003      	add	sp, #12
 8007ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ad8:	f000 ba96 	b.w	8008008 <__malloc_unlock>
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d908      	bls.n	8007af2 <_free_r+0x46>
 8007ae0:	6825      	ldr	r5, [r4, #0]
 8007ae2:	1961      	adds	r1, r4, r5
 8007ae4:	428b      	cmp	r3, r1
 8007ae6:	bf01      	itttt	eq
 8007ae8:	6819      	ldreq	r1, [r3, #0]
 8007aea:	685b      	ldreq	r3, [r3, #4]
 8007aec:	1949      	addeq	r1, r1, r5
 8007aee:	6021      	streq	r1, [r4, #0]
 8007af0:	e7ed      	b.n	8007ace <_free_r+0x22>
 8007af2:	461a      	mov	r2, r3
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	b10b      	cbz	r3, 8007afc <_free_r+0x50>
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	d9fa      	bls.n	8007af2 <_free_r+0x46>
 8007afc:	6811      	ldr	r1, [r2, #0]
 8007afe:	1855      	adds	r5, r2, r1
 8007b00:	42a5      	cmp	r5, r4
 8007b02:	d10b      	bne.n	8007b1c <_free_r+0x70>
 8007b04:	6824      	ldr	r4, [r4, #0]
 8007b06:	4421      	add	r1, r4
 8007b08:	1854      	adds	r4, r2, r1
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	6011      	str	r1, [r2, #0]
 8007b0e:	d1e0      	bne.n	8007ad2 <_free_r+0x26>
 8007b10:	681c      	ldr	r4, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	6053      	str	r3, [r2, #4]
 8007b16:	4421      	add	r1, r4
 8007b18:	6011      	str	r1, [r2, #0]
 8007b1a:	e7da      	b.n	8007ad2 <_free_r+0x26>
 8007b1c:	d902      	bls.n	8007b24 <_free_r+0x78>
 8007b1e:	230c      	movs	r3, #12
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	e7d6      	b.n	8007ad2 <_free_r+0x26>
 8007b24:	6825      	ldr	r5, [r4, #0]
 8007b26:	1961      	adds	r1, r4, r5
 8007b28:	428b      	cmp	r3, r1
 8007b2a:	bf04      	itt	eq
 8007b2c:	6819      	ldreq	r1, [r3, #0]
 8007b2e:	685b      	ldreq	r3, [r3, #4]
 8007b30:	6063      	str	r3, [r4, #4]
 8007b32:	bf04      	itt	eq
 8007b34:	1949      	addeq	r1, r1, r5
 8007b36:	6021      	streq	r1, [r4, #0]
 8007b38:	6054      	str	r4, [r2, #4]
 8007b3a:	e7ca      	b.n	8007ad2 <_free_r+0x26>
 8007b3c:	b003      	add	sp, #12
 8007b3e:	bd30      	pop	{r4, r5, pc}
 8007b40:	20000390 	.word	0x20000390

08007b44 <sbrk_aligned>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4e0e      	ldr	r6, [pc, #56]	; (8007b80 <sbrk_aligned+0x3c>)
 8007b48:	460c      	mov	r4, r1
 8007b4a:	6831      	ldr	r1, [r6, #0]
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	b911      	cbnz	r1, 8007b56 <sbrk_aligned+0x12>
 8007b50:	f000 f9e8 	bl	8007f24 <_sbrk_r>
 8007b54:	6030      	str	r0, [r6, #0]
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f9e3 	bl	8007f24 <_sbrk_r>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	d00a      	beq.n	8007b78 <sbrk_aligned+0x34>
 8007b62:	1cc4      	adds	r4, r0, #3
 8007b64:	f024 0403 	bic.w	r4, r4, #3
 8007b68:	42a0      	cmp	r0, r4
 8007b6a:	d007      	beq.n	8007b7c <sbrk_aligned+0x38>
 8007b6c:	1a21      	subs	r1, r4, r0
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 f9d8 	bl	8007f24 <_sbrk_r>
 8007b74:	3001      	adds	r0, #1
 8007b76:	d101      	bne.n	8007b7c <sbrk_aligned+0x38>
 8007b78:	f04f 34ff 	mov.w	r4, #4294967295
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	20000394 	.word	0x20000394

08007b84 <_malloc_r>:
 8007b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b88:	1ccd      	adds	r5, r1, #3
 8007b8a:	f025 0503 	bic.w	r5, r5, #3
 8007b8e:	3508      	adds	r5, #8
 8007b90:	2d0c      	cmp	r5, #12
 8007b92:	bf38      	it	cc
 8007b94:	250c      	movcc	r5, #12
 8007b96:	2d00      	cmp	r5, #0
 8007b98:	4607      	mov	r7, r0
 8007b9a:	db01      	blt.n	8007ba0 <_malloc_r+0x1c>
 8007b9c:	42a9      	cmp	r1, r5
 8007b9e:	d905      	bls.n	8007bac <_malloc_r+0x28>
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	2600      	movs	r6, #0
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bac:	4e2e      	ldr	r6, [pc, #184]	; (8007c68 <_malloc_r+0xe4>)
 8007bae:	f000 fa25 	bl	8007ffc <__malloc_lock>
 8007bb2:	6833      	ldr	r3, [r6, #0]
 8007bb4:	461c      	mov	r4, r3
 8007bb6:	bb34      	cbnz	r4, 8007c06 <_malloc_r+0x82>
 8007bb8:	4629      	mov	r1, r5
 8007bba:	4638      	mov	r0, r7
 8007bbc:	f7ff ffc2 	bl	8007b44 <sbrk_aligned>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	d14d      	bne.n	8007c62 <_malloc_r+0xde>
 8007bc6:	6834      	ldr	r4, [r6, #0]
 8007bc8:	4626      	mov	r6, r4
 8007bca:	2e00      	cmp	r6, #0
 8007bcc:	d140      	bne.n	8007c50 <_malloc_r+0xcc>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	eb04 0803 	add.w	r8, r4, r3
 8007bd8:	f000 f9a4 	bl	8007f24 <_sbrk_r>
 8007bdc:	4580      	cmp	r8, r0
 8007bde:	d13a      	bne.n	8007c56 <_malloc_r+0xd2>
 8007be0:	6821      	ldr	r1, [r4, #0]
 8007be2:	3503      	adds	r5, #3
 8007be4:	1a6d      	subs	r5, r5, r1
 8007be6:	f025 0503 	bic.w	r5, r5, #3
 8007bea:	3508      	adds	r5, #8
 8007bec:	2d0c      	cmp	r5, #12
 8007bee:	bf38      	it	cc
 8007bf0:	250c      	movcc	r5, #12
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	f7ff ffa5 	bl	8007b44 <sbrk_aligned>
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d02b      	beq.n	8007c56 <_malloc_r+0xd2>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	442b      	add	r3, r5
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	e00e      	b.n	8007c24 <_malloc_r+0xa0>
 8007c06:	6822      	ldr	r2, [r4, #0]
 8007c08:	1b52      	subs	r2, r2, r5
 8007c0a:	d41e      	bmi.n	8007c4a <_malloc_r+0xc6>
 8007c0c:	2a0b      	cmp	r2, #11
 8007c0e:	d916      	bls.n	8007c3e <_malloc_r+0xba>
 8007c10:	1961      	adds	r1, r4, r5
 8007c12:	42a3      	cmp	r3, r4
 8007c14:	6025      	str	r5, [r4, #0]
 8007c16:	bf18      	it	ne
 8007c18:	6059      	strne	r1, [r3, #4]
 8007c1a:	6863      	ldr	r3, [r4, #4]
 8007c1c:	bf08      	it	eq
 8007c1e:	6031      	streq	r1, [r6, #0]
 8007c20:	5162      	str	r2, [r4, r5]
 8007c22:	604b      	str	r3, [r1, #4]
 8007c24:	4638      	mov	r0, r7
 8007c26:	f104 060b 	add.w	r6, r4, #11
 8007c2a:	f000 f9ed 	bl	8008008 <__malloc_unlock>
 8007c2e:	f026 0607 	bic.w	r6, r6, #7
 8007c32:	1d23      	adds	r3, r4, #4
 8007c34:	1af2      	subs	r2, r6, r3
 8007c36:	d0b6      	beq.n	8007ba6 <_malloc_r+0x22>
 8007c38:	1b9b      	subs	r3, r3, r6
 8007c3a:	50a3      	str	r3, [r4, r2]
 8007c3c:	e7b3      	b.n	8007ba6 <_malloc_r+0x22>
 8007c3e:	6862      	ldr	r2, [r4, #4]
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	bf0c      	ite	eq
 8007c44:	6032      	streq	r2, [r6, #0]
 8007c46:	605a      	strne	r2, [r3, #4]
 8007c48:	e7ec      	b.n	8007c24 <_malloc_r+0xa0>
 8007c4a:	4623      	mov	r3, r4
 8007c4c:	6864      	ldr	r4, [r4, #4]
 8007c4e:	e7b2      	b.n	8007bb6 <_malloc_r+0x32>
 8007c50:	4634      	mov	r4, r6
 8007c52:	6876      	ldr	r6, [r6, #4]
 8007c54:	e7b9      	b.n	8007bca <_malloc_r+0x46>
 8007c56:	230c      	movs	r3, #12
 8007c58:	603b      	str	r3, [r7, #0]
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	f000 f9d4 	bl	8008008 <__malloc_unlock>
 8007c60:	e7a1      	b.n	8007ba6 <_malloc_r+0x22>
 8007c62:	6025      	str	r5, [r4, #0]
 8007c64:	e7de      	b.n	8007c24 <_malloc_r+0xa0>
 8007c66:	bf00      	nop
 8007c68:	20000390 	.word	0x20000390

08007c6c <__ssputs_r>:
 8007c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c70:	688e      	ldr	r6, [r1, #8]
 8007c72:	429e      	cmp	r6, r3
 8007c74:	4682      	mov	sl, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	4690      	mov	r8, r2
 8007c7a:	461f      	mov	r7, r3
 8007c7c:	d838      	bhi.n	8007cf0 <__ssputs_r+0x84>
 8007c7e:	898a      	ldrh	r2, [r1, #12]
 8007c80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c84:	d032      	beq.n	8007cec <__ssputs_r+0x80>
 8007c86:	6825      	ldr	r5, [r4, #0]
 8007c88:	6909      	ldr	r1, [r1, #16]
 8007c8a:	eba5 0901 	sub.w	r9, r5, r1
 8007c8e:	6965      	ldr	r5, [r4, #20]
 8007c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c98:	3301      	adds	r3, #1
 8007c9a:	444b      	add	r3, r9
 8007c9c:	106d      	asrs	r5, r5, #1
 8007c9e:	429d      	cmp	r5, r3
 8007ca0:	bf38      	it	cc
 8007ca2:	461d      	movcc	r5, r3
 8007ca4:	0553      	lsls	r3, r2, #21
 8007ca6:	d531      	bpl.n	8007d0c <__ssputs_r+0xa0>
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7ff ff6b 	bl	8007b84 <_malloc_r>
 8007cae:	4606      	mov	r6, r0
 8007cb0:	b950      	cbnz	r0, 8007cc8 <__ssputs_r+0x5c>
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	f8ca 3000 	str.w	r3, [sl]
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc8:	6921      	ldr	r1, [r4, #16]
 8007cca:	464a      	mov	r2, r9
 8007ccc:	f7ff fb46 	bl	800735c <memcpy>
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	6126      	str	r6, [r4, #16]
 8007cde:	6165      	str	r5, [r4, #20]
 8007ce0:	444e      	add	r6, r9
 8007ce2:	eba5 0509 	sub.w	r5, r5, r9
 8007ce6:	6026      	str	r6, [r4, #0]
 8007ce8:	60a5      	str	r5, [r4, #8]
 8007cea:	463e      	mov	r6, r7
 8007cec:	42be      	cmp	r6, r7
 8007cee:	d900      	bls.n	8007cf2 <__ssputs_r+0x86>
 8007cf0:	463e      	mov	r6, r7
 8007cf2:	6820      	ldr	r0, [r4, #0]
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	4641      	mov	r1, r8
 8007cf8:	f000 f966 	bl	8007fc8 <memmove>
 8007cfc:	68a3      	ldr	r3, [r4, #8]
 8007cfe:	1b9b      	subs	r3, r3, r6
 8007d00:	60a3      	str	r3, [r4, #8]
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	4433      	add	r3, r6
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	2000      	movs	r0, #0
 8007d0a:	e7db      	b.n	8007cc4 <__ssputs_r+0x58>
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	f000 f981 	bl	8008014 <_realloc_r>
 8007d12:	4606      	mov	r6, r0
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d1e1      	bne.n	8007cdc <__ssputs_r+0x70>
 8007d18:	6921      	ldr	r1, [r4, #16]
 8007d1a:	4650      	mov	r0, sl
 8007d1c:	f7ff fec6 	bl	8007aac <_free_r>
 8007d20:	e7c7      	b.n	8007cb2 <__ssputs_r+0x46>
	...

08007d24 <_svfiprintf_r>:
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	4698      	mov	r8, r3
 8007d2a:	898b      	ldrh	r3, [r1, #12]
 8007d2c:	061b      	lsls	r3, r3, #24
 8007d2e:	b09d      	sub	sp, #116	; 0x74
 8007d30:	4607      	mov	r7, r0
 8007d32:	460d      	mov	r5, r1
 8007d34:	4614      	mov	r4, r2
 8007d36:	d50e      	bpl.n	8007d56 <_svfiprintf_r+0x32>
 8007d38:	690b      	ldr	r3, [r1, #16]
 8007d3a:	b963      	cbnz	r3, 8007d56 <_svfiprintf_r+0x32>
 8007d3c:	2140      	movs	r1, #64	; 0x40
 8007d3e:	f7ff ff21 	bl	8007b84 <_malloc_r>
 8007d42:	6028      	str	r0, [r5, #0]
 8007d44:	6128      	str	r0, [r5, #16]
 8007d46:	b920      	cbnz	r0, 8007d52 <_svfiprintf_r+0x2e>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	e0d1      	b.n	8007ef6 <_svfiprintf_r+0x1d2>
 8007d52:	2340      	movs	r3, #64	; 0x40
 8007d54:	616b      	str	r3, [r5, #20]
 8007d56:	2300      	movs	r3, #0
 8007d58:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5a:	2320      	movs	r3, #32
 8007d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d64:	2330      	movs	r3, #48	; 0x30
 8007d66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f10 <_svfiprintf_r+0x1ec>
 8007d6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d6e:	f04f 0901 	mov.w	r9, #1
 8007d72:	4623      	mov	r3, r4
 8007d74:	469a      	mov	sl, r3
 8007d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d7a:	b10a      	cbz	r2, 8007d80 <_svfiprintf_r+0x5c>
 8007d7c:	2a25      	cmp	r2, #37	; 0x25
 8007d7e:	d1f9      	bne.n	8007d74 <_svfiprintf_r+0x50>
 8007d80:	ebba 0b04 	subs.w	fp, sl, r4
 8007d84:	d00b      	beq.n	8007d9e <_svfiprintf_r+0x7a>
 8007d86:	465b      	mov	r3, fp
 8007d88:	4622      	mov	r2, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f7ff ff6d 	bl	8007c6c <__ssputs_r>
 8007d92:	3001      	adds	r0, #1
 8007d94:	f000 80aa 	beq.w	8007eec <_svfiprintf_r+0x1c8>
 8007d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d9a:	445a      	add	r2, fp
 8007d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 80a2 	beq.w	8007eec <_svfiprintf_r+0x1c8>
 8007da8:	2300      	movs	r3, #0
 8007daa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db2:	f10a 0a01 	add.w	sl, sl, #1
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	9307      	str	r3, [sp, #28]
 8007dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8007dc0:	4654      	mov	r4, sl
 8007dc2:	2205      	movs	r2, #5
 8007dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc8:	4851      	ldr	r0, [pc, #324]	; (8007f10 <_svfiprintf_r+0x1ec>)
 8007dca:	f7f8 fa29 	bl	8000220 <memchr>
 8007dce:	9a04      	ldr	r2, [sp, #16]
 8007dd0:	b9d8      	cbnz	r0, 8007e0a <_svfiprintf_r+0xe6>
 8007dd2:	06d0      	lsls	r0, r2, #27
 8007dd4:	bf44      	itt	mi
 8007dd6:	2320      	movmi	r3, #32
 8007dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ddc:	0711      	lsls	r1, r2, #28
 8007dde:	bf44      	itt	mi
 8007de0:	232b      	movmi	r3, #43	; 0x2b
 8007de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007de6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dea:	2b2a      	cmp	r3, #42	; 0x2a
 8007dec:	d015      	beq.n	8007e1a <_svfiprintf_r+0xf6>
 8007dee:	9a07      	ldr	r2, [sp, #28]
 8007df0:	4654      	mov	r4, sl
 8007df2:	2000      	movs	r0, #0
 8007df4:	f04f 0c0a 	mov.w	ip, #10
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dfe:	3b30      	subs	r3, #48	; 0x30
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d94e      	bls.n	8007ea2 <_svfiprintf_r+0x17e>
 8007e04:	b1b0      	cbz	r0, 8007e34 <_svfiprintf_r+0x110>
 8007e06:	9207      	str	r2, [sp, #28]
 8007e08:	e014      	b.n	8007e34 <_svfiprintf_r+0x110>
 8007e0a:	eba0 0308 	sub.w	r3, r0, r8
 8007e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e12:	4313      	orrs	r3, r2
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	46a2      	mov	sl, r4
 8007e18:	e7d2      	b.n	8007dc0 <_svfiprintf_r+0x9c>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	1d19      	adds	r1, r3, #4
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	9103      	str	r1, [sp, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfbb      	ittet	lt
 8007e26:	425b      	neglt	r3, r3
 8007e28:	f042 0202 	orrlt.w	r2, r2, #2
 8007e2c:	9307      	strge	r3, [sp, #28]
 8007e2e:	9307      	strlt	r3, [sp, #28]
 8007e30:	bfb8      	it	lt
 8007e32:	9204      	strlt	r2, [sp, #16]
 8007e34:	7823      	ldrb	r3, [r4, #0]
 8007e36:	2b2e      	cmp	r3, #46	; 0x2e
 8007e38:	d10c      	bne.n	8007e54 <_svfiprintf_r+0x130>
 8007e3a:	7863      	ldrb	r3, [r4, #1]
 8007e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e3e:	d135      	bne.n	8007eac <_svfiprintf_r+0x188>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	1d1a      	adds	r2, r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	9203      	str	r2, [sp, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	bfb8      	it	lt
 8007e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e50:	3402      	adds	r4, #2
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f20 <_svfiprintf_r+0x1fc>
 8007e58:	7821      	ldrb	r1, [r4, #0]
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	f7f8 f9df 	bl	8000220 <memchr>
 8007e62:	b140      	cbz	r0, 8007e76 <_svfiprintf_r+0x152>
 8007e64:	2340      	movs	r3, #64	; 0x40
 8007e66:	eba0 000a 	sub.w	r0, r0, sl
 8007e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e6e:	9b04      	ldr	r3, [sp, #16]
 8007e70:	4303      	orrs	r3, r0
 8007e72:	3401      	adds	r4, #1
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7a:	4826      	ldr	r0, [pc, #152]	; (8007f14 <_svfiprintf_r+0x1f0>)
 8007e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e80:	2206      	movs	r2, #6
 8007e82:	f7f8 f9cd 	bl	8000220 <memchr>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d038      	beq.n	8007efc <_svfiprintf_r+0x1d8>
 8007e8a:	4b23      	ldr	r3, [pc, #140]	; (8007f18 <_svfiprintf_r+0x1f4>)
 8007e8c:	bb1b      	cbnz	r3, 8007ed6 <_svfiprintf_r+0x1b2>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	3307      	adds	r3, #7
 8007e92:	f023 0307 	bic.w	r3, r3, #7
 8007e96:	3308      	adds	r3, #8
 8007e98:	9303      	str	r3, [sp, #12]
 8007e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9c:	4433      	add	r3, r6
 8007e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea0:	e767      	b.n	8007d72 <_svfiprintf_r+0x4e>
 8007ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	e7a5      	b.n	8007df8 <_svfiprintf_r+0xd4>
 8007eac:	2300      	movs	r3, #0
 8007eae:	3401      	adds	r4, #1
 8007eb0:	9305      	str	r3, [sp, #20]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	f04f 0c0a 	mov.w	ip, #10
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ebe:	3a30      	subs	r2, #48	; 0x30
 8007ec0:	2a09      	cmp	r2, #9
 8007ec2:	d903      	bls.n	8007ecc <_svfiprintf_r+0x1a8>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0c5      	beq.n	8007e54 <_svfiprintf_r+0x130>
 8007ec8:	9105      	str	r1, [sp, #20]
 8007eca:	e7c3      	b.n	8007e54 <_svfiprintf_r+0x130>
 8007ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e7f0      	b.n	8007eb8 <_svfiprintf_r+0x194>
 8007ed6:	ab03      	add	r3, sp, #12
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	462a      	mov	r2, r5
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <_svfiprintf_r+0x1f8>)
 8007ede:	a904      	add	r1, sp, #16
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7fd ffb5 	bl	8005e50 <_printf_float>
 8007ee6:	1c42      	adds	r2, r0, #1
 8007ee8:	4606      	mov	r6, r0
 8007eea:	d1d6      	bne.n	8007e9a <_svfiprintf_r+0x176>
 8007eec:	89ab      	ldrh	r3, [r5, #12]
 8007eee:	065b      	lsls	r3, r3, #25
 8007ef0:	f53f af2c 	bmi.w	8007d4c <_svfiprintf_r+0x28>
 8007ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ef6:	b01d      	add	sp, #116	; 0x74
 8007ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efc:	ab03      	add	r3, sp, #12
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	462a      	mov	r2, r5
 8007f02:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <_svfiprintf_r+0x1f8>)
 8007f04:	a904      	add	r1, sp, #16
 8007f06:	4638      	mov	r0, r7
 8007f08:	f7fe fa46 	bl	8006398 <_printf_i>
 8007f0c:	e7eb      	b.n	8007ee6 <_svfiprintf_r+0x1c2>
 8007f0e:	bf00      	nop
 8007f10:	08008e8c 	.word	0x08008e8c
 8007f14:	08008e96 	.word	0x08008e96
 8007f18:	08005e51 	.word	0x08005e51
 8007f1c:	08007c6d 	.word	0x08007c6d
 8007f20:	08008e92 	.word	0x08008e92

08007f24 <_sbrk_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d06      	ldr	r5, [pc, #24]	; (8007f40 <_sbrk_r+0x1c>)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7f9 fddc 	bl	8001aec <_sbrk>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_sbrk_r+0x1a>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_sbrk_r+0x1a>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20000398 	.word	0x20000398

08007f44 <__assert_func>:
 8007f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f46:	4614      	mov	r4, r2
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <__assert_func+0x2c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4605      	mov	r5, r0
 8007f50:	68d8      	ldr	r0, [r3, #12]
 8007f52:	b14c      	cbz	r4, 8007f68 <__assert_func+0x24>
 8007f54:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <__assert_func+0x30>)
 8007f56:	9100      	str	r1, [sp, #0]
 8007f58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f5c:	4906      	ldr	r1, [pc, #24]	; (8007f78 <__assert_func+0x34>)
 8007f5e:	462b      	mov	r3, r5
 8007f60:	f000 f80e 	bl	8007f80 <fiprintf>
 8007f64:	f000 faac 	bl	80084c0 <abort>
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <__assert_func+0x38>)
 8007f6a:	461c      	mov	r4, r3
 8007f6c:	e7f3      	b.n	8007f56 <__assert_func+0x12>
 8007f6e:	bf00      	nop
 8007f70:	20000010 	.word	0x20000010
 8007f74:	08008e9d 	.word	0x08008e9d
 8007f78:	08008eaa 	.word	0x08008eaa
 8007f7c:	08008ed8 	.word	0x08008ed8

08007f80 <fiprintf>:
 8007f80:	b40e      	push	{r1, r2, r3}
 8007f82:	b503      	push	{r0, r1, lr}
 8007f84:	4601      	mov	r1, r0
 8007f86:	ab03      	add	r3, sp, #12
 8007f88:	4805      	ldr	r0, [pc, #20]	; (8007fa0 <fiprintf+0x20>)
 8007f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8e:	6800      	ldr	r0, [r0, #0]
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	f000 f897 	bl	80080c4 <_vfiprintf_r>
 8007f96:	b002      	add	sp, #8
 8007f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f9c:	b003      	add	sp, #12
 8007f9e:	4770      	bx	lr
 8007fa0:	20000010 	.word	0x20000010

08007fa4 <__ascii_mbtowc>:
 8007fa4:	b082      	sub	sp, #8
 8007fa6:	b901      	cbnz	r1, 8007faa <__ascii_mbtowc+0x6>
 8007fa8:	a901      	add	r1, sp, #4
 8007faa:	b142      	cbz	r2, 8007fbe <__ascii_mbtowc+0x1a>
 8007fac:	b14b      	cbz	r3, 8007fc2 <__ascii_mbtowc+0x1e>
 8007fae:	7813      	ldrb	r3, [r2, #0]
 8007fb0:	600b      	str	r3, [r1, #0]
 8007fb2:	7812      	ldrb	r2, [r2, #0]
 8007fb4:	1e10      	subs	r0, r2, #0
 8007fb6:	bf18      	it	ne
 8007fb8:	2001      	movne	r0, #1
 8007fba:	b002      	add	sp, #8
 8007fbc:	4770      	bx	lr
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	e7fb      	b.n	8007fba <__ascii_mbtowc+0x16>
 8007fc2:	f06f 0001 	mvn.w	r0, #1
 8007fc6:	e7f8      	b.n	8007fba <__ascii_mbtowc+0x16>

08007fc8 <memmove>:
 8007fc8:	4288      	cmp	r0, r1
 8007fca:	b510      	push	{r4, lr}
 8007fcc:	eb01 0402 	add.w	r4, r1, r2
 8007fd0:	d902      	bls.n	8007fd8 <memmove+0x10>
 8007fd2:	4284      	cmp	r4, r0
 8007fd4:	4623      	mov	r3, r4
 8007fd6:	d807      	bhi.n	8007fe8 <memmove+0x20>
 8007fd8:	1e43      	subs	r3, r0, #1
 8007fda:	42a1      	cmp	r1, r4
 8007fdc:	d008      	beq.n	8007ff0 <memmove+0x28>
 8007fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fe6:	e7f8      	b.n	8007fda <memmove+0x12>
 8007fe8:	4402      	add	r2, r0
 8007fea:	4601      	mov	r1, r0
 8007fec:	428a      	cmp	r2, r1
 8007fee:	d100      	bne.n	8007ff2 <memmove+0x2a>
 8007ff0:	bd10      	pop	{r4, pc}
 8007ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ffa:	e7f7      	b.n	8007fec <memmove+0x24>

08007ffc <__malloc_lock>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	; (8008004 <__malloc_lock+0x8>)
 8007ffe:	f000 bc1f 	b.w	8008840 <__retarget_lock_acquire_recursive>
 8008002:	bf00      	nop
 8008004:	2000039c 	.word	0x2000039c

08008008 <__malloc_unlock>:
 8008008:	4801      	ldr	r0, [pc, #4]	; (8008010 <__malloc_unlock+0x8>)
 800800a:	f000 bc1a 	b.w	8008842 <__retarget_lock_release_recursive>
 800800e:	bf00      	nop
 8008010:	2000039c 	.word	0x2000039c

08008014 <_realloc_r>:
 8008014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008018:	4680      	mov	r8, r0
 800801a:	4614      	mov	r4, r2
 800801c:	460e      	mov	r6, r1
 800801e:	b921      	cbnz	r1, 800802a <_realloc_r+0x16>
 8008020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008024:	4611      	mov	r1, r2
 8008026:	f7ff bdad 	b.w	8007b84 <_malloc_r>
 800802a:	b92a      	cbnz	r2, 8008038 <_realloc_r+0x24>
 800802c:	f7ff fd3e 	bl	8007aac <_free_r>
 8008030:	4625      	mov	r5, r4
 8008032:	4628      	mov	r0, r5
 8008034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008038:	f000 fc6a 	bl	8008910 <_malloc_usable_size_r>
 800803c:	4284      	cmp	r4, r0
 800803e:	4607      	mov	r7, r0
 8008040:	d802      	bhi.n	8008048 <_realloc_r+0x34>
 8008042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008046:	d812      	bhi.n	800806e <_realloc_r+0x5a>
 8008048:	4621      	mov	r1, r4
 800804a:	4640      	mov	r0, r8
 800804c:	f7ff fd9a 	bl	8007b84 <_malloc_r>
 8008050:	4605      	mov	r5, r0
 8008052:	2800      	cmp	r0, #0
 8008054:	d0ed      	beq.n	8008032 <_realloc_r+0x1e>
 8008056:	42bc      	cmp	r4, r7
 8008058:	4622      	mov	r2, r4
 800805a:	4631      	mov	r1, r6
 800805c:	bf28      	it	cs
 800805e:	463a      	movcs	r2, r7
 8008060:	f7ff f97c 	bl	800735c <memcpy>
 8008064:	4631      	mov	r1, r6
 8008066:	4640      	mov	r0, r8
 8008068:	f7ff fd20 	bl	8007aac <_free_r>
 800806c:	e7e1      	b.n	8008032 <_realloc_r+0x1e>
 800806e:	4635      	mov	r5, r6
 8008070:	e7df      	b.n	8008032 <_realloc_r+0x1e>

08008072 <__sfputc_r>:
 8008072:	6893      	ldr	r3, [r2, #8]
 8008074:	3b01      	subs	r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	b410      	push	{r4}
 800807a:	6093      	str	r3, [r2, #8]
 800807c:	da08      	bge.n	8008090 <__sfputc_r+0x1e>
 800807e:	6994      	ldr	r4, [r2, #24]
 8008080:	42a3      	cmp	r3, r4
 8008082:	db01      	blt.n	8008088 <__sfputc_r+0x16>
 8008084:	290a      	cmp	r1, #10
 8008086:	d103      	bne.n	8008090 <__sfputc_r+0x1e>
 8008088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800808c:	f000 b94a 	b.w	8008324 <__swbuf_r>
 8008090:	6813      	ldr	r3, [r2, #0]
 8008092:	1c58      	adds	r0, r3, #1
 8008094:	6010      	str	r0, [r2, #0]
 8008096:	7019      	strb	r1, [r3, #0]
 8008098:	4608      	mov	r0, r1
 800809a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <__sfputs_r>:
 80080a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a2:	4606      	mov	r6, r0
 80080a4:	460f      	mov	r7, r1
 80080a6:	4614      	mov	r4, r2
 80080a8:	18d5      	adds	r5, r2, r3
 80080aa:	42ac      	cmp	r4, r5
 80080ac:	d101      	bne.n	80080b2 <__sfputs_r+0x12>
 80080ae:	2000      	movs	r0, #0
 80080b0:	e007      	b.n	80080c2 <__sfputs_r+0x22>
 80080b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b6:	463a      	mov	r2, r7
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7ff ffda 	bl	8008072 <__sfputc_r>
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	d1f3      	bne.n	80080aa <__sfputs_r+0xa>
 80080c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080c4 <_vfiprintf_r>:
 80080c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c8:	460d      	mov	r5, r1
 80080ca:	b09d      	sub	sp, #116	; 0x74
 80080cc:	4614      	mov	r4, r2
 80080ce:	4698      	mov	r8, r3
 80080d0:	4606      	mov	r6, r0
 80080d2:	b118      	cbz	r0, 80080dc <_vfiprintf_r+0x18>
 80080d4:	6983      	ldr	r3, [r0, #24]
 80080d6:	b90b      	cbnz	r3, 80080dc <_vfiprintf_r+0x18>
 80080d8:	f000 fb14 	bl	8008704 <__sinit>
 80080dc:	4b89      	ldr	r3, [pc, #548]	; (8008304 <_vfiprintf_r+0x240>)
 80080de:	429d      	cmp	r5, r3
 80080e0:	d11b      	bne.n	800811a <_vfiprintf_r+0x56>
 80080e2:	6875      	ldr	r5, [r6, #4]
 80080e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080e6:	07d9      	lsls	r1, r3, #31
 80080e8:	d405      	bmi.n	80080f6 <_vfiprintf_r+0x32>
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	059a      	lsls	r2, r3, #22
 80080ee:	d402      	bmi.n	80080f6 <_vfiprintf_r+0x32>
 80080f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080f2:	f000 fba5 	bl	8008840 <__retarget_lock_acquire_recursive>
 80080f6:	89ab      	ldrh	r3, [r5, #12]
 80080f8:	071b      	lsls	r3, r3, #28
 80080fa:	d501      	bpl.n	8008100 <_vfiprintf_r+0x3c>
 80080fc:	692b      	ldr	r3, [r5, #16]
 80080fe:	b9eb      	cbnz	r3, 800813c <_vfiprintf_r+0x78>
 8008100:	4629      	mov	r1, r5
 8008102:	4630      	mov	r0, r6
 8008104:	f000 f96e 	bl	80083e4 <__swsetup_r>
 8008108:	b1c0      	cbz	r0, 800813c <_vfiprintf_r+0x78>
 800810a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800810c:	07dc      	lsls	r4, r3, #31
 800810e:	d50e      	bpl.n	800812e <_vfiprintf_r+0x6a>
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	b01d      	add	sp, #116	; 0x74
 8008116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811a:	4b7b      	ldr	r3, [pc, #492]	; (8008308 <_vfiprintf_r+0x244>)
 800811c:	429d      	cmp	r5, r3
 800811e:	d101      	bne.n	8008124 <_vfiprintf_r+0x60>
 8008120:	68b5      	ldr	r5, [r6, #8]
 8008122:	e7df      	b.n	80080e4 <_vfiprintf_r+0x20>
 8008124:	4b79      	ldr	r3, [pc, #484]	; (800830c <_vfiprintf_r+0x248>)
 8008126:	429d      	cmp	r5, r3
 8008128:	bf08      	it	eq
 800812a:	68f5      	ldreq	r5, [r6, #12]
 800812c:	e7da      	b.n	80080e4 <_vfiprintf_r+0x20>
 800812e:	89ab      	ldrh	r3, [r5, #12]
 8008130:	0598      	lsls	r0, r3, #22
 8008132:	d4ed      	bmi.n	8008110 <_vfiprintf_r+0x4c>
 8008134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008136:	f000 fb84 	bl	8008842 <__retarget_lock_release_recursive>
 800813a:	e7e9      	b.n	8008110 <_vfiprintf_r+0x4c>
 800813c:	2300      	movs	r3, #0
 800813e:	9309      	str	r3, [sp, #36]	; 0x24
 8008140:	2320      	movs	r3, #32
 8008142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008146:	f8cd 800c 	str.w	r8, [sp, #12]
 800814a:	2330      	movs	r3, #48	; 0x30
 800814c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008310 <_vfiprintf_r+0x24c>
 8008150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008154:	f04f 0901 	mov.w	r9, #1
 8008158:	4623      	mov	r3, r4
 800815a:	469a      	mov	sl, r3
 800815c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008160:	b10a      	cbz	r2, 8008166 <_vfiprintf_r+0xa2>
 8008162:	2a25      	cmp	r2, #37	; 0x25
 8008164:	d1f9      	bne.n	800815a <_vfiprintf_r+0x96>
 8008166:	ebba 0b04 	subs.w	fp, sl, r4
 800816a:	d00b      	beq.n	8008184 <_vfiprintf_r+0xc0>
 800816c:	465b      	mov	r3, fp
 800816e:	4622      	mov	r2, r4
 8008170:	4629      	mov	r1, r5
 8008172:	4630      	mov	r0, r6
 8008174:	f7ff ff94 	bl	80080a0 <__sfputs_r>
 8008178:	3001      	adds	r0, #1
 800817a:	f000 80aa 	beq.w	80082d2 <_vfiprintf_r+0x20e>
 800817e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008180:	445a      	add	r2, fp
 8008182:	9209      	str	r2, [sp, #36]	; 0x24
 8008184:	f89a 3000 	ldrb.w	r3, [sl]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 80a2 	beq.w	80082d2 <_vfiprintf_r+0x20e>
 800818e:	2300      	movs	r3, #0
 8008190:	f04f 32ff 	mov.w	r2, #4294967295
 8008194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008198:	f10a 0a01 	add.w	sl, sl, #1
 800819c:	9304      	str	r3, [sp, #16]
 800819e:	9307      	str	r3, [sp, #28]
 80081a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081a4:	931a      	str	r3, [sp, #104]	; 0x68
 80081a6:	4654      	mov	r4, sl
 80081a8:	2205      	movs	r2, #5
 80081aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ae:	4858      	ldr	r0, [pc, #352]	; (8008310 <_vfiprintf_r+0x24c>)
 80081b0:	f7f8 f836 	bl	8000220 <memchr>
 80081b4:	9a04      	ldr	r2, [sp, #16]
 80081b6:	b9d8      	cbnz	r0, 80081f0 <_vfiprintf_r+0x12c>
 80081b8:	06d1      	lsls	r1, r2, #27
 80081ba:	bf44      	itt	mi
 80081bc:	2320      	movmi	r3, #32
 80081be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c2:	0713      	lsls	r3, r2, #28
 80081c4:	bf44      	itt	mi
 80081c6:	232b      	movmi	r3, #43	; 0x2b
 80081c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081cc:	f89a 3000 	ldrb.w	r3, [sl]
 80081d0:	2b2a      	cmp	r3, #42	; 0x2a
 80081d2:	d015      	beq.n	8008200 <_vfiprintf_r+0x13c>
 80081d4:	9a07      	ldr	r2, [sp, #28]
 80081d6:	4654      	mov	r4, sl
 80081d8:	2000      	movs	r0, #0
 80081da:	f04f 0c0a 	mov.w	ip, #10
 80081de:	4621      	mov	r1, r4
 80081e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081e4:	3b30      	subs	r3, #48	; 0x30
 80081e6:	2b09      	cmp	r3, #9
 80081e8:	d94e      	bls.n	8008288 <_vfiprintf_r+0x1c4>
 80081ea:	b1b0      	cbz	r0, 800821a <_vfiprintf_r+0x156>
 80081ec:	9207      	str	r2, [sp, #28]
 80081ee:	e014      	b.n	800821a <_vfiprintf_r+0x156>
 80081f0:	eba0 0308 	sub.w	r3, r0, r8
 80081f4:	fa09 f303 	lsl.w	r3, r9, r3
 80081f8:	4313      	orrs	r3, r2
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	46a2      	mov	sl, r4
 80081fe:	e7d2      	b.n	80081a6 <_vfiprintf_r+0xe2>
 8008200:	9b03      	ldr	r3, [sp, #12]
 8008202:	1d19      	adds	r1, r3, #4
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	9103      	str	r1, [sp, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	bfbb      	ittet	lt
 800820c:	425b      	neglt	r3, r3
 800820e:	f042 0202 	orrlt.w	r2, r2, #2
 8008212:	9307      	strge	r3, [sp, #28]
 8008214:	9307      	strlt	r3, [sp, #28]
 8008216:	bfb8      	it	lt
 8008218:	9204      	strlt	r2, [sp, #16]
 800821a:	7823      	ldrb	r3, [r4, #0]
 800821c:	2b2e      	cmp	r3, #46	; 0x2e
 800821e:	d10c      	bne.n	800823a <_vfiprintf_r+0x176>
 8008220:	7863      	ldrb	r3, [r4, #1]
 8008222:	2b2a      	cmp	r3, #42	; 0x2a
 8008224:	d135      	bne.n	8008292 <_vfiprintf_r+0x1ce>
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	1d1a      	adds	r2, r3, #4
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	9203      	str	r2, [sp, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	bfb8      	it	lt
 8008232:	f04f 33ff 	movlt.w	r3, #4294967295
 8008236:	3402      	adds	r4, #2
 8008238:	9305      	str	r3, [sp, #20]
 800823a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008320 <_vfiprintf_r+0x25c>
 800823e:	7821      	ldrb	r1, [r4, #0]
 8008240:	2203      	movs	r2, #3
 8008242:	4650      	mov	r0, sl
 8008244:	f7f7 ffec 	bl	8000220 <memchr>
 8008248:	b140      	cbz	r0, 800825c <_vfiprintf_r+0x198>
 800824a:	2340      	movs	r3, #64	; 0x40
 800824c:	eba0 000a 	sub.w	r0, r0, sl
 8008250:	fa03 f000 	lsl.w	r0, r3, r0
 8008254:	9b04      	ldr	r3, [sp, #16]
 8008256:	4303      	orrs	r3, r0
 8008258:	3401      	adds	r4, #1
 800825a:	9304      	str	r3, [sp, #16]
 800825c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008260:	482c      	ldr	r0, [pc, #176]	; (8008314 <_vfiprintf_r+0x250>)
 8008262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008266:	2206      	movs	r2, #6
 8008268:	f7f7 ffda 	bl	8000220 <memchr>
 800826c:	2800      	cmp	r0, #0
 800826e:	d03f      	beq.n	80082f0 <_vfiprintf_r+0x22c>
 8008270:	4b29      	ldr	r3, [pc, #164]	; (8008318 <_vfiprintf_r+0x254>)
 8008272:	bb1b      	cbnz	r3, 80082bc <_vfiprintf_r+0x1f8>
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	3307      	adds	r3, #7
 8008278:	f023 0307 	bic.w	r3, r3, #7
 800827c:	3308      	adds	r3, #8
 800827e:	9303      	str	r3, [sp, #12]
 8008280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008282:	443b      	add	r3, r7
 8008284:	9309      	str	r3, [sp, #36]	; 0x24
 8008286:	e767      	b.n	8008158 <_vfiprintf_r+0x94>
 8008288:	fb0c 3202 	mla	r2, ip, r2, r3
 800828c:	460c      	mov	r4, r1
 800828e:	2001      	movs	r0, #1
 8008290:	e7a5      	b.n	80081de <_vfiprintf_r+0x11a>
 8008292:	2300      	movs	r3, #0
 8008294:	3401      	adds	r4, #1
 8008296:	9305      	str	r3, [sp, #20]
 8008298:	4619      	mov	r1, r3
 800829a:	f04f 0c0a 	mov.w	ip, #10
 800829e:	4620      	mov	r0, r4
 80082a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a4:	3a30      	subs	r2, #48	; 0x30
 80082a6:	2a09      	cmp	r2, #9
 80082a8:	d903      	bls.n	80082b2 <_vfiprintf_r+0x1ee>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0c5      	beq.n	800823a <_vfiprintf_r+0x176>
 80082ae:	9105      	str	r1, [sp, #20]
 80082b0:	e7c3      	b.n	800823a <_vfiprintf_r+0x176>
 80082b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082b6:	4604      	mov	r4, r0
 80082b8:	2301      	movs	r3, #1
 80082ba:	e7f0      	b.n	800829e <_vfiprintf_r+0x1da>
 80082bc:	ab03      	add	r3, sp, #12
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	462a      	mov	r2, r5
 80082c2:	4b16      	ldr	r3, [pc, #88]	; (800831c <_vfiprintf_r+0x258>)
 80082c4:	a904      	add	r1, sp, #16
 80082c6:	4630      	mov	r0, r6
 80082c8:	f7fd fdc2 	bl	8005e50 <_printf_float>
 80082cc:	4607      	mov	r7, r0
 80082ce:	1c78      	adds	r0, r7, #1
 80082d0:	d1d6      	bne.n	8008280 <_vfiprintf_r+0x1bc>
 80082d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082d4:	07d9      	lsls	r1, r3, #31
 80082d6:	d405      	bmi.n	80082e4 <_vfiprintf_r+0x220>
 80082d8:	89ab      	ldrh	r3, [r5, #12]
 80082da:	059a      	lsls	r2, r3, #22
 80082dc:	d402      	bmi.n	80082e4 <_vfiprintf_r+0x220>
 80082de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082e0:	f000 faaf 	bl	8008842 <__retarget_lock_release_recursive>
 80082e4:	89ab      	ldrh	r3, [r5, #12]
 80082e6:	065b      	lsls	r3, r3, #25
 80082e8:	f53f af12 	bmi.w	8008110 <_vfiprintf_r+0x4c>
 80082ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ee:	e711      	b.n	8008114 <_vfiprintf_r+0x50>
 80082f0:	ab03      	add	r3, sp, #12
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	462a      	mov	r2, r5
 80082f6:	4b09      	ldr	r3, [pc, #36]	; (800831c <_vfiprintf_r+0x258>)
 80082f8:	a904      	add	r1, sp, #16
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7fe f84c 	bl	8006398 <_printf_i>
 8008300:	e7e4      	b.n	80082cc <_vfiprintf_r+0x208>
 8008302:	bf00      	nop
 8008304:	08009004 	.word	0x08009004
 8008308:	08009024 	.word	0x08009024
 800830c:	08008fe4 	.word	0x08008fe4
 8008310:	08008e8c 	.word	0x08008e8c
 8008314:	08008e96 	.word	0x08008e96
 8008318:	08005e51 	.word	0x08005e51
 800831c:	080080a1 	.word	0x080080a1
 8008320:	08008e92 	.word	0x08008e92

08008324 <__swbuf_r>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	460e      	mov	r6, r1
 8008328:	4614      	mov	r4, r2
 800832a:	4605      	mov	r5, r0
 800832c:	b118      	cbz	r0, 8008336 <__swbuf_r+0x12>
 800832e:	6983      	ldr	r3, [r0, #24]
 8008330:	b90b      	cbnz	r3, 8008336 <__swbuf_r+0x12>
 8008332:	f000 f9e7 	bl	8008704 <__sinit>
 8008336:	4b21      	ldr	r3, [pc, #132]	; (80083bc <__swbuf_r+0x98>)
 8008338:	429c      	cmp	r4, r3
 800833a:	d12b      	bne.n	8008394 <__swbuf_r+0x70>
 800833c:	686c      	ldr	r4, [r5, #4]
 800833e:	69a3      	ldr	r3, [r4, #24]
 8008340:	60a3      	str	r3, [r4, #8]
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	071a      	lsls	r2, r3, #28
 8008346:	d52f      	bpl.n	80083a8 <__swbuf_r+0x84>
 8008348:	6923      	ldr	r3, [r4, #16]
 800834a:	b36b      	cbz	r3, 80083a8 <__swbuf_r+0x84>
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	6820      	ldr	r0, [r4, #0]
 8008350:	1ac0      	subs	r0, r0, r3
 8008352:	6963      	ldr	r3, [r4, #20]
 8008354:	b2f6      	uxtb	r6, r6
 8008356:	4283      	cmp	r3, r0
 8008358:	4637      	mov	r7, r6
 800835a:	dc04      	bgt.n	8008366 <__swbuf_r+0x42>
 800835c:	4621      	mov	r1, r4
 800835e:	4628      	mov	r0, r5
 8008360:	f000 f93c 	bl	80085dc <_fflush_r>
 8008364:	bb30      	cbnz	r0, 80083b4 <__swbuf_r+0x90>
 8008366:	68a3      	ldr	r3, [r4, #8]
 8008368:	3b01      	subs	r3, #1
 800836a:	60a3      	str	r3, [r4, #8]
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	6022      	str	r2, [r4, #0]
 8008372:	701e      	strb	r6, [r3, #0]
 8008374:	6963      	ldr	r3, [r4, #20]
 8008376:	3001      	adds	r0, #1
 8008378:	4283      	cmp	r3, r0
 800837a:	d004      	beq.n	8008386 <__swbuf_r+0x62>
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	07db      	lsls	r3, r3, #31
 8008380:	d506      	bpl.n	8008390 <__swbuf_r+0x6c>
 8008382:	2e0a      	cmp	r6, #10
 8008384:	d104      	bne.n	8008390 <__swbuf_r+0x6c>
 8008386:	4621      	mov	r1, r4
 8008388:	4628      	mov	r0, r5
 800838a:	f000 f927 	bl	80085dc <_fflush_r>
 800838e:	b988      	cbnz	r0, 80083b4 <__swbuf_r+0x90>
 8008390:	4638      	mov	r0, r7
 8008392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008394:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <__swbuf_r+0x9c>)
 8008396:	429c      	cmp	r4, r3
 8008398:	d101      	bne.n	800839e <__swbuf_r+0x7a>
 800839a:	68ac      	ldr	r4, [r5, #8]
 800839c:	e7cf      	b.n	800833e <__swbuf_r+0x1a>
 800839e:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <__swbuf_r+0xa0>)
 80083a0:	429c      	cmp	r4, r3
 80083a2:	bf08      	it	eq
 80083a4:	68ec      	ldreq	r4, [r5, #12]
 80083a6:	e7ca      	b.n	800833e <__swbuf_r+0x1a>
 80083a8:	4621      	mov	r1, r4
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 f81a 	bl	80083e4 <__swsetup_r>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d0cb      	beq.n	800834c <__swbuf_r+0x28>
 80083b4:	f04f 37ff 	mov.w	r7, #4294967295
 80083b8:	e7ea      	b.n	8008390 <__swbuf_r+0x6c>
 80083ba:	bf00      	nop
 80083bc:	08009004 	.word	0x08009004
 80083c0:	08009024 	.word	0x08009024
 80083c4:	08008fe4 	.word	0x08008fe4

080083c8 <__ascii_wctomb>:
 80083c8:	b149      	cbz	r1, 80083de <__ascii_wctomb+0x16>
 80083ca:	2aff      	cmp	r2, #255	; 0xff
 80083cc:	bf85      	ittet	hi
 80083ce:	238a      	movhi	r3, #138	; 0x8a
 80083d0:	6003      	strhi	r3, [r0, #0]
 80083d2:	700a      	strbls	r2, [r1, #0]
 80083d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80083d8:	bf98      	it	ls
 80083da:	2001      	movls	r0, #1
 80083dc:	4770      	bx	lr
 80083de:	4608      	mov	r0, r1
 80083e0:	4770      	bx	lr
	...

080083e4 <__swsetup_r>:
 80083e4:	4b32      	ldr	r3, [pc, #200]	; (80084b0 <__swsetup_r+0xcc>)
 80083e6:	b570      	push	{r4, r5, r6, lr}
 80083e8:	681d      	ldr	r5, [r3, #0]
 80083ea:	4606      	mov	r6, r0
 80083ec:	460c      	mov	r4, r1
 80083ee:	b125      	cbz	r5, 80083fa <__swsetup_r+0x16>
 80083f0:	69ab      	ldr	r3, [r5, #24]
 80083f2:	b913      	cbnz	r3, 80083fa <__swsetup_r+0x16>
 80083f4:	4628      	mov	r0, r5
 80083f6:	f000 f985 	bl	8008704 <__sinit>
 80083fa:	4b2e      	ldr	r3, [pc, #184]	; (80084b4 <__swsetup_r+0xd0>)
 80083fc:	429c      	cmp	r4, r3
 80083fe:	d10f      	bne.n	8008420 <__swsetup_r+0x3c>
 8008400:	686c      	ldr	r4, [r5, #4]
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008408:	0719      	lsls	r1, r3, #28
 800840a:	d42c      	bmi.n	8008466 <__swsetup_r+0x82>
 800840c:	06dd      	lsls	r5, r3, #27
 800840e:	d411      	bmi.n	8008434 <__swsetup_r+0x50>
 8008410:	2309      	movs	r3, #9
 8008412:	6033      	str	r3, [r6, #0]
 8008414:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008418:	81a3      	strh	r3, [r4, #12]
 800841a:	f04f 30ff 	mov.w	r0, #4294967295
 800841e:	e03e      	b.n	800849e <__swsetup_r+0xba>
 8008420:	4b25      	ldr	r3, [pc, #148]	; (80084b8 <__swsetup_r+0xd4>)
 8008422:	429c      	cmp	r4, r3
 8008424:	d101      	bne.n	800842a <__swsetup_r+0x46>
 8008426:	68ac      	ldr	r4, [r5, #8]
 8008428:	e7eb      	b.n	8008402 <__swsetup_r+0x1e>
 800842a:	4b24      	ldr	r3, [pc, #144]	; (80084bc <__swsetup_r+0xd8>)
 800842c:	429c      	cmp	r4, r3
 800842e:	bf08      	it	eq
 8008430:	68ec      	ldreq	r4, [r5, #12]
 8008432:	e7e6      	b.n	8008402 <__swsetup_r+0x1e>
 8008434:	0758      	lsls	r0, r3, #29
 8008436:	d512      	bpl.n	800845e <__swsetup_r+0x7a>
 8008438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800843a:	b141      	cbz	r1, 800844e <__swsetup_r+0x6a>
 800843c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008440:	4299      	cmp	r1, r3
 8008442:	d002      	beq.n	800844a <__swsetup_r+0x66>
 8008444:	4630      	mov	r0, r6
 8008446:	f7ff fb31 	bl	8007aac <_free_r>
 800844a:	2300      	movs	r3, #0
 800844c:	6363      	str	r3, [r4, #52]	; 0x34
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008454:	81a3      	strh	r3, [r4, #12]
 8008456:	2300      	movs	r3, #0
 8008458:	6063      	str	r3, [r4, #4]
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	f043 0308 	orr.w	r3, r3, #8
 8008464:	81a3      	strh	r3, [r4, #12]
 8008466:	6923      	ldr	r3, [r4, #16]
 8008468:	b94b      	cbnz	r3, 800847e <__swsetup_r+0x9a>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008474:	d003      	beq.n	800847e <__swsetup_r+0x9a>
 8008476:	4621      	mov	r1, r4
 8008478:	4630      	mov	r0, r6
 800847a:	f000 fa09 	bl	8008890 <__smakebuf_r>
 800847e:	89a0      	ldrh	r0, [r4, #12]
 8008480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008484:	f010 0301 	ands.w	r3, r0, #1
 8008488:	d00a      	beq.n	80084a0 <__swsetup_r+0xbc>
 800848a:	2300      	movs	r3, #0
 800848c:	60a3      	str	r3, [r4, #8]
 800848e:	6963      	ldr	r3, [r4, #20]
 8008490:	425b      	negs	r3, r3
 8008492:	61a3      	str	r3, [r4, #24]
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	b943      	cbnz	r3, 80084aa <__swsetup_r+0xc6>
 8008498:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800849c:	d1ba      	bne.n	8008414 <__swsetup_r+0x30>
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	0781      	lsls	r1, r0, #30
 80084a2:	bf58      	it	pl
 80084a4:	6963      	ldrpl	r3, [r4, #20]
 80084a6:	60a3      	str	r3, [r4, #8]
 80084a8:	e7f4      	b.n	8008494 <__swsetup_r+0xb0>
 80084aa:	2000      	movs	r0, #0
 80084ac:	e7f7      	b.n	800849e <__swsetup_r+0xba>
 80084ae:	bf00      	nop
 80084b0:	20000010 	.word	0x20000010
 80084b4:	08009004 	.word	0x08009004
 80084b8:	08009024 	.word	0x08009024
 80084bc:	08008fe4 	.word	0x08008fe4

080084c0 <abort>:
 80084c0:	b508      	push	{r3, lr}
 80084c2:	2006      	movs	r0, #6
 80084c4:	f000 fa54 	bl	8008970 <raise>
 80084c8:	2001      	movs	r0, #1
 80084ca:	f7f9 fa97 	bl	80019fc <_exit>
	...

080084d0 <__sflush_r>:
 80084d0:	898a      	ldrh	r2, [r1, #12]
 80084d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d6:	4605      	mov	r5, r0
 80084d8:	0710      	lsls	r0, r2, #28
 80084da:	460c      	mov	r4, r1
 80084dc:	d458      	bmi.n	8008590 <__sflush_r+0xc0>
 80084de:	684b      	ldr	r3, [r1, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	dc05      	bgt.n	80084f0 <__sflush_r+0x20>
 80084e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	dc02      	bgt.n	80084f0 <__sflush_r+0x20>
 80084ea:	2000      	movs	r0, #0
 80084ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	d0f9      	beq.n	80084ea <__sflush_r+0x1a>
 80084f6:	2300      	movs	r3, #0
 80084f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084fc:	682f      	ldr	r7, [r5, #0]
 80084fe:	602b      	str	r3, [r5, #0]
 8008500:	d032      	beq.n	8008568 <__sflush_r+0x98>
 8008502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	075a      	lsls	r2, r3, #29
 8008508:	d505      	bpl.n	8008516 <__sflush_r+0x46>
 800850a:	6863      	ldr	r3, [r4, #4]
 800850c:	1ac0      	subs	r0, r0, r3
 800850e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008510:	b10b      	cbz	r3, 8008516 <__sflush_r+0x46>
 8008512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008514:	1ac0      	subs	r0, r0, r3
 8008516:	2300      	movs	r3, #0
 8008518:	4602      	mov	r2, r0
 800851a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800851c:	6a21      	ldr	r1, [r4, #32]
 800851e:	4628      	mov	r0, r5
 8008520:	47b0      	blx	r6
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	d106      	bne.n	8008536 <__sflush_r+0x66>
 8008528:	6829      	ldr	r1, [r5, #0]
 800852a:	291d      	cmp	r1, #29
 800852c:	d82c      	bhi.n	8008588 <__sflush_r+0xb8>
 800852e:	4a2a      	ldr	r2, [pc, #168]	; (80085d8 <__sflush_r+0x108>)
 8008530:	40ca      	lsrs	r2, r1
 8008532:	07d6      	lsls	r6, r2, #31
 8008534:	d528      	bpl.n	8008588 <__sflush_r+0xb8>
 8008536:	2200      	movs	r2, #0
 8008538:	6062      	str	r2, [r4, #4]
 800853a:	04d9      	lsls	r1, r3, #19
 800853c:	6922      	ldr	r2, [r4, #16]
 800853e:	6022      	str	r2, [r4, #0]
 8008540:	d504      	bpl.n	800854c <__sflush_r+0x7c>
 8008542:	1c42      	adds	r2, r0, #1
 8008544:	d101      	bne.n	800854a <__sflush_r+0x7a>
 8008546:	682b      	ldr	r3, [r5, #0]
 8008548:	b903      	cbnz	r3, 800854c <__sflush_r+0x7c>
 800854a:	6560      	str	r0, [r4, #84]	; 0x54
 800854c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800854e:	602f      	str	r7, [r5, #0]
 8008550:	2900      	cmp	r1, #0
 8008552:	d0ca      	beq.n	80084ea <__sflush_r+0x1a>
 8008554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008558:	4299      	cmp	r1, r3
 800855a:	d002      	beq.n	8008562 <__sflush_r+0x92>
 800855c:	4628      	mov	r0, r5
 800855e:	f7ff faa5 	bl	8007aac <_free_r>
 8008562:	2000      	movs	r0, #0
 8008564:	6360      	str	r0, [r4, #52]	; 0x34
 8008566:	e7c1      	b.n	80084ec <__sflush_r+0x1c>
 8008568:	6a21      	ldr	r1, [r4, #32]
 800856a:	2301      	movs	r3, #1
 800856c:	4628      	mov	r0, r5
 800856e:	47b0      	blx	r6
 8008570:	1c41      	adds	r1, r0, #1
 8008572:	d1c7      	bne.n	8008504 <__sflush_r+0x34>
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d0c4      	beq.n	8008504 <__sflush_r+0x34>
 800857a:	2b1d      	cmp	r3, #29
 800857c:	d001      	beq.n	8008582 <__sflush_r+0xb2>
 800857e:	2b16      	cmp	r3, #22
 8008580:	d101      	bne.n	8008586 <__sflush_r+0xb6>
 8008582:	602f      	str	r7, [r5, #0]
 8008584:	e7b1      	b.n	80084ea <__sflush_r+0x1a>
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800858c:	81a3      	strh	r3, [r4, #12]
 800858e:	e7ad      	b.n	80084ec <__sflush_r+0x1c>
 8008590:	690f      	ldr	r7, [r1, #16]
 8008592:	2f00      	cmp	r7, #0
 8008594:	d0a9      	beq.n	80084ea <__sflush_r+0x1a>
 8008596:	0793      	lsls	r3, r2, #30
 8008598:	680e      	ldr	r6, [r1, #0]
 800859a:	bf08      	it	eq
 800859c:	694b      	ldreq	r3, [r1, #20]
 800859e:	600f      	str	r7, [r1, #0]
 80085a0:	bf18      	it	ne
 80085a2:	2300      	movne	r3, #0
 80085a4:	eba6 0807 	sub.w	r8, r6, r7
 80085a8:	608b      	str	r3, [r1, #8]
 80085aa:	f1b8 0f00 	cmp.w	r8, #0
 80085ae:	dd9c      	ble.n	80084ea <__sflush_r+0x1a>
 80085b0:	6a21      	ldr	r1, [r4, #32]
 80085b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085b4:	4643      	mov	r3, r8
 80085b6:	463a      	mov	r2, r7
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b0      	blx	r6
 80085bc:	2800      	cmp	r0, #0
 80085be:	dc06      	bgt.n	80085ce <__sflush_r+0xfe>
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085c6:	81a3      	strh	r3, [r4, #12]
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295
 80085cc:	e78e      	b.n	80084ec <__sflush_r+0x1c>
 80085ce:	4407      	add	r7, r0
 80085d0:	eba8 0800 	sub.w	r8, r8, r0
 80085d4:	e7e9      	b.n	80085aa <__sflush_r+0xda>
 80085d6:	bf00      	nop
 80085d8:	20400001 	.word	0x20400001

080085dc <_fflush_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	690b      	ldr	r3, [r1, #16]
 80085e0:	4605      	mov	r5, r0
 80085e2:	460c      	mov	r4, r1
 80085e4:	b913      	cbnz	r3, 80085ec <_fflush_r+0x10>
 80085e6:	2500      	movs	r5, #0
 80085e8:	4628      	mov	r0, r5
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	b118      	cbz	r0, 80085f6 <_fflush_r+0x1a>
 80085ee:	6983      	ldr	r3, [r0, #24]
 80085f0:	b90b      	cbnz	r3, 80085f6 <_fflush_r+0x1a>
 80085f2:	f000 f887 	bl	8008704 <__sinit>
 80085f6:	4b14      	ldr	r3, [pc, #80]	; (8008648 <_fflush_r+0x6c>)
 80085f8:	429c      	cmp	r4, r3
 80085fa:	d11b      	bne.n	8008634 <_fflush_r+0x58>
 80085fc:	686c      	ldr	r4, [r5, #4]
 80085fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0ef      	beq.n	80085e6 <_fflush_r+0xa>
 8008606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008608:	07d0      	lsls	r0, r2, #31
 800860a:	d404      	bmi.n	8008616 <_fflush_r+0x3a>
 800860c:	0599      	lsls	r1, r3, #22
 800860e:	d402      	bmi.n	8008616 <_fflush_r+0x3a>
 8008610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008612:	f000 f915 	bl	8008840 <__retarget_lock_acquire_recursive>
 8008616:	4628      	mov	r0, r5
 8008618:	4621      	mov	r1, r4
 800861a:	f7ff ff59 	bl	80084d0 <__sflush_r>
 800861e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008620:	07da      	lsls	r2, r3, #31
 8008622:	4605      	mov	r5, r0
 8008624:	d4e0      	bmi.n	80085e8 <_fflush_r+0xc>
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	059b      	lsls	r3, r3, #22
 800862a:	d4dd      	bmi.n	80085e8 <_fflush_r+0xc>
 800862c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800862e:	f000 f908 	bl	8008842 <__retarget_lock_release_recursive>
 8008632:	e7d9      	b.n	80085e8 <_fflush_r+0xc>
 8008634:	4b05      	ldr	r3, [pc, #20]	; (800864c <_fflush_r+0x70>)
 8008636:	429c      	cmp	r4, r3
 8008638:	d101      	bne.n	800863e <_fflush_r+0x62>
 800863a:	68ac      	ldr	r4, [r5, #8]
 800863c:	e7df      	b.n	80085fe <_fflush_r+0x22>
 800863e:	4b04      	ldr	r3, [pc, #16]	; (8008650 <_fflush_r+0x74>)
 8008640:	429c      	cmp	r4, r3
 8008642:	bf08      	it	eq
 8008644:	68ec      	ldreq	r4, [r5, #12]
 8008646:	e7da      	b.n	80085fe <_fflush_r+0x22>
 8008648:	08009004 	.word	0x08009004
 800864c:	08009024 	.word	0x08009024
 8008650:	08008fe4 	.word	0x08008fe4

08008654 <std>:
 8008654:	2300      	movs	r3, #0
 8008656:	b510      	push	{r4, lr}
 8008658:	4604      	mov	r4, r0
 800865a:	e9c0 3300 	strd	r3, r3, [r0]
 800865e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008662:	6083      	str	r3, [r0, #8]
 8008664:	8181      	strh	r1, [r0, #12]
 8008666:	6643      	str	r3, [r0, #100]	; 0x64
 8008668:	81c2      	strh	r2, [r0, #14]
 800866a:	6183      	str	r3, [r0, #24]
 800866c:	4619      	mov	r1, r3
 800866e:	2208      	movs	r2, #8
 8008670:	305c      	adds	r0, #92	; 0x5c
 8008672:	f7fd fb45 	bl	8005d00 <memset>
 8008676:	4b05      	ldr	r3, [pc, #20]	; (800868c <std+0x38>)
 8008678:	6263      	str	r3, [r4, #36]	; 0x24
 800867a:	4b05      	ldr	r3, [pc, #20]	; (8008690 <std+0x3c>)
 800867c:	62a3      	str	r3, [r4, #40]	; 0x28
 800867e:	4b05      	ldr	r3, [pc, #20]	; (8008694 <std+0x40>)
 8008680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008682:	4b05      	ldr	r3, [pc, #20]	; (8008698 <std+0x44>)
 8008684:	6224      	str	r4, [r4, #32]
 8008686:	6323      	str	r3, [r4, #48]	; 0x30
 8008688:	bd10      	pop	{r4, pc}
 800868a:	bf00      	nop
 800868c:	080089a9 	.word	0x080089a9
 8008690:	080089cb 	.word	0x080089cb
 8008694:	08008a03 	.word	0x08008a03
 8008698:	08008a27 	.word	0x08008a27

0800869c <_cleanup_r>:
 800869c:	4901      	ldr	r1, [pc, #4]	; (80086a4 <_cleanup_r+0x8>)
 800869e:	f000 b8af 	b.w	8008800 <_fwalk_reent>
 80086a2:	bf00      	nop
 80086a4:	080085dd 	.word	0x080085dd

080086a8 <__sfmoreglue>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	2268      	movs	r2, #104	; 0x68
 80086ac:	1e4d      	subs	r5, r1, #1
 80086ae:	4355      	muls	r5, r2
 80086b0:	460e      	mov	r6, r1
 80086b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086b6:	f7ff fa65 	bl	8007b84 <_malloc_r>
 80086ba:	4604      	mov	r4, r0
 80086bc:	b140      	cbz	r0, 80086d0 <__sfmoreglue+0x28>
 80086be:	2100      	movs	r1, #0
 80086c0:	e9c0 1600 	strd	r1, r6, [r0]
 80086c4:	300c      	adds	r0, #12
 80086c6:	60a0      	str	r0, [r4, #8]
 80086c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086cc:	f7fd fb18 	bl	8005d00 <memset>
 80086d0:	4620      	mov	r0, r4
 80086d2:	bd70      	pop	{r4, r5, r6, pc}

080086d4 <__sfp_lock_acquire>:
 80086d4:	4801      	ldr	r0, [pc, #4]	; (80086dc <__sfp_lock_acquire+0x8>)
 80086d6:	f000 b8b3 	b.w	8008840 <__retarget_lock_acquire_recursive>
 80086da:	bf00      	nop
 80086dc:	2000039d 	.word	0x2000039d

080086e0 <__sfp_lock_release>:
 80086e0:	4801      	ldr	r0, [pc, #4]	; (80086e8 <__sfp_lock_release+0x8>)
 80086e2:	f000 b8ae 	b.w	8008842 <__retarget_lock_release_recursive>
 80086e6:	bf00      	nop
 80086e8:	2000039d 	.word	0x2000039d

080086ec <__sinit_lock_acquire>:
 80086ec:	4801      	ldr	r0, [pc, #4]	; (80086f4 <__sinit_lock_acquire+0x8>)
 80086ee:	f000 b8a7 	b.w	8008840 <__retarget_lock_acquire_recursive>
 80086f2:	bf00      	nop
 80086f4:	2000039e 	.word	0x2000039e

080086f8 <__sinit_lock_release>:
 80086f8:	4801      	ldr	r0, [pc, #4]	; (8008700 <__sinit_lock_release+0x8>)
 80086fa:	f000 b8a2 	b.w	8008842 <__retarget_lock_release_recursive>
 80086fe:	bf00      	nop
 8008700:	2000039e 	.word	0x2000039e

08008704 <__sinit>:
 8008704:	b510      	push	{r4, lr}
 8008706:	4604      	mov	r4, r0
 8008708:	f7ff fff0 	bl	80086ec <__sinit_lock_acquire>
 800870c:	69a3      	ldr	r3, [r4, #24]
 800870e:	b11b      	cbz	r3, 8008718 <__sinit+0x14>
 8008710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008714:	f7ff bff0 	b.w	80086f8 <__sinit_lock_release>
 8008718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800871c:	6523      	str	r3, [r4, #80]	; 0x50
 800871e:	4b13      	ldr	r3, [pc, #76]	; (800876c <__sinit+0x68>)
 8008720:	4a13      	ldr	r2, [pc, #76]	; (8008770 <__sinit+0x6c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	62a2      	str	r2, [r4, #40]	; 0x28
 8008726:	42a3      	cmp	r3, r4
 8008728:	bf04      	itt	eq
 800872a:	2301      	moveq	r3, #1
 800872c:	61a3      	streq	r3, [r4, #24]
 800872e:	4620      	mov	r0, r4
 8008730:	f000 f820 	bl	8008774 <__sfp>
 8008734:	6060      	str	r0, [r4, #4]
 8008736:	4620      	mov	r0, r4
 8008738:	f000 f81c 	bl	8008774 <__sfp>
 800873c:	60a0      	str	r0, [r4, #8]
 800873e:	4620      	mov	r0, r4
 8008740:	f000 f818 	bl	8008774 <__sfp>
 8008744:	2200      	movs	r2, #0
 8008746:	60e0      	str	r0, [r4, #12]
 8008748:	2104      	movs	r1, #4
 800874a:	6860      	ldr	r0, [r4, #4]
 800874c:	f7ff ff82 	bl	8008654 <std>
 8008750:	68a0      	ldr	r0, [r4, #8]
 8008752:	2201      	movs	r2, #1
 8008754:	2109      	movs	r1, #9
 8008756:	f7ff ff7d 	bl	8008654 <std>
 800875a:	68e0      	ldr	r0, [r4, #12]
 800875c:	2202      	movs	r2, #2
 800875e:	2112      	movs	r1, #18
 8008760:	f7ff ff78 	bl	8008654 <std>
 8008764:	2301      	movs	r3, #1
 8008766:	61a3      	str	r3, [r4, #24]
 8008768:	e7d2      	b.n	8008710 <__sinit+0xc>
 800876a:	bf00      	nop
 800876c:	08008c68 	.word	0x08008c68
 8008770:	0800869d 	.word	0x0800869d

08008774 <__sfp>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	4607      	mov	r7, r0
 8008778:	f7ff ffac 	bl	80086d4 <__sfp_lock_acquire>
 800877c:	4b1e      	ldr	r3, [pc, #120]	; (80087f8 <__sfp+0x84>)
 800877e:	681e      	ldr	r6, [r3, #0]
 8008780:	69b3      	ldr	r3, [r6, #24]
 8008782:	b913      	cbnz	r3, 800878a <__sfp+0x16>
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff ffbd 	bl	8008704 <__sinit>
 800878a:	3648      	adds	r6, #72	; 0x48
 800878c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008790:	3b01      	subs	r3, #1
 8008792:	d503      	bpl.n	800879c <__sfp+0x28>
 8008794:	6833      	ldr	r3, [r6, #0]
 8008796:	b30b      	cbz	r3, 80087dc <__sfp+0x68>
 8008798:	6836      	ldr	r6, [r6, #0]
 800879a:	e7f7      	b.n	800878c <__sfp+0x18>
 800879c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087a0:	b9d5      	cbnz	r5, 80087d8 <__sfp+0x64>
 80087a2:	4b16      	ldr	r3, [pc, #88]	; (80087fc <__sfp+0x88>)
 80087a4:	60e3      	str	r3, [r4, #12]
 80087a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087aa:	6665      	str	r5, [r4, #100]	; 0x64
 80087ac:	f000 f847 	bl	800883e <__retarget_lock_init_recursive>
 80087b0:	f7ff ff96 	bl	80086e0 <__sfp_lock_release>
 80087b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087bc:	6025      	str	r5, [r4, #0]
 80087be:	61a5      	str	r5, [r4, #24]
 80087c0:	2208      	movs	r2, #8
 80087c2:	4629      	mov	r1, r5
 80087c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087c8:	f7fd fa9a 	bl	8005d00 <memset>
 80087cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087d4:	4620      	mov	r0, r4
 80087d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087d8:	3468      	adds	r4, #104	; 0x68
 80087da:	e7d9      	b.n	8008790 <__sfp+0x1c>
 80087dc:	2104      	movs	r1, #4
 80087de:	4638      	mov	r0, r7
 80087e0:	f7ff ff62 	bl	80086a8 <__sfmoreglue>
 80087e4:	4604      	mov	r4, r0
 80087e6:	6030      	str	r0, [r6, #0]
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d1d5      	bne.n	8008798 <__sfp+0x24>
 80087ec:	f7ff ff78 	bl	80086e0 <__sfp_lock_release>
 80087f0:	230c      	movs	r3, #12
 80087f2:	603b      	str	r3, [r7, #0]
 80087f4:	e7ee      	b.n	80087d4 <__sfp+0x60>
 80087f6:	bf00      	nop
 80087f8:	08008c68 	.word	0x08008c68
 80087fc:	ffff0001 	.word	0xffff0001

08008800 <_fwalk_reent>:
 8008800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008804:	4606      	mov	r6, r0
 8008806:	4688      	mov	r8, r1
 8008808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800880c:	2700      	movs	r7, #0
 800880e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008812:	f1b9 0901 	subs.w	r9, r9, #1
 8008816:	d505      	bpl.n	8008824 <_fwalk_reent+0x24>
 8008818:	6824      	ldr	r4, [r4, #0]
 800881a:	2c00      	cmp	r4, #0
 800881c:	d1f7      	bne.n	800880e <_fwalk_reent+0xe>
 800881e:	4638      	mov	r0, r7
 8008820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008824:	89ab      	ldrh	r3, [r5, #12]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d907      	bls.n	800883a <_fwalk_reent+0x3a>
 800882a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800882e:	3301      	adds	r3, #1
 8008830:	d003      	beq.n	800883a <_fwalk_reent+0x3a>
 8008832:	4629      	mov	r1, r5
 8008834:	4630      	mov	r0, r6
 8008836:	47c0      	blx	r8
 8008838:	4307      	orrs	r7, r0
 800883a:	3568      	adds	r5, #104	; 0x68
 800883c:	e7e9      	b.n	8008812 <_fwalk_reent+0x12>

0800883e <__retarget_lock_init_recursive>:
 800883e:	4770      	bx	lr

08008840 <__retarget_lock_acquire_recursive>:
 8008840:	4770      	bx	lr

08008842 <__retarget_lock_release_recursive>:
 8008842:	4770      	bx	lr

08008844 <__swhatbuf_r>:
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	460e      	mov	r6, r1
 8008848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800884c:	2900      	cmp	r1, #0
 800884e:	b096      	sub	sp, #88	; 0x58
 8008850:	4614      	mov	r4, r2
 8008852:	461d      	mov	r5, r3
 8008854:	da08      	bge.n	8008868 <__swhatbuf_r+0x24>
 8008856:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	602a      	str	r2, [r5, #0]
 800885e:	061a      	lsls	r2, r3, #24
 8008860:	d410      	bmi.n	8008884 <__swhatbuf_r+0x40>
 8008862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008866:	e00e      	b.n	8008886 <__swhatbuf_r+0x42>
 8008868:	466a      	mov	r2, sp
 800886a:	f000 f903 	bl	8008a74 <_fstat_r>
 800886e:	2800      	cmp	r0, #0
 8008870:	dbf1      	blt.n	8008856 <__swhatbuf_r+0x12>
 8008872:	9a01      	ldr	r2, [sp, #4]
 8008874:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008878:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800887c:	425a      	negs	r2, r3
 800887e:	415a      	adcs	r2, r3
 8008880:	602a      	str	r2, [r5, #0]
 8008882:	e7ee      	b.n	8008862 <__swhatbuf_r+0x1e>
 8008884:	2340      	movs	r3, #64	; 0x40
 8008886:	2000      	movs	r0, #0
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	b016      	add	sp, #88	; 0x58
 800888c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008890 <__smakebuf_r>:
 8008890:	898b      	ldrh	r3, [r1, #12]
 8008892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008894:	079d      	lsls	r5, r3, #30
 8008896:	4606      	mov	r6, r0
 8008898:	460c      	mov	r4, r1
 800889a:	d507      	bpl.n	80088ac <__smakebuf_r+0x1c>
 800889c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	6123      	str	r3, [r4, #16]
 80088a4:	2301      	movs	r3, #1
 80088a6:	6163      	str	r3, [r4, #20]
 80088a8:	b002      	add	sp, #8
 80088aa:	bd70      	pop	{r4, r5, r6, pc}
 80088ac:	ab01      	add	r3, sp, #4
 80088ae:	466a      	mov	r2, sp
 80088b0:	f7ff ffc8 	bl	8008844 <__swhatbuf_r>
 80088b4:	9900      	ldr	r1, [sp, #0]
 80088b6:	4605      	mov	r5, r0
 80088b8:	4630      	mov	r0, r6
 80088ba:	f7ff f963 	bl	8007b84 <_malloc_r>
 80088be:	b948      	cbnz	r0, 80088d4 <__smakebuf_r+0x44>
 80088c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c4:	059a      	lsls	r2, r3, #22
 80088c6:	d4ef      	bmi.n	80088a8 <__smakebuf_r+0x18>
 80088c8:	f023 0303 	bic.w	r3, r3, #3
 80088cc:	f043 0302 	orr.w	r3, r3, #2
 80088d0:	81a3      	strh	r3, [r4, #12]
 80088d2:	e7e3      	b.n	800889c <__smakebuf_r+0xc>
 80088d4:	4b0d      	ldr	r3, [pc, #52]	; (800890c <__smakebuf_r+0x7c>)
 80088d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	6020      	str	r0, [r4, #0]
 80088dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e0:	81a3      	strh	r3, [r4, #12]
 80088e2:	9b00      	ldr	r3, [sp, #0]
 80088e4:	6163      	str	r3, [r4, #20]
 80088e6:	9b01      	ldr	r3, [sp, #4]
 80088e8:	6120      	str	r0, [r4, #16]
 80088ea:	b15b      	cbz	r3, 8008904 <__smakebuf_r+0x74>
 80088ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f0:	4630      	mov	r0, r6
 80088f2:	f000 f8d1 	bl	8008a98 <_isatty_r>
 80088f6:	b128      	cbz	r0, 8008904 <__smakebuf_r+0x74>
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	f043 0301 	orr.w	r3, r3, #1
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	89a0      	ldrh	r0, [r4, #12]
 8008906:	4305      	orrs	r5, r0
 8008908:	81a5      	strh	r5, [r4, #12]
 800890a:	e7cd      	b.n	80088a8 <__smakebuf_r+0x18>
 800890c:	0800869d 	.word	0x0800869d

08008910 <_malloc_usable_size_r>:
 8008910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008914:	1f18      	subs	r0, r3, #4
 8008916:	2b00      	cmp	r3, #0
 8008918:	bfbc      	itt	lt
 800891a:	580b      	ldrlt	r3, [r1, r0]
 800891c:	18c0      	addlt	r0, r0, r3
 800891e:	4770      	bx	lr

08008920 <_raise_r>:
 8008920:	291f      	cmp	r1, #31
 8008922:	b538      	push	{r3, r4, r5, lr}
 8008924:	4604      	mov	r4, r0
 8008926:	460d      	mov	r5, r1
 8008928:	d904      	bls.n	8008934 <_raise_r+0x14>
 800892a:	2316      	movs	r3, #22
 800892c:	6003      	str	r3, [r0, #0]
 800892e:	f04f 30ff 	mov.w	r0, #4294967295
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008936:	b112      	cbz	r2, 800893e <_raise_r+0x1e>
 8008938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800893c:	b94b      	cbnz	r3, 8008952 <_raise_r+0x32>
 800893e:	4620      	mov	r0, r4
 8008940:	f000 f830 	bl	80089a4 <_getpid_r>
 8008944:	462a      	mov	r2, r5
 8008946:	4601      	mov	r1, r0
 8008948:	4620      	mov	r0, r4
 800894a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800894e:	f000 b817 	b.w	8008980 <_kill_r>
 8008952:	2b01      	cmp	r3, #1
 8008954:	d00a      	beq.n	800896c <_raise_r+0x4c>
 8008956:	1c59      	adds	r1, r3, #1
 8008958:	d103      	bne.n	8008962 <_raise_r+0x42>
 800895a:	2316      	movs	r3, #22
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	2001      	movs	r0, #1
 8008960:	e7e7      	b.n	8008932 <_raise_r+0x12>
 8008962:	2400      	movs	r4, #0
 8008964:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008968:	4628      	mov	r0, r5
 800896a:	4798      	blx	r3
 800896c:	2000      	movs	r0, #0
 800896e:	e7e0      	b.n	8008932 <_raise_r+0x12>

08008970 <raise>:
 8008970:	4b02      	ldr	r3, [pc, #8]	; (800897c <raise+0xc>)
 8008972:	4601      	mov	r1, r0
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	f7ff bfd3 	b.w	8008920 <_raise_r>
 800897a:	bf00      	nop
 800897c:	20000010 	.word	0x20000010

08008980 <_kill_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d07      	ldr	r5, [pc, #28]	; (80089a0 <_kill_r+0x20>)
 8008984:	2300      	movs	r3, #0
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	4611      	mov	r1, r2
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	f7f9 f825 	bl	80019dc <_kill>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	d102      	bne.n	800899c <_kill_r+0x1c>
 8008996:	682b      	ldr	r3, [r5, #0]
 8008998:	b103      	cbz	r3, 800899c <_kill_r+0x1c>
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	bd38      	pop	{r3, r4, r5, pc}
 800899e:	bf00      	nop
 80089a0:	20000398 	.word	0x20000398

080089a4 <_getpid_r>:
 80089a4:	f7f9 b812 	b.w	80019cc <_getpid>

080089a8 <__sread>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	460c      	mov	r4, r1
 80089ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b0:	f000 f894 	bl	8008adc <_read_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	bfab      	itete	ge
 80089b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089ba:	89a3      	ldrhlt	r3, [r4, #12]
 80089bc:	181b      	addge	r3, r3, r0
 80089be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089c2:	bfac      	ite	ge
 80089c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089c6:	81a3      	strhlt	r3, [r4, #12]
 80089c8:	bd10      	pop	{r4, pc}

080089ca <__swrite>:
 80089ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ce:	461f      	mov	r7, r3
 80089d0:	898b      	ldrh	r3, [r1, #12]
 80089d2:	05db      	lsls	r3, r3, #23
 80089d4:	4605      	mov	r5, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	4616      	mov	r6, r2
 80089da:	d505      	bpl.n	80089e8 <__swrite+0x1e>
 80089dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e0:	2302      	movs	r3, #2
 80089e2:	2200      	movs	r2, #0
 80089e4:	f000 f868 	bl	8008ab8 <_lseek_r>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	4632      	mov	r2, r6
 80089f6:	463b      	mov	r3, r7
 80089f8:	4628      	mov	r0, r5
 80089fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	f000 b817 	b.w	8008a30 <_write_r>

08008a02 <__sseek>:
 8008a02:	b510      	push	{r4, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0a:	f000 f855 	bl	8008ab8 <_lseek_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	bf15      	itete	ne
 8008a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a1e:	81a3      	strheq	r3, [r4, #12]
 8008a20:	bf18      	it	ne
 8008a22:	81a3      	strhne	r3, [r4, #12]
 8008a24:	bd10      	pop	{r4, pc}

08008a26 <__sclose>:
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f000 b813 	b.w	8008a54 <_close_r>
	...

08008a30 <_write_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d07      	ldr	r5, [pc, #28]	; (8008a50 <_write_r+0x20>)
 8008a34:	4604      	mov	r4, r0
 8008a36:	4608      	mov	r0, r1
 8008a38:	4611      	mov	r1, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	602a      	str	r2, [r5, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7f9 f803 	bl	8001a4a <_write>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_write_r+0x1e>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_write_r+0x1e>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	20000398 	.word	0x20000398

08008a54 <_close_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d06      	ldr	r5, [pc, #24]	; (8008a70 <_close_r+0x1c>)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	f7f9 f80f 	bl	8001a82 <_close>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_close_r+0x1a>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_close_r+0x1a>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	20000398 	.word	0x20000398

08008a74 <_fstat_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d07      	ldr	r5, [pc, #28]	; (8008a94 <_fstat_r+0x20>)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	4611      	mov	r1, r2
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	f7f9 f80a 	bl	8001a9a <_fstat>
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	d102      	bne.n	8008a90 <_fstat_r+0x1c>
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	b103      	cbz	r3, 8008a90 <_fstat_r+0x1c>
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	bd38      	pop	{r3, r4, r5, pc}
 8008a92:	bf00      	nop
 8008a94:	20000398 	.word	0x20000398

08008a98 <_isatty_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d06      	ldr	r5, [pc, #24]	; (8008ab4 <_isatty_r+0x1c>)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	602b      	str	r3, [r5, #0]
 8008aa4:	f7f9 f809 	bl	8001aba <_isatty>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_isatty_r+0x1a>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_isatty_r+0x1a>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	20000398 	.word	0x20000398

08008ab8 <_lseek_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4d07      	ldr	r5, [pc, #28]	; (8008ad8 <_lseek_r+0x20>)
 8008abc:	4604      	mov	r4, r0
 8008abe:	4608      	mov	r0, r1
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	602a      	str	r2, [r5, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f7f9 f802 	bl	8001ad0 <_lseek>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_lseek_r+0x1e>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_lseek_r+0x1e>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	20000398 	.word	0x20000398

08008adc <_read_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4d07      	ldr	r5, [pc, #28]	; (8008afc <_read_r+0x20>)
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	602a      	str	r2, [r5, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f7f8 ff90 	bl	8001a10 <_read>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_read_r+0x1e>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_read_r+0x1e>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	20000398 	.word	0x20000398

08008b00 <_init>:
 8008b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b02:	bf00      	nop
 8008b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b06:	bc08      	pop	{r3}
 8008b08:	469e      	mov	lr, r3
 8008b0a:	4770      	bx	lr

08008b0c <_fini>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	bf00      	nop
 8008b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b12:	bc08      	pop	{r3}
 8008b14:	469e      	mov	lr, r3
 8008b16:	4770      	bx	lr
